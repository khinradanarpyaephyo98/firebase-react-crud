{"ast":null,"code":"import _slicedToArray from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _assertThisInitialized from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _toConsumableArray from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/khinradanar/Desktop/krpp_crud/crud-firebase-info-system/node_modules/@babel/runtime/regenerator/index.js\";\nimport { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nvar name = \"@firebase/database\";\nvar version = \"0.12.5\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\nvar SDK_VERSION = '';\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\n\n\nvar DOMStorageWrapper = /*#__PURE__*/function () {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    _classCallCheck(this, DOMStorageWrapper);\n\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n\n\n  _createClass(DOMStorageWrapper, [{\n    key: \"set\",\n    value: function set(key, value) {\n      if (value == null) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n      } else {\n        this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n      }\n    }\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n      if (storedVal == null) {\n        return null;\n      } else {\n        return jsonEval(storedVal);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    }\n  }, {\n    key: \"prefixedName_\",\n    value: function prefixedName_(name) {\n      return this.prefix_ + name;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.domStorage_.toString();\n    }\n  }]);\n\n  return DOMStorageWrapper;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\n\n\nvar MemoryStorage = /*#__PURE__*/function () {\n  function MemoryStorage() {\n    _classCallCheck(this, MemoryStorage);\n\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  _createClass(MemoryStorage, [{\n    key: \"set\",\n    value: function set(key, value) {\n      if (value == null) {\n        delete this.cache_[key];\n      } else {\n        this.cache_[key] = value;\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (contains(this.cache_, key)) {\n        return this.cache_[key];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      delete this.cache_[key];\n    }\n  }]);\n\n  return MemoryStorage;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\n\n\nvar createStoragefor = function createStoragefor(domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nvar SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\n\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\n\n\nvar sha1 = function sha1(str) {\n  var utf8Bytes = stringToByteArray(str);\n  var sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nvar buildLogMessage_ = function buildLogMessage_() {\n  var message = '';\n\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n\n    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\n\n\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\n\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\n\nvar enableLogging$1 = function enableLogging$1(logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nvar log = function log() {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n\n  if (logger) {\n    for (var _len = arguments.length, varArgs = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      varArgs[_key2] = arguments[_key2];\n    }\n\n    var message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nvar logWrapper = function logWrapper(prefix) {\n  return function () {\n    for (var _len2 = arguments.length, varArgs = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      varArgs[_key3] = arguments[_key3];\n    }\n\n    log.apply(void 0, [prefix].concat(varArgs));\n  };\n};\n\nvar error = function error() {\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, arguments);\n  logClient.error(message);\n};\n\nvar fatal = function fatal() {\n  var message = \"FIREBASE FATAL ERROR: \".concat(buildLogMessage_.apply(void 0, arguments));\n  logClient.error(message);\n  throw new Error(message);\n};\n\nvar warn = function warn() {\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, arguments);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nvar warnIfPageIsSecure = function warnIfPageIsSecure() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\n\n\nvar isInvalidJSONNumber = function isInvalidJSONNumber(data) {\n  return typeof data === 'number' && (data !== data || // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n\nvar executeWhenDOMReady = function executeWhenDOMReady(fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called = false;\n\n    var wrappedFn = function wrappedFn() {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      }); // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      window.attachEvent('onload', wrappedFn); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\n\n\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\n\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\n\nvar nameCompare = function nameCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n        bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\n\n\nvar stringCompare = function stringCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nvar requireKey = function requireKey(key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\n\nvar ObjectToUniqueKey = function ObjectToUniqueKey(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  var keys = []; // eslint-disable-next-line guard-for-in\n\n  for (var k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  var key = '{';\n\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\n\n\nvar splitStringBySize = function splitStringBySize(str, segsize) {\n  var len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  var dataSegs = [];\n\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\n\n\nfunction each(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\n\n\nvar doubleToIEEE754String = function doubleToIEEE754String(v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  var ebits = 11,\n      fbits = 52;\n  var bias = (1 << ebits - 1) - 1;\n  var s, e, f, ln, i; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  var bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  var str = bits.join(''); // Return the data as a hex string. --MJL\n\n  var hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\n\n\nvar isChromeExtensionContentScript = function isChromeExtensionContentScript() {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\n\n\nvar isWindowsStoreApp = function isWindowsStoreApp() {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\n\n\nfunction errorForServerCode(code, query) {\n  var reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  var error = new Error(code + ' at ' + query._path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\n\n\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\n\nvar INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\n\nvar INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\n\nvar tryParseInt = function tryParseInt(str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\n\n\nvar exceptionGuard = function exceptionGuard(fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\n\n\nvar beingCrawled = function beingCrawled() {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\n\n\nvar setTimeoutNonBlocking = function setTimeoutNonBlocking(fn, time) {\n  var timeout = setTimeout(fn, time); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\n\n\nvar AppCheckTokenProvider = /*#__PURE__*/function () {\n  function AppCheckTokenProvider(appName_, appCheckProvider) {\n    var _this = this;\n\n    _classCallCheck(this, AppCheckTokenProvider);\n\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(function (appCheck) {\n        return _this.appCheck = appCheck;\n      });\n    }\n  }\n\n  _createClass(AppCheckTokenProvider, [{\n    key: \"getToken\",\n    value: function getToken(forceRefresh) {\n      var _this2 = this;\n\n      if (!this.appCheck) {\n        return new Promise(function (resolve, reject) {\n          // Support delayed initialization of FirebaseAppCheck. This allows our\n          // customers to initialize the RTDB SDK before initializing Firebase\n          // AppCheck and ensures that all requests are authenticated if a token\n          // becomes available before the timoeout below expires.\n          setTimeout(function () {\n            if (_this2.appCheck) {\n              _this2.getToken(forceRefresh).then(resolve, reject);\n            } else {\n              resolve(null);\n            }\n          }, 0);\n        });\n      }\n\n      return this.appCheck.getToken(forceRefresh);\n    }\n  }, {\n    key: \"addTokenChangeListener\",\n    value: function addTokenChangeListener(listener) {\n      var _a;\n\n      (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(function (appCheck) {\n        return appCheck.addTokenListener(listener);\n      });\n    }\n  }, {\n    key: \"notifyForInvalidToken\",\n    value: function notifyForInvalidToken() {\n      warn(\"Provided AppCheck credentials for the app named \\\"\".concat(this.appName_, \"\\\" \") + 'are invalid. This usually indicates your app was not initialized correctly.');\n    }\n  }]);\n\n  return AppCheckTokenProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nvar FirebaseAuthTokenProvider = /*#__PURE__*/function () {\n  function FirebaseAuthTokenProvider(appName_, firebaseOptions_, authProvider_) {\n    var _this3 = this;\n\n    _classCallCheck(this, FirebaseAuthTokenProvider);\n\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth_) {\n      authProvider_.onInit(function (auth) {\n        return _this3.auth_ = auth;\n      });\n    }\n  }\n\n  _createClass(FirebaseAuthTokenProvider, [{\n    key: \"getToken\",\n    value: function getToken(forceRefresh) {\n      var _this4 = this;\n\n      if (!this.auth_) {\n        return new Promise(function (resolve, reject) {\n          // Support delayed initialization of FirebaseAuth. This allows our\n          // customers to initialize the RTDB SDK before initializing Firebase\n          // Auth and ensures that all requests are authenticated if a token\n          // becomes available before the timoeout below expires.\n          setTimeout(function () {\n            if (_this4.auth_) {\n              _this4.getToken(forceRefresh).then(resolve, reject);\n            } else {\n              resolve(null);\n            }\n          }, 0);\n        });\n      }\n\n      return this.auth_.getToken(forceRefresh).catch(function (error) {\n        // TODO: Need to figure out all the cases this is raised and whether\n        // this makes sense.\n        if (error && error.code === 'auth/token-not-initialized') {\n          log('Got auth/token-not-initialized error.  Treating as null token.');\n          return null;\n        } else {\n          return Promise.reject(error);\n        }\n      });\n    }\n  }, {\n    key: \"addTokenChangeListener\",\n    value: function addTokenChangeListener(listener) {\n      // TODO: We might want to wrap the listener and call it with no args to\n      // avoid a leaky abstraction, but that makes removing the listener harder.\n      if (this.auth_) {\n        this.auth_.addAuthTokenListener(listener);\n      } else {\n        this.authProvider_.get().then(function (auth) {\n          return auth.addAuthTokenListener(listener);\n        });\n      }\n    }\n  }, {\n    key: \"removeTokenChangeListener\",\n    value: function removeTokenChangeListener(listener) {\n      this.authProvider_.get().then(function (auth) {\n        return auth.removeAuthTokenListener(listener);\n      });\n    }\n  }, {\n    key: \"notifyForInvalidToken\",\n    value: function notifyForInvalidToken() {\n      var errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n      if ('credential' in this.firebaseOptions_) {\n        errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n      } else if ('serviceAccount' in this.firebaseOptions_) {\n        errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n      } else {\n        errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n      }\n\n      warn(errorMessage);\n    }\n  }]);\n\n  return FirebaseAuthTokenProvider;\n}();\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\n\n\nvar EmulatorTokenProvider = /*#__PURE__*/function () {\n  function EmulatorTokenProvider(accessToken) {\n    _classCallCheck(this, EmulatorTokenProvider);\n\n    this.accessToken = accessToken;\n  }\n\n  _createClass(EmulatorTokenProvider, [{\n    key: \"getToken\",\n    value: function getToken(forceRefresh) {\n      return Promise.resolve({\n        accessToken: this.accessToken\n      });\n    }\n  }, {\n    key: \"addTokenChangeListener\",\n    value: function addTokenChangeListener(listener) {\n      // Invoke the listener immediately to match the behavior in Firebase Auth\n      // (see packages/auth/src/auth.js#L1807)\n      listener(this.accessToken);\n    }\n  }, {\n    key: \"removeTokenChangeListener\",\n    value: function removeTokenChangeListener(listener) {}\n  }, {\n    key: \"notifyForInvalidToken\",\n    value: function notifyForInvalidToken() {}\n  }]);\n\n  return EmulatorTokenProvider;\n}();\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n\n\nEmulatorTokenProvider.OWNER = 'owner';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f'; // Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\n\nvar FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nvar LAST_SESSION_PARAM = 'ls';\nvar APPLICATION_ID_PARAM = 'p';\nvar APP_CHECK_TOKEN_PARAM = 'ac';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n */\n\nvar RepoInfo = /*#__PURE__*/function () {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly) {\n    var nodeAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var persistenceKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    var includeNamespaceInQueryParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n    _classCallCheck(this, RepoInfo);\n\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n\n  _createClass(RepoInfo, [{\n    key: \"isCacheableHost\",\n    value: function isCacheableHost() {\n      return this.internalHost.substr(0, 2) === 's-';\n    }\n  }, {\n    key: \"isCustomHost\",\n    value: function isCustomHost() {\n      return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      return this._host;\n    },\n    set: function set(newHost) {\n      if (newHost !== this.internalHost) {\n        this.internalHost = newHost;\n\n        if (this.isCacheableHost()) {\n          PersistentStorage.set('host:' + this._host, this.internalHost);\n        }\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var str = this.toURLString();\n\n      if (this.persistenceKey) {\n        str += '<' + this.persistenceKey + '>';\n      }\n\n      return str;\n    }\n  }, {\n    key: \"toURLString\",\n    value: function toURLString() {\n      var protocol = this.secure ? 'https://' : 'http://';\n      var query = this.includeNamespaceInQueryParams ? \"?ns=\".concat(this.namespace) : '';\n      return \"\".concat(protocol).concat(this.host, \"/\").concat(query);\n    }\n  }]);\n\n  return RepoInfo;\n}();\n\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\n\n\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  var connURL;\n\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  var pairs = [];\n  each(params, function (key, value) {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n */\n\n\nvar StatsCollection = /*#__PURE__*/function () {\n  function StatsCollection() {\n    _classCallCheck(this, StatsCollection);\n\n    this.counters_ = {};\n  }\n\n  _createClass(StatsCollection, [{\n    key: \"incrementCounter\",\n    value: function incrementCounter(name) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (!contains(this.counters_, name)) {\n        this.counters_[name] = 0;\n      }\n\n      this.counters_[name] += amount;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return deepCopy(this.counters_);\n    }\n  }]);\n\n  return StatsCollection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar collections = {};\nvar reporters = {};\n\nfunction statsManagerGetCollection(repoInfo) {\n  var hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  var hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString];\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\n\n\nvar PacketReceiver = /*#__PURE__*/function () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    _classCallCheck(this, PacketReceiver);\n\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  _createClass(PacketReceiver, [{\n    key: \"closeAfter\",\n    value: function closeAfter(responseNum, callback) {\n      this.closeAfterResponse = responseNum;\n      this.onClose = callback;\n\n      if (this.closeAfterResponse < this.currentResponseNum) {\n        this.onClose();\n        this.onClose = null;\n      }\n    }\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\n\n  }, {\n    key: \"handleResponse\",\n    value: function handleResponse(requestNum, data) {\n      var _this5 = this;\n\n      this.pendingResponses[requestNum] = data;\n\n      var _loop = function _loop() {\n        var toProcess = _this5.pendingResponses[_this5.currentResponseNum];\n        delete _this5.pendingResponses[_this5.currentResponseNum];\n\n        var _loop2 = function _loop2(i) {\n          if (toProcess[i]) {\n            exceptionGuard(function () {\n              _this5.onMessage_(toProcess[i]);\n            });\n          }\n        };\n\n        for (var i = 0; i < toProcess.length; ++i) {\n          _loop2(i);\n        }\n\n        if (_this5.currentResponseNum === _this5.closeAfterResponse) {\n          if (_this5.onClose) {\n            _this5.onClose();\n\n            _this5.onClose = null;\n          }\n\n          return \"break\";\n        }\n\n        _this5.currentResponseNum++;\n      };\n\n      while (this.pendingResponses[this.currentResponseNum]) {\n        var _ret = _loop();\n\n        if (_ret === \"break\") break;\n      }\n    }\n  }]);\n\n  return PacketReceiver;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\n\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\n\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\n\nvar BrowserPollConnection = /*#__PURE__*/function () {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    var _this6 = this;\n\n    _classCallCheck(this, BrowserPollConnection);\n\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n\n    this.urlFn = function (params) {\n      // Always add the token if we have one.\n      if (_this6.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = _this6.appCheckToken;\n      }\n\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n\n\n  _createClass(BrowserPollConnection, [{\n    key: \"open\",\n    value: function open(onMessage, onDisconnect) {\n      var _this7 = this;\n\n      this.curSegmentNum = 0;\n      this.onDisconnect_ = onDisconnect;\n      this.myPacketOrderer = new PacketReceiver(onMessage);\n      this.isClosed_ = false;\n      this.connectTimeoutTimer_ = setTimeout(function () {\n        _this7.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n\n        _this7.onClosed_();\n\n        _this7.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n      executeWhenDOMReady(function () {\n        if (_this7.isClosed_) {\n          return;\n        } //Set up a callback that gets triggered once a connection is set up.\n\n\n        _this7.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n\n          var command = args[0],\n              arg1 = args[1],\n              arg2 = args[2],\n              arg3 = args[3],\n              arg4 = args[4];\n\n          _this7.incrementIncomingBytes_(args);\n\n          if (!_this7.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (_this7.connectTimeoutTimer_) {\n            clearTimeout(_this7.connectTimeoutTimer_);\n            _this7.connectTimeoutTimer_ = null;\n          }\n\n          _this7.everConnected_ = true;\n\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            _this7.id = arg1;\n            _this7.password = arg2;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              _this7.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n\n              _this7.myPacketOrderer.closeAfter(arg1, function () {\n                _this7.onClosed_();\n              });\n            } else {\n              _this7.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        }, function () {\n          for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n\n          var pN = args[0],\n              data = args[1];\n\n          _this7.incrementIncomingBytes_(args);\n\n          _this7.myPacketOrderer.handleResponse(pN, data);\n        }, function () {\n          _this7.onClosed_();\n        }, _this7.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n        //from cache.\n\n        var urlParams = {};\n        urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n        urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n\n        if (_this7.scriptTagHolder.uniqueCallbackIdentifier) {\n          urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this7.scriptTagHolder.uniqueCallbackIdentifier;\n        }\n\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n        if (_this7.transportSessionId) {\n          urlParams[TRANSPORT_SESSION_PARAM] = _this7.transportSessionId;\n        }\n\n        if (_this7.lastSessionId) {\n          urlParams[LAST_SESSION_PARAM] = _this7.lastSessionId;\n        }\n\n        if (_this7.applicationId) {\n          urlParams[APPLICATION_ID_PARAM] = _this7.applicationId;\n        }\n\n        if (_this7.appCheckToken) {\n          urlParams[APP_CHECK_TOKEN_PARAM] = _this7.appCheckToken;\n        }\n\n        if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n          urlParams[REFERER_PARAM] = FORGE_REF;\n        }\n\n        var connectURL = _this7.urlFn(urlParams);\n\n        _this7.log_('Connecting via long-poll to ' + connectURL);\n\n        _this7.scriptTagHolder.addTag(connectURL, function () {\n          /* do nothing */\n        });\n      });\n    }\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.scriptTagHolder.startLongPoll(this.id, this.password);\n      this.addDisconnectPingFrame(this.id, this.password);\n    }\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\n\n  }, {\n    key: \"markConnectionHealthy\",\n    value:\n    /**\r\n     * No-op for polling\r\n     */\n    function markConnectionHealthy() {}\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\n\n  }, {\n    key: \"shutdown_\",\n    value: function shutdown_() {\n      this.isClosed_ = true;\n\n      if (this.scriptTagHolder) {\n        this.scriptTagHolder.close();\n        this.scriptTagHolder = null;\n      } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n      if (this.myDisconnFrame) {\n        document.body.removeChild(this.myDisconnFrame);\n        this.myDisconnFrame = null;\n      }\n\n      if (this.connectTimeoutTimer_) {\n        clearTimeout(this.connectTimeoutTimer_);\n        this.connectTimeoutTimer_ = null;\n      }\n    }\n    /**\r\n     * Triggered when this transport is closed\r\n     */\n\n  }, {\n    key: \"onClosed_\",\n    value: function onClosed_() {\n      if (!this.isClosed_) {\n        this.log_('Longpoll is closing itself');\n        this.shutdown_();\n\n        if (this.onDisconnect_) {\n          this.onDisconnect_(this.everConnected_);\n          this.onDisconnect_ = null;\n        }\n      }\n    }\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.isClosed_) {\n        this.log_('Longpoll is being closed.');\n        this.shutdown_();\n      }\n    }\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      var dataStr = stringify(data);\n      this.bytesSent += dataStr.length;\n      this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n      var base64data = base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n      //up into multiple pieces if it doesn't fit in one request.\n\n      var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n      //of segments so that we can reassemble the packet on the server.\n\n      for (var i = 0; i < dataSegs.length; i++) {\n        this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n        this.curSegmentNum++;\n      }\n    }\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\n\n  }, {\n    key: \"addDisconnectPingFrame\",\n    value: function addDisconnectPingFrame(id, pw) {\n      if (isNodeSdk()) {\n        return;\n      }\n\n      this.myDisconnFrame = document.createElement('iframe');\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n      this.myDisconnFrame.src = this.urlFn(urlParams);\n      this.myDisconnFrame.style.display = 'none';\n      document.body.appendChild(this.myDisconnFrame);\n    }\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\n\n  }, {\n    key: \"incrementIncomingBytes_\",\n    value: function incrementIncomingBytes_(args) {\n      // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n      var bytesReceived = stringify(args).length;\n      this.bytesReceived += bytesReceived;\n      this.stats_.incrementCounter('bytes_received', bytesReceived);\n    }\n  }], [{\n    key: \"forceAllow\",\n    value: function forceAllow() {\n      BrowserPollConnection.forceAllow_ = true;\n    }\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\n\n  }, {\n    key: \"forceDisallow\",\n    value: function forceDisallow() {\n      BrowserPollConnection.forceDisallow_ = true;\n    } // Static method, use string literal so it can be accessed in a generic way\n\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      if (isNodeSdk()) {\n        return false;\n      } else if (BrowserPollConnection.forceAllow_) {\n        return true;\n      } else {\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n        return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n      }\n    }\n  }]);\n\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\n\n\nvar FirebaseIFrameScriptHolder = /*#__PURE__*/function () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    _classCallCheck(this, FirebaseIFrameScriptHolder);\n\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      var iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n\n\n  _createClass(FirebaseIFrameScriptHolder, [{\n    key: \"close\",\n    value:\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\n    function close() {\n      var _this8 = this;\n\n      //Mark this iframe as dead, so no new requests are sent.\n      this.alive = false;\n\n      if (this.myIFrame) {\n        //We have to actually remove all of the html inside this iframe before removing it from the\n        //window, or IE will continue loading and executing the script tags we've already added, which\n        //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n        this.myIFrame.doc.body.innerHTML = '';\n        setTimeout(function () {\n          if (_this8.myIFrame !== null) {\n            document.body.removeChild(_this8.myIFrame);\n            _this8.myIFrame = null;\n          }\n        }, Math.floor(0));\n      } // Protect from being called recursively.\n\n\n      var onDisconnect = this.onDisconnect;\n\n      if (onDisconnect) {\n        this.onDisconnect = null;\n        onDisconnect();\n      }\n    }\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\n\n  }, {\n    key: \"startLongPoll\",\n    value: function startLongPoll(id, pw) {\n      this.myID = id;\n      this.myPW = pw;\n      this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n      while (this.newRequest_()) {}\n    }\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\n\n  }, {\n    key: \"newRequest_\",\n    value: function newRequest_() {\n      // We keep one outstanding request open all the time to receive data, but if we need to send data\n      // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n      // close the old request.\n      if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n        //construct our url\n        this.currentSerial++;\n        var urlParams = {};\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n        urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n        var theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n        var curDataString = '';\n        var i = 0;\n\n        while (this.pendingSegs.length > 0) {\n          //first, lets see if the next segment will fit.\n          var nextSeg = this.pendingSegs[0];\n\n          if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n            //great, the segment will fit. Lets append it.\n            var theSeg = this.pendingSegs.shift();\n            curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n            i++;\n          } else {\n            break;\n          }\n        }\n\n        theURL = theURL + curDataString;\n        this.addLongPollTag_(theURL, this.currentSerial);\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\n\n  }, {\n    key: \"enqueueSegment\",\n    value: function enqueueSegment(segnum, totalsegs, data) {\n      //add this to the queue of segments to send.\n      this.pendingSegs.push({\n        seg: segnum,\n        ts: totalsegs,\n        d: data\n      }); //send the data immediately if there isn't already data being transmitted, unless\n      //startLongPoll hasn't been called yet.\n\n      if (this.alive) {\n        this.newRequest_();\n      }\n    }\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\n\n  }, {\n    key: \"addLongPollTag_\",\n    value: function addLongPollTag_(url, serial) {\n      var _this9 = this;\n\n      //remember that we sent this request.\n      this.outstandingRequests.add(serial);\n\n      var doNewRequest = function doNewRequest() {\n        _this9.outstandingRequests.delete(serial);\n\n        _this9.newRequest_();\n      }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n      // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n      var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n      var readyStateCB = function readyStateCB() {\n        // Request completed.  Cancel the keepalive.\n        clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n        doNewRequest();\n      };\n\n      this.addTag(url, readyStateCB);\n    }\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\n\n  }, {\n    key: \"addTag\",\n    value: function addTag(url, loadCB) {\n      var _this10 = this;\n\n      if (isNodeSdk()) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.doNodeLongPoll(url, loadCB);\n      } else {\n        setTimeout(function () {\n          try {\n            // if we're already closed, don't add this poll\n            if (!_this10.sendNewPolls) {\n              return;\n            }\n\n            var newScript = _this10.myIFrame.doc.createElement('script');\n\n            newScript.type = 'text/javascript';\n            newScript.async = true;\n            newScript.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n            newScript.onload = newScript.onreadystatechange = function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              var rstate = newScript.readyState;\n\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = newScript.onreadystatechange = null;\n\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n\n                loadCB();\n              }\n            };\n\n            newScript.onerror = function () {\n              log('Long-poll script failed to load: ' + url);\n              _this10.sendNewPolls = false;\n\n              _this10.close();\n            };\n\n            _this10.myIFrame.doc.body.appendChild(newScript);\n          } catch (e) {// TODO: we should make this error visible somehow\n          }\n        }, Math.floor(1));\n      }\n    }\n  }], [{\n    key: \"createIFrame_\",\n    value: function createIFrame_() {\n      var iframe = document.createElement('iframe');\n      iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n      if (document.body) {\n        document.body.appendChild(iframe);\n\n        try {\n          // If document.domain has been modified in IE, this will throw an error, and we need to set the\n          // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n          // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n          var a = iframe.contentWindow.document;\n\n          if (!a) {\n            // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n            log('No IE domain setting required');\n          }\n        } catch (e) {\n          var domain = document.domain;\n          iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n        }\n      } else {\n        // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n        // never gets hit.\n        throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n      } // Get the document of the iframe in a browser-specific way.\n\n\n      if (iframe.contentDocument) {\n        iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n      } else if (iframe.contentWindow) {\n        iframe.doc = iframe.contentWindow.document; // Internet Explorer\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } else if (iframe.document) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        iframe.doc = iframe.document; //others?\n      }\n\n      return iframe;\n    }\n  }]);\n\n  return FirebaseIFrameScriptHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\n\n\nvar WebSocketConnection = /*#__PURE__*/function () {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    _classCallCheck(this, WebSocketConnection);\n\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n\n\n  _createClass(WebSocketConnection, [{\n    key: \"open\",\n    value:\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\n    function open(onMessage, onDisconnect) {\n      var _this11 = this;\n\n      this.onDisconnect = onDisconnect;\n      this.onMessage = onMessage;\n      this.log_('Websocket connecting to ' + this.connURL);\n      this.everConnected_ = false; // Assume failure until proven otherwise.\n\n      PersistentStorage.set('previous_websocket_failure', true);\n\n      try {\n        if (isNodeSdk()) {\n          var device = this.nodeAdmin ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n          var options = {\n            headers: {\n              'User-Agent': \"Firebase/\".concat(PROTOCOL_VERSION, \"/\").concat(SDK_VERSION, \"/\").concat(process.platform, \"/\").concat(device),\n              'X-Firebase-GMPID': this.applicationId || ''\n            }\n          }; // If using Node with admin creds, AppCheck-related checks are unnecessary.\n          // Note that we send the credentials here even if they aren't admin credentials, which is\n          // not a problem.\n          // Note that this header is just used to bypass appcheck, and the token should still be sent\n          // through the websocket connection once it is established.\n\n          if (this.authToken) {\n            options.headers['Authorization'] = \"Bearer \".concat(this.authToken);\n          }\n\n          if (this.appCheckToken) {\n            options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n          } // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n\n          var env = process['env'];\n          var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n          if (proxy) {\n            options['proxy'] = {\n              origin: proxy\n            };\n          }\n\n          this.mySock = new WebSocketImpl(this.connURL, [], options);\n        } else {\n          var _options = {\n            headers: {\n              'X-Firebase-GMPID': this.applicationId || '',\n              'X-Firebase-AppCheck': this.appCheckToken || ''\n            }\n          };\n          this.mySock = new WebSocketImpl(this.connURL, [], _options);\n        }\n      } catch (e) {\n        this.log_('Error instantiating WebSocket.');\n\n        var _error = e.message || e.data;\n\n        if (_error) {\n          this.log_(_error);\n        }\n\n        this.onClosed_();\n        return;\n      }\n\n      this.mySock.onopen = function () {\n        _this11.log_('Websocket connected.');\n\n        _this11.everConnected_ = true;\n      };\n\n      this.mySock.onclose = function () {\n        _this11.log_('Websocket connection was disconnected.');\n\n        _this11.mySock = null;\n\n        _this11.onClosed_();\n      };\n\n      this.mySock.onmessage = function (m) {\n        _this11.handleIncomingFrame(m);\n      };\n\n      this.mySock.onerror = function (e) {\n        _this11.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        var error = e.message || e.data;\n\n        if (error) {\n          _this11.log_(error);\n        }\n\n        _this11.onClosed_();\n      };\n    }\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {}\n  }, {\n    key: \"markConnectionHealthy\",\n    value: function markConnectionHealthy() {\n      PersistentStorage.remove('previous_websocket_failure');\n    }\n  }, {\n    key: \"appendFrame_\",\n    value: function appendFrame_(data) {\n      this.frames.push(data);\n\n      if (this.frames.length === this.totalFrames) {\n        var fullMess = this.frames.join('');\n        this.frames = null;\n        var jsonMess = jsonEval(fullMess); //handle the message\n\n        this.onMessage(jsonMess);\n      }\n    }\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\n\n  }, {\n    key: \"handleNewFrameCount_\",\n    value: function handleNewFrameCount_(frameCount) {\n      this.totalFrames = frameCount;\n      this.frames = [];\n    }\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\n\n  }, {\n    key: \"extractFrameCount_\",\n    value: function extractFrameCount_(data) {\n      assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n      // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n      if (data.length <= 6) {\n        var frameCount = Number(data);\n\n        if (!isNaN(frameCount)) {\n          this.handleNewFrameCount_(frameCount);\n          return null;\n        }\n      }\n\n      this.handleNewFrameCount_(1);\n      return data;\n    }\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\n\n  }, {\n    key: \"handleIncomingFrame\",\n    value: function handleIncomingFrame(mess) {\n      if (this.mySock === null) {\n        return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n      }\n\n      var data = mess['data'];\n      this.bytesReceived += data.length;\n      this.stats_.incrementCounter('bytes_received', data.length);\n      this.resetKeepAlive();\n\n      if (this.frames !== null) {\n        // we're buffering\n        this.appendFrame_(data);\n      } else {\n        // try to parse out a frame count, otherwise, assume 1 and process it\n        var remainingData = this.extractFrameCount_(data);\n\n        if (remainingData !== null) {\n          this.appendFrame_(remainingData);\n        }\n      }\n    }\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      this.resetKeepAlive();\n      var dataStr = stringify(data);\n      this.bytesSent += dataStr.length;\n      this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n      //up into multiple pieces if it doesn't fit in one request.\n\n      var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n      if (dataSegs.length > 1) {\n        this.sendString_(String(dataSegs.length));\n      } //Send the actual data in segments.\n\n\n      for (var i = 0; i < dataSegs.length; i++) {\n        this.sendString_(dataSegs[i]);\n      }\n    }\n  }, {\n    key: \"shutdown_\",\n    value: function shutdown_() {\n      this.isClosed_ = true;\n\n      if (this.keepaliveTimer) {\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = null;\n      }\n\n      if (this.mySock) {\n        this.mySock.close();\n        this.mySock = null;\n      }\n    }\n  }, {\n    key: \"onClosed_\",\n    value: function onClosed_() {\n      if (!this.isClosed_) {\n        this.log_('WebSocket is closing itself');\n        this.shutdown_(); // since this is an internal close, trigger the close listener\n\n        if (this.onDisconnect) {\n          this.onDisconnect(this.everConnected_);\n          this.onDisconnect = null;\n        }\n      }\n    }\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.isClosed_) {\n        this.log_('WebSocket is being closed');\n        this.shutdown_();\n      }\n    }\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\n\n  }, {\n    key: \"resetKeepAlive\",\n    value: function resetKeepAlive() {\n      var _this12 = this;\n\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = setInterval(function () {\n        //If there has been no websocket activity for a while, send a no-op\n        if (_this12.mySock) {\n          _this12.sendString_('0');\n        }\n\n        _this12.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    }\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\n\n  }, {\n    key: \"sendString_\",\n    value: function sendString_(str) {\n      // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n      // calls for some unknown reason.  We treat these as an error and disconnect.\n      // See https://app.asana.com/0/58926111402292/68021340250410\n      try {\n        this.mySock.send(str);\n      } catch (e) {\n        this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n        setTimeout(this.onClosed_.bind(this), 0);\n      }\n    }\n  }], [{\n    key: \"connectionURL_\",\n    value: function connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\n      var urlParams = {};\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      if (transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n      }\n\n      if (lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = lastSessionId;\n      }\n\n      if (appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n      }\n\n      return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n    }\n  }, {\n    key: \"forceDisallow\",\n    value: function forceDisallow() {\n      WebSocketConnection.forceDisallow_ = true;\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      var isOldAndroid = false;\n\n      if (typeof navigator !== 'undefined' && navigator.userAgent) {\n        var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n        var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n        if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n          if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n            isOldAndroid = true;\n          }\n        }\n      }\n\n      return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n    }\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\n\n  }, {\n    key: \"previouslyFailed\",\n    value: function previouslyFailed() {\n      // If our persistent storage is actually only in-memory storage,\n      // we default to assuming that it previously failed to be safe.\n      return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n    }\n  }]);\n\n  return WebSocketConnection;\n}();\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\n\n\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\n\nWebSocketConnection.healthyTimeout = 30000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\n\nvar TransportManager = /*#__PURE__*/function () {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    _classCallCheck(this, TransportManager);\n\n    this.initTransports_(repoInfo);\n  }\n\n  _createClass(TransportManager, [{\n    key: \"initTransports_\",\n    value: function initTransports_(repoInfo) {\n      var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n      var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n      if (repoInfo.webSocketOnly) {\n        if (!isWebSocketsAvailable) {\n          warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n        }\n\n        isSkipPollConnection = true;\n      }\n\n      if (isSkipPollConnection) {\n        this.transports_ = [WebSocketConnection];\n      } else {\n        var transports = this.transports_ = [];\n\n        var _iterator = _createForOfIteratorHelper(TransportManager.ALL_TRANSPORTS),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var transport = _step.value;\n\n            if (transport && transport['isAvailable']()) {\n              transports.push(transport);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\n\n  }, {\n    key: \"initialTransport\",\n    value: function initialTransport() {\n      if (this.transports_.length > 0) {\n        return this.transports_[0];\n      } else {\n        throw new Error('No transports available');\n      }\n    }\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\n\n  }, {\n    key: \"upgradeTransport\",\n    value: function upgradeTransport() {\n      if (this.transports_.length > 1) {\n        return this.transports_[1];\n      } else {\n        return null;\n      }\n    }\n  }], [{\n    key: \"ALL_TRANSPORTS\",\n    get: function get() {\n      return [BrowserPollConnection, WebSocketConnection];\n    }\n  }]);\n\n  return TransportManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\n\nvar UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\n\nvar Connection = /*#__PURE__*/function () {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    _classCallCheck(this, Connection);\n\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n\n\n  _createClass(Connection, [{\n    key: \"start_\",\n    value: function start_() {\n      var _this13 = this;\n\n      var conn = this.transportManager_.initialTransport();\n      this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n      // can consider the transport healthy.\n\n      this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n      var onMessageReceived = this.connReceiver_(this.conn_);\n      var onConnectionLost = this.disconnReceiver_(this.conn_);\n      this.tx_ = this.conn_;\n      this.rx_ = this.conn_;\n      this.secondaryConn_ = null;\n      this.isHealthy_ = false;\n      /*\r\n       * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n       * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n       * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n       * still have the context of your originating frame.\r\n       */\n\n      setTimeout(function () {\n        // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n        _this13.conn_ && _this13.conn_.open(onMessageReceived, onConnectionLost);\n      }, Math.floor(0));\n      var healthyTimeoutMS = conn['healthyTimeout'] || 0;\n\n      if (healthyTimeoutMS > 0) {\n        this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n          _this13.healthyTimeout_ = null;\n\n          if (!_this13.isHealthy_) {\n            if (_this13.conn_ && _this13.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n              _this13.log_('Connection exceeded healthy timeout but has received ' + _this13.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n\n              _this13.isHealthy_ = true;\n\n              _this13.conn_.markConnectionHealthy();\n            } else if (_this13.conn_ && _this13.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n              _this13.log_('Connection exceeded healthy timeout but has sent ' + _this13.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n              // the server.\n\n            } else {\n              _this13.log_('Closing unhealthy connection after timeout.');\n\n              _this13.close();\n            }\n          } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        }, Math.floor(healthyTimeoutMS));\n      }\n    }\n  }, {\n    key: \"nextTransportId_\",\n    value: function nextTransportId_() {\n      return 'c:' + this.id + ':' + this.connectionCount++;\n    }\n  }, {\n    key: \"disconnReceiver_\",\n    value: function disconnReceiver_(conn) {\n      var _this14 = this;\n\n      return function (everConnected) {\n        if (conn === _this14.conn_) {\n          _this14.onConnectionLost_(everConnected);\n        } else if (conn === _this14.secondaryConn_) {\n          _this14.log_('Secondary connection lost.');\n\n          _this14.onSecondaryConnectionLost_();\n        } else {\n          _this14.log_('closing an old connection');\n        }\n      };\n    }\n  }, {\n    key: \"connReceiver_\",\n    value: function connReceiver_(conn) {\n      var _this15 = this;\n\n      return function (message) {\n        if (_this15.state_ !== 2\n        /* DISCONNECTED */\n        ) {\n          if (conn === _this15.rx_) {\n            _this15.onPrimaryMessageReceived_(message);\n          } else if (conn === _this15.secondaryConn_) {\n            _this15.onSecondaryMessageReceived_(message);\n          } else {\n            _this15.log_('message on old connection');\n          }\n        }\n      };\n    }\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\n\n  }, {\n    key: \"sendRequest\",\n    value: function sendRequest(dataMsg) {\n      // wrap in a data message envelope and send it on\n      var msg = {\n        t: 'd',\n        d: dataMsg\n      };\n      this.sendData_(msg);\n    }\n  }, {\n    key: \"tryCleanupConnection\",\n    value: function tryCleanupConnection() {\n      if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n        this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n        this.conn_ = this.secondaryConn_;\n        this.secondaryConn_ = null; // the server will shutdown the old connection\n      }\n    }\n  }, {\n    key: \"onSecondaryControl_\",\n    value: function onSecondaryControl_(controlData) {\n      if (MESSAGE_TYPE in controlData) {\n        var cmd = controlData[MESSAGE_TYPE];\n\n        if (cmd === SWITCH_ACK) {\n          this.upgradeIfSecondaryHealthy_();\n        } else if (cmd === CONTROL_RESET) {\n          // Most likely the session wasn't valid. Abandon the switch attempt\n          this.log_('Got a reset on secondary, closing it');\n          this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n          if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n            this.close();\n          }\n        } else if (cmd === CONTROL_PONG) {\n          this.log_('got pong on secondary.');\n          this.secondaryResponsesRequired_--;\n          this.upgradeIfSecondaryHealthy_();\n        }\n      }\n    }\n  }, {\n    key: \"onSecondaryMessageReceived_\",\n    value: function onSecondaryMessageReceived_(parsedData) {\n      var layer = requireKey('t', parsedData);\n      var data = requireKey('d', parsedData);\n\n      if (layer === 'c') {\n        this.onSecondaryControl_(data);\n      } else if (layer === 'd') {\n        // got a data message, but we're still second connection. Need to buffer it up\n        this.pendingDataMessages.push(data);\n      } else {\n        throw new Error('Unknown protocol layer: ' + layer);\n      }\n    }\n  }, {\n    key: \"upgradeIfSecondaryHealthy_\",\n    value: function upgradeIfSecondaryHealthy_() {\n      if (this.secondaryResponsesRequired_ <= 0) {\n        this.log_('Secondary connection is healthy.');\n        this.isHealthy_ = true;\n        this.secondaryConn_.markConnectionHealthy();\n        this.proceedWithUpgrade_();\n      } else {\n        // Send a ping to make sure the connection is healthy.\n        this.log_('sending ping on secondary.');\n        this.secondaryConn_.send({\n          t: 'c',\n          d: {\n            t: PING,\n            d: {}\n          }\n        });\n      }\n    }\n  }, {\n    key: \"proceedWithUpgrade_\",\n    value: function proceedWithUpgrade_() {\n      // tell this connection to consider itself open\n      this.secondaryConn_.start(); // send ack\n\n      this.log_('sending client ack on secondary');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: SWITCH_ACK,\n          d: {}\n        }\n      }); // send end packet on primary transport, switch to sending on this one\n      // can receive on this one, buffer responses until end received on primary transport\n\n      this.log_('Ending transmission on primary');\n      this.conn_.send({\n        t: 'c',\n        d: {\n          t: END_TRANSMISSION,\n          d: {}\n        }\n      });\n      this.tx_ = this.secondaryConn_;\n      this.tryCleanupConnection();\n    }\n  }, {\n    key: \"onPrimaryMessageReceived_\",\n    value: function onPrimaryMessageReceived_(parsedData) {\n      // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n      var layer = requireKey('t', parsedData);\n      var data = requireKey('d', parsedData);\n\n      if (layer === 'c') {\n        this.onControl_(data);\n      } else if (layer === 'd') {\n        this.onDataMessage_(data);\n      }\n    }\n  }, {\n    key: \"onDataMessage_\",\n    value: function onDataMessage_(message) {\n      this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n      this.onMessage_(message);\n    }\n  }, {\n    key: \"onPrimaryResponse_\",\n    value: function onPrimaryResponse_() {\n      if (!this.isHealthy_) {\n        this.primaryResponsesRequired_--;\n\n        if (this.primaryResponsesRequired_ <= 0) {\n          this.log_('Primary connection is healthy.');\n          this.isHealthy_ = true;\n          this.conn_.markConnectionHealthy();\n        }\n      }\n    }\n  }, {\n    key: \"onControl_\",\n    value: function onControl_(controlData) {\n      var cmd = requireKey(MESSAGE_TYPE, controlData);\n\n      if (MESSAGE_DATA in controlData) {\n        var payload = controlData[MESSAGE_DATA];\n\n        if (cmd === SERVER_HELLO) {\n          this.onHandshake_(payload);\n        } else if (cmd === END_TRANSMISSION) {\n          this.log_('recvd end transmission on primary');\n          this.rx_ = this.secondaryConn_;\n\n          for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n            this.onDataMessage_(this.pendingDataMessages[i]);\n          }\n\n          this.pendingDataMessages = [];\n          this.tryCleanupConnection();\n        } else if (cmd === CONTROL_SHUTDOWN) {\n          // This was previously the 'onKill' callback passed to the lower-level connection\n          // payload in this case is the reason for the shutdown. Generally a human-readable error\n          this.onConnectionShutdown_(payload);\n        } else if (cmd === CONTROL_RESET) {\n          // payload in this case is the host we should contact\n          this.onReset_(payload);\n        } else if (cmd === CONTROL_ERROR) {\n          error('Server Error: ' + payload);\n        } else if (cmd === CONTROL_PONG) {\n          this.log_('got pong on primary.');\n          this.onPrimaryResponse_();\n          this.sendPingOnPrimaryIfNecessary_();\n        } else {\n          error('Unknown control packet command: ' + cmd);\n        }\n      }\n    }\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\n\n  }, {\n    key: \"onHandshake_\",\n    value: function onHandshake_(handshake) {\n      var timestamp = handshake.ts;\n      var version = handshake.v;\n      var host = handshake.h;\n      this.sessionId = handshake.s;\n      this.repoInfo_.host = host; // if we've already closed the connection, then don't bother trying to progress further\n\n      if (this.state_ === 0\n      /* CONNECTING */\n      ) {\n        this.conn_.start();\n        this.onConnectionEstablished_(this.conn_, timestamp);\n\n        if (PROTOCOL_VERSION !== version) {\n          warn('Protocol version mismatch detected');\n        } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n        this.tryStartUpgrade_();\n      }\n    }\n  }, {\n    key: \"tryStartUpgrade_\",\n    value: function tryStartUpgrade_() {\n      var conn = this.transportManager_.upgradeTransport();\n\n      if (conn) {\n        this.startUpgrade_(conn);\n      }\n    }\n  }, {\n    key: \"startUpgrade_\",\n    value: function startUpgrade_(conn) {\n      var _this16 = this;\n\n      this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n      // can consider the transport healthy.\n\n      this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n      var onMessage = this.connReceiver_(this.secondaryConn_);\n      var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n      this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n      setTimeoutNonBlocking(function () {\n        if (_this16.secondaryConn_) {\n          _this16.log_('Timed out trying to upgrade.');\n\n          _this16.secondaryConn_.close();\n        }\n      }, Math.floor(UPGRADE_TIMEOUT));\n    }\n  }, {\n    key: \"onReset_\",\n    value: function onReset_(host) {\n      this.log_('Reset packet received.  New host: ' + host);\n      this.repoInfo_.host = host; // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n      // We don't currently support resets after the connection has already been established\n\n      if (this.state_ === 1\n      /* CONNECTED */\n      ) {\n        this.close();\n      } else {\n        // Close whatever connections we have open and start again.\n        this.closeConnections_();\n        this.start_();\n      }\n    }\n  }, {\n    key: \"onConnectionEstablished_\",\n    value: function onConnectionEstablished_(conn, timestamp) {\n      var _this17 = this;\n\n      this.log_('Realtime connection established.');\n      this.conn_ = conn;\n      this.state_ = 1\n      /* CONNECTED */\n      ;\n\n      if (this.onReady_) {\n        this.onReady_(timestamp, this.sessionId);\n        this.onReady_ = null;\n      } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n      // send some pings.\n\n\n      if (this.primaryResponsesRequired_ === 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n      } else {\n        setTimeoutNonBlocking(function () {\n          _this17.sendPingOnPrimaryIfNecessary_();\n        }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n      }\n    }\n  }, {\n    key: \"sendPingOnPrimaryIfNecessary_\",\n    value: function sendPingOnPrimaryIfNecessary_() {\n      // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n      if (!this.isHealthy_ && this.state_ === 1\n      /* CONNECTED */\n      ) {\n        this.log_('sending ping on primary.');\n        this.sendData_({\n          t: 'c',\n          d: {\n            t: PING,\n            d: {}\n          }\n        });\n      }\n    }\n  }, {\n    key: \"onSecondaryConnectionLost_\",\n    value: function onSecondaryConnectionLost_() {\n      var conn = this.secondaryConn_;\n      this.secondaryConn_ = null;\n\n      if (this.tx_ === conn || this.rx_ === conn) {\n        // we are relying on this connection already in some capacity. Therefore, a failure is real\n        this.close();\n      }\n    }\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\n\n  }, {\n    key: \"onConnectionLost_\",\n    value: function onConnectionLost_(everConnected) {\n      this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n      // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n      if (!everConnected && this.state_ === 0\n      /* CONNECTING */\n      ) {\n        this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n        if (this.repoInfo_.isCacheableHost()) {\n          PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n          this.repoInfo_.internalHost = this.repoInfo_.host;\n        }\n      } else if (this.state_ === 1\n      /* CONNECTED */\n      ) {\n        this.log_('Realtime connection lost.');\n      }\n\n      this.close();\n    }\n  }, {\n    key: \"onConnectionShutdown_\",\n    value: function onConnectionShutdown_(reason) {\n      this.log_('Connection shutdown command received. Shutting down...');\n\n      if (this.onKill_) {\n        this.onKill_(reason);\n        this.onKill_ = null;\n      } // We intentionally don't want to fire onDisconnect (kill is a different case),\n      // so clear the callback.\n\n\n      this.onDisconnect_ = null;\n      this.close();\n    }\n  }, {\n    key: \"sendData_\",\n    value: function sendData_(data) {\n      if (this.state_ !== 1\n      /* CONNECTED */\n      ) {\n        throw 'Connection is not connected';\n      } else {\n        this.tx_.send(data);\n      }\n    }\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.state_ !== 2\n      /* DISCONNECTED */\n      ) {\n        this.log_('Closing realtime connection.');\n        this.state_ = 2\n        /* DISCONNECTED */\n        ;\n        this.closeConnections_();\n\n        if (this.onDisconnect_) {\n          this.onDisconnect_();\n          this.onDisconnect_ = null;\n        }\n      }\n    }\n  }, {\n    key: \"closeConnections_\",\n    value: function closeConnections_() {\n      this.log_('Shutting down all connections');\n\n      if (this.conn_) {\n        this.conn_.close();\n        this.conn_ = null;\n      }\n\n      if (this.secondaryConn_) {\n        this.secondaryConn_.close();\n        this.secondaryConn_ = null;\n      }\n\n      if (this.healthyTimeout_) {\n        clearTimeout(this.healthyTimeout_);\n        this.healthyTimeout_ = null;\n      }\n    }\n  }]);\n\n  return Connection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nvar ServerActions = /*#__PURE__*/function () {\n  function ServerActions() {\n    _classCallCheck(this, ServerActions);\n  }\n\n  _createClass(ServerActions, [{\n    key: \"put\",\n    value: function put(pathString, data, onComplete, hash) {}\n  }, {\n    key: \"merge\",\n    value: function merge(pathString, data, onComplete, hash) {}\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\n\n  }, {\n    key: \"refreshAuthToken\",\n    value: function refreshAuthToken(token) {}\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\n\n  }, {\n    key: \"refreshAppCheckToken\",\n    value: function refreshAppCheckToken(token) {}\n  }, {\n    key: \"onDisconnectPut\",\n    value: function onDisconnectPut(pathString, data, onComplete) {}\n  }, {\n    key: \"onDisconnectMerge\",\n    value: function onDisconnectMerge(pathString, data, onComplete) {}\n  }, {\n    key: \"onDisconnectCancel\",\n    value: function onDisconnectCancel(pathString, onComplete) {}\n  }, {\n    key: \"reportStats\",\n    value: function reportStats(stats) {}\n  }]);\n\n  return ServerActions;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nvar EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter(allowedEvents_) {\n    _classCallCheck(this, EventEmitter);\n\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n\n\n  _createClass(EventEmitter, [{\n    key: \"trigger\",\n    value: function trigger(eventType) {\n      if (Array.isArray(this.listeners_[eventType])) {\n        // Clone the list, since callbacks could add/remove listeners.\n        var listeners = _toConsumableArray(this.listeners_[eventType]);\n\n        for (var _len5 = arguments.length, varArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n          varArgs[_key6 - 1] = arguments[_key6];\n        }\n\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i].callback.apply(listeners[i].context, varArgs);\n        }\n      }\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventType, callback, context) {\n      this.validateEventType_(eventType);\n      this.listeners_[eventType] = this.listeners_[eventType] || [];\n      this.listeners_[eventType].push({\n        callback: callback,\n        context: context\n      });\n      var eventData = this.getInitialEvent(eventType);\n\n      if (eventData) {\n        callback.apply(context, eventData);\n      }\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventType, callback, context) {\n      this.validateEventType_(eventType);\n      var listeners = this.listeners_[eventType] || [];\n\n      for (var i = 0; i < listeners.length; i++) {\n        if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n          listeners.splice(i, 1);\n          return;\n        }\n      }\n    }\n  }, {\n    key: \"validateEventType_\",\n    value: function validateEventType_(eventType) {\n      assert(this.allowedEvents_.find(function (et) {\n        return et === eventType;\n      }), 'Unknown event: ' + eventType);\n    }\n  }]);\n\n  return EventEmitter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\n\n\nvar OnlineMonitor = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(OnlineMonitor, _EventEmitter);\n\n  var _super = _createSuper(OnlineMonitor);\n\n  function OnlineMonitor() {\n    var _this18;\n\n    _classCallCheck(this, OnlineMonitor);\n\n    _this18 = _super.call(this, ['online']);\n    _this18.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this18.online_) {\n          _this18.online_ = true;\n\n          _this18.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this18.online_) {\n          _this18.online_ = false;\n\n          _this18.trigger('online', false);\n        }\n      }, false);\n    }\n\n    return _this18;\n  }\n\n  _createClass(OnlineMonitor, [{\n    key: \"getInitialEvent\",\n    value: function getInitialEvent(eventType) {\n      assert(eventType === 'online', 'Unknown event type: ' + eventType);\n      return [this.online_];\n    }\n  }, {\n    key: \"currentlyOnline\",\n    value: function currentlyOnline() {\n      return this.online_;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      return new OnlineMonitor();\n    }\n  }]);\n\n  return OnlineMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Maximum key depth. */\n\n\nvar MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\n\nvar MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\nvar Path = /*#__PURE__*/function () {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  function Path(pathOrString, pieceNum) {\n    _classCallCheck(this, Path);\n\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      var copyTo = 0;\n\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  _createClass(Path, [{\n    key: \"toString\",\n    value: function toString() {\n      var pathString = '';\n\n      for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n        if (this.pieces_[i] !== '') {\n          pathString += '/' + this.pieces_[i];\n        }\n      }\n\n      return pathString || '/';\n    }\n  }]);\n\n  return Path;\n}();\n\nfunction newEmptyPath() {\n  return new Path('');\n}\n\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\n\n\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nfunction pathPopFront(path) {\n  var pieceNum = path.pieceNum_;\n\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n\n  return new Path(path.pieces_, pieceNum);\n}\n\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nfunction pathToUrlEncodedString(path) {\n  var pathString = '';\n\n  for (var i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\n\n\nfunction pathSlice(path) {\n  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  var pieces = [];\n\n  for (var i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nfunction pathChild(path, childPathObj) {\n  var pieces = [];\n\n  for (var i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (var _i = childPathObj.pieceNum_; _i < childPathObj.pieces_.length; _i++) {\n      pieces.push(childPathObj.pieces_[_i]);\n    }\n  } else {\n    var childPieces = childPathObj.split('/');\n\n    for (var _i2 = 0; _i2 < childPieces.length; _i2++) {\n      if (childPieces[_i2].length > 0) {\n        pieces.push(childPieces[_i2]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\n\n\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\n\n\nfunction newRelativePath(outerPath, innerPath) {\n  var outer = pathGetFront(outerPath),\n      inner = pathGetFront(innerPath);\n\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\n\n\nfunction pathCompare(left, right) {\n  var leftKeys = pathSlice(left, 0);\n  var rightKeys = pathSlice(right, 0);\n\n  for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\n\n\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (var i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\n\n\nfunction pathContains(path, other) {\n  var i = path.pieceNum_;\n  var j = other.pieceNum_;\n\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n\n    ++i;\n    ++j;\n  }\n\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nvar ValidationPath = /*#__PURE__*/_createClass(\n/**\r\n * @param path - Initial Path.\r\n * @param errorPrefix_ - Prefix for any error messages.\r\n */\nfunction ValidationPath(path, errorPrefix_) {\n  _classCallCheck(this, ValidationPath);\n\n  this.errorPrefix_ = errorPrefix_;\n  this.parts_ = pathSlice(path, 0);\n  /** Initialize to number of '/' chars needed in path. */\n\n  this.byteLength_ = Math.max(1, this.parts_.length);\n\n  for (var i = 0; i < this.parts_.length; i++) {\n    this.byteLength_ += stringLength(this.parts_[i]);\n  }\n\n  validationPathCheckValid(this);\n});\n\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nfunction validationPathPop(validationPath) {\n  var last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last); // Un-count the previous '/'\n\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\n\n\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VisibilityMonitor = /*#__PURE__*/function (_EventEmitter2) {\n  _inherits(VisibilityMonitor, _EventEmitter2);\n\n  var _super2 = _createSuper(VisibilityMonitor);\n\n  function VisibilityMonitor() {\n    var _this19;\n\n    _classCallCheck(this, VisibilityMonitor);\n\n    _this19 = _super2.call(this, ['visible']);\n    var hidden;\n    var visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    _this19.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n\n        if (visible !== _this19.visible_) {\n          _this19.visible_ = visible;\n\n          _this19.trigger('visible', visible);\n        }\n      }, false);\n    }\n\n    return _this19;\n  }\n\n  _createClass(VisibilityMonitor, [{\n    key: \"getInitialEvent\",\n    value: function getInitialEvent(eventType) {\n      assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n      return [this.visible_];\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      return new VisibilityMonitor();\n    }\n  }]);\n\n  return VisibilityMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nvar GET_CONNECT_TIMEOUT = 3 * 1000;\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nvar INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nvar PersistentConnection = /*#__PURE__*/function (_ServerActions) {\n  _inherits(PersistentConnection, _ServerActions);\n\n  var _super3 = _createSuper(PersistentConnection);\n\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    var _this20;\n\n    _classCallCheck(this, PersistentConnection);\n\n    _this20 = _super3.call(this);\n    _this20.repoInfo_ = repoInfo_;\n    _this20.applicationId_ = applicationId_;\n    _this20.onDataUpdate_ = onDataUpdate_;\n    _this20.onConnectStatus_ = onConnectStatus_;\n    _this20.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this20.authTokenProvider_ = authTokenProvider_;\n    _this20.appCheckTokenProvider_ = appCheckTokenProvider_;\n    _this20.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    _this20.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this20.log_ = logWrapper('p:' + _this20.id + ':');\n    _this20.interruptReasons_ = {};\n    _this20.listens = new Map();\n    _this20.outstandingPuts_ = [];\n    _this20.outstandingGets_ = [];\n    _this20.outstandingPutCount_ = 0;\n    _this20.outstandingGetCount_ = 0;\n    _this20.onDisconnectRequestQueue_ = [];\n    _this20.connected_ = false;\n    _this20.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this20.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this20.securityDebugCallback_ = null;\n    _this20.lastSessionId = null;\n    _this20.establishConnectionTimer_ = null;\n    _this20.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    _this20.requestCBHash_ = {};\n    _this20.requestNumber_ = 0;\n    _this20.realtime_ = null;\n    _this20.authToken_ = null;\n    _this20.appCheckToken_ = null;\n    _this20.forceTokenRefresh_ = false;\n    _this20.invalidAuthTokenCount_ = 0;\n    _this20.invalidAppCheckTokenCount_ = 0;\n    _this20.firstConnection_ = true;\n    _this20.lastConnectionAttemptTime_ = null;\n    _this20.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    VisibilityMonitor.getInstance().on('visible', _this20.onVisible_, _assertThisInitialized(_this20));\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this20.onOnline_, _assertThisInitialized(_this20));\n    }\n\n    return _this20;\n  }\n\n  _createClass(PersistentConnection, [{\n    key: \"sendRequest\",\n    value: function sendRequest(action, body, onResponse) {\n      var curReqNum = ++this.requestNumber_;\n      var msg = {\n        r: curReqNum,\n        a: action,\n        b: body\n      };\n      this.log_(stringify(msg));\n      assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n      this.realtime_.sendRequest(msg);\n\n      if (onResponse) {\n        this.requestCBHash_[curReqNum] = onResponse;\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get(query) {\n      var _this21 = this;\n\n      this.initConnection_();\n      var deferred = new Deferred();\n      var request = {\n        p: query._path.toString(),\n        q: query._queryObject\n      };\n      var outstandingGet = {\n        action: 'g',\n        request: request,\n        onComplete: function onComplete(message) {\n          var payload = message['d'];\n\n          if (message['s'] === 'ok') {\n            _this21.onDataUpdate_(request['p'], payload,\n            /*isMerge*/\n            false,\n            /*tag*/\n            null);\n\n            deferred.resolve(payload);\n          } else {\n            deferred.reject(payload);\n          }\n        }\n      };\n      this.outstandingGets_.push(outstandingGet);\n      this.outstandingGetCount_++;\n      var index = this.outstandingGets_.length - 1;\n\n      if (!this.connected_) {\n        setTimeout(function () {\n          var get = _this21.outstandingGets_[index];\n\n          if (get === undefined || outstandingGet !== get) {\n            return;\n          }\n\n          delete _this21.outstandingGets_[index];\n          _this21.outstandingGetCount_--;\n\n          if (_this21.outstandingGetCount_ === 0) {\n            _this21.outstandingGets_ = [];\n          }\n\n          _this21.log_('get ' + index + ' timed out on connection');\n\n          deferred.reject(new Error('Client is offline.'));\n        }, GET_CONNECT_TIMEOUT);\n      }\n\n      if (this.connected_) {\n        this.sendGet_(index);\n      }\n\n      return deferred.promise;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(query, currentHashFn, tag, onComplete) {\n      this.initConnection_();\n      var queryId = query._queryIdentifier;\n\n      var pathString = query._path.toString();\n\n      this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n      if (!this.listens.has(pathString)) {\n        this.listens.set(pathString, new Map());\n      }\n\n      assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n      assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n      var listenSpec = {\n        onComplete: onComplete,\n        hashFn: currentHashFn,\n        query: query,\n        tag: tag\n      };\n      this.listens.get(pathString).set(queryId, listenSpec);\n\n      if (this.connected_) {\n        this.sendListen_(listenSpec);\n      }\n    }\n  }, {\n    key: \"sendGet_\",\n    value: function sendGet_(index) {\n      var _this22 = this;\n\n      var get = this.outstandingGets_[index];\n      this.sendRequest('g', get.request, function (message) {\n        delete _this22.outstandingGets_[index];\n        _this22.outstandingGetCount_--;\n\n        if (_this22.outstandingGetCount_ === 0) {\n          _this22.outstandingGets_ = [];\n        }\n\n        if (get.onComplete) {\n          get.onComplete(message);\n        }\n      });\n    }\n  }, {\n    key: \"sendListen_\",\n    value: function sendListen_(listenSpec) {\n      var _this23 = this;\n\n      var query = listenSpec.query;\n\n      var pathString = query._path.toString();\n\n      var queryId = query._queryIdentifier;\n      this.log_('Listen on ' + pathString + ' for ' + queryId);\n      var req = {\n        /*path*/\n        p: pathString\n      };\n      var action = 'q'; // Only bother to send query if it's non-default.\n\n      if (listenSpec.tag) {\n        req['q'] = query._queryObject;\n        req['t'] = listenSpec.tag;\n      }\n\n      req[\n      /*hash*/\n      'h'] = listenSpec.hashFn();\n      this.sendRequest(action, req, function (message) {\n        var payload = message[\n        /*data*/\n        'd'];\n        var status = message[\n        /*status*/\n        's']; // print warnings in any case...\n\n        PersistentConnection.warnOnListenWarnings_(payload, query);\n\n        var currentListenSpec = _this23.listens.get(pathString) && _this23.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n\n        if (currentListenSpec === listenSpec) {\n          _this23.log_('listen response', message);\n\n          if (status !== 'ok') {\n            _this23.removeListen_(pathString, queryId);\n          }\n\n          if (listenSpec.onComplete) {\n            listenSpec.onComplete(status, payload);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"refreshAuthToken\",\n    value: function refreshAuthToken(token) {\n      this.authToken_ = token;\n      this.log_('Auth token refreshed');\n\n      if (this.authToken_) {\n        this.tryAuth();\n      } else {\n        //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n        //the credential so we dont become authenticated next time we connect.\n        if (this.connected_) {\n          this.sendRequest('unauth', {}, function () {});\n        }\n      }\n\n      this.reduceReconnectDelayIfAdminCredential_(token);\n    }\n  }, {\n    key: \"reduceReconnectDelayIfAdminCredential_\",\n    value: function reduceReconnectDelayIfAdminCredential_(credential) {\n      // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n      // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n      var isFirebaseSecret = credential && credential.length === 40;\n\n      if (isFirebaseSecret || isAdmin(credential)) {\n        this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n      }\n    }\n  }, {\n    key: \"refreshAppCheckToken\",\n    value: function refreshAppCheckToken(token) {\n      this.appCheckToken_ = token;\n      this.log_('App check token refreshed');\n\n      if (this.appCheckToken_) {\n        this.tryAppCheck();\n      } else {\n        //If we're connected we want to let the server know to unauthenticate us.\n        //If we're not connected, simply delete the credential so we dont become\n        // authenticated next time we connect.\n        if (this.connected_) {\n          this.sendRequest('unappeck', {}, function () {});\n        }\n      }\n    }\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\n\n  }, {\n    key: \"tryAuth\",\n    value: function tryAuth() {\n      var _this24 = this;\n\n      if (this.connected_ && this.authToken_) {\n        var token = this.authToken_;\n        var authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n        var requestData = {\n          cred: token\n        };\n\n        if (this.authOverride_ === null) {\n          requestData['noauth'] = true;\n        } else if (typeof this.authOverride_ === 'object') {\n          requestData['authvar'] = this.authOverride_;\n        }\n\n        this.sendRequest(authMethod, requestData, function (res) {\n          var status = res[\n          /*status*/\n          's'];\n          var data = res[\n          /*data*/\n          'd'] || 'error';\n\n          if (_this24.authToken_ === token) {\n            if (status === 'ok') {\n              _this24.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              _this24.onAuthRevoked_(status, data);\n            }\n          }\n        });\n      }\n    }\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\n\n  }, {\n    key: \"tryAppCheck\",\n    value: function tryAppCheck() {\n      var _this25 = this;\n\n      if (this.connected_ && this.appCheckToken_) {\n        this.sendRequest('appcheck', {\n          'token': this.appCheckToken_\n        }, function (res) {\n          var status = res[\n          /*status*/\n          's'];\n          var data = res[\n          /*data*/\n          'd'] || 'error';\n\n          if (status === 'ok') {\n            _this25.invalidAppCheckTokenCount_ = 0;\n          } else {\n            _this25.onAppCheckRevoked_(status, data);\n          }\n        });\n      }\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n\n  }, {\n    key: \"unlisten\",\n    value: function unlisten(query, tag) {\n      var pathString = query._path.toString();\n\n      var queryId = query._queryIdentifier;\n      this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n      assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n      var listen = this.removeListen_(pathString, queryId);\n\n      if (listen && this.connected_) {\n        this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n      }\n    }\n  }, {\n    key: \"sendUnlisten_\",\n    value: function sendUnlisten_(pathString, queryId, queryObj, tag) {\n      this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n      var req = {\n        /*path*/\n        p: pathString\n      };\n      var action = 'n'; // Only bother sending queryId if it's non-default.\n\n      if (tag) {\n        req['q'] = queryObj;\n        req['t'] = tag;\n      }\n\n      this.sendRequest(action, req);\n    }\n  }, {\n    key: \"onDisconnectPut\",\n    value: function onDisconnectPut(pathString, data, onComplete) {\n      this.initConnection_();\n\n      if (this.connected_) {\n        this.sendOnDisconnect_('o', pathString, data, onComplete);\n      } else {\n        this.onDisconnectRequestQueue_.push({\n          pathString: pathString,\n          action: 'o',\n          data: data,\n          onComplete: onComplete\n        });\n      }\n    }\n  }, {\n    key: \"onDisconnectMerge\",\n    value: function onDisconnectMerge(pathString, data, onComplete) {\n      this.initConnection_();\n\n      if (this.connected_) {\n        this.sendOnDisconnect_('om', pathString, data, onComplete);\n      } else {\n        this.onDisconnectRequestQueue_.push({\n          pathString: pathString,\n          action: 'om',\n          data: data,\n          onComplete: onComplete\n        });\n      }\n    }\n  }, {\n    key: \"onDisconnectCancel\",\n    value: function onDisconnectCancel(pathString, onComplete) {\n      this.initConnection_();\n\n      if (this.connected_) {\n        this.sendOnDisconnect_('oc', pathString, null, onComplete);\n      } else {\n        this.onDisconnectRequestQueue_.push({\n          pathString: pathString,\n          action: 'oc',\n          data: null,\n          onComplete: onComplete\n        });\n      }\n    }\n  }, {\n    key: \"sendOnDisconnect_\",\n    value: function sendOnDisconnect_(action, pathString, data, onComplete) {\n      var request = {\n        /*path*/\n        p: pathString,\n\n        /*data*/\n        d: data\n      };\n      this.log_('onDisconnect ' + action, request);\n      this.sendRequest(action, request, function (response) {\n        if (onComplete) {\n          setTimeout(function () {\n            onComplete(response[\n            /*status*/\n            's'], response[\n            /* data */\n            'd']);\n          }, Math.floor(0));\n        }\n      });\n    }\n  }, {\n    key: \"put\",\n    value: function put(pathString, data, onComplete, hash) {\n      this.putInternal('p', pathString, data, onComplete, hash);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(pathString, data, onComplete, hash) {\n      this.putInternal('m', pathString, data, onComplete, hash);\n    }\n  }, {\n    key: \"putInternal\",\n    value: function putInternal(action, pathString, data, onComplete, hash) {\n      this.initConnection_();\n      var request = {\n        /*path*/\n        p: pathString,\n\n        /*data*/\n        d: data\n      };\n\n      if (hash !== undefined) {\n        request[\n        /*hash*/\n        'h'] = hash;\n      } // TODO: Only keep track of the most recent put for a given path?\n\n\n      this.outstandingPuts_.push({\n        action: action,\n        request: request,\n        onComplete: onComplete\n      });\n      this.outstandingPutCount_++;\n      var index = this.outstandingPuts_.length - 1;\n\n      if (this.connected_) {\n        this.sendPut_(index);\n      } else {\n        this.log_('Buffering put: ' + pathString);\n      }\n    }\n  }, {\n    key: \"sendPut_\",\n    value: function sendPut_(index) {\n      var _this26 = this;\n\n      var action = this.outstandingPuts_[index].action;\n      var request = this.outstandingPuts_[index].request;\n      var onComplete = this.outstandingPuts_[index].onComplete;\n      this.outstandingPuts_[index].queued = this.connected_;\n      this.sendRequest(action, request, function (message) {\n        _this26.log_(action + ' response', message);\n\n        delete _this26.outstandingPuts_[index];\n        _this26.outstandingPutCount_--; // Clean up array occasionally.\n\n        if (_this26.outstandingPutCount_ === 0) {\n          _this26.outstandingPuts_ = [];\n        }\n\n        if (onComplete) {\n          onComplete(message[\n          /*status*/\n          's'], message[\n          /* data */\n          'd']);\n        }\n      });\n    }\n  }, {\n    key: \"reportStats\",\n    value: function reportStats(stats) {\n      var _this27 = this;\n\n      // If we're not connected, we just drop the stats.\n      if (this.connected_) {\n        var request = {\n          /*counters*/\n          c: stats\n        };\n        this.log_('reportStats', request);\n        this.sendRequest(\n        /*stats*/\n        's', request, function (result) {\n          var status = result[\n          /*status*/\n          's'];\n\n          if (status !== 'ok') {\n            var errorReason = result[\n            /* data */\n            'd'];\n\n            _this27.log_('reportStats', 'Error sending stats: ' + errorReason);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"onDataMessage_\",\n    value: function onDataMessage_(message) {\n      if ('r' in message) {\n        // this is a response\n        this.log_('from server: ' + stringify(message));\n        var reqNum = message['r'];\n        var onResponse = this.requestCBHash_[reqNum];\n\n        if (onResponse) {\n          delete this.requestCBHash_[reqNum];\n          onResponse(message[\n          /*body*/\n          'b']);\n        }\n      } else if ('error' in message) {\n        throw 'A server-side error has occurred: ' + message['error'];\n      } else if ('a' in message) {\n        // a and b are action and body, respectively\n        this.onDataPush_(message['a'], message['b']);\n      }\n    }\n  }, {\n    key: \"onDataPush_\",\n    value: function onDataPush_(action, body) {\n      this.log_('handleServerMessage', action, body);\n\n      if (action === 'd') {\n        this.onDataUpdate_(body[\n        /*path*/\n        'p'], body[\n        /*data*/\n        'd'],\n        /*isMerge*/\n        false, body['t']);\n      } else if (action === 'm') {\n        this.onDataUpdate_(body[\n        /*path*/\n        'p'], body[\n        /*data*/\n        'd'],\n        /*isMerge=*/\n        true, body['t']);\n      } else if (action === 'c') {\n        this.onListenRevoked_(body[\n        /*path*/\n        'p'], body[\n        /*query*/\n        'q']);\n      } else if (action === 'ac') {\n        this.onAuthRevoked_(body[\n        /*status code*/\n        's'], body[\n        /* explanation */\n        'd']);\n      } else if (action === 'apc') {\n        this.onAppCheckRevoked_(body[\n        /*status code*/\n        's'], body[\n        /* explanation */\n        'd']);\n      } else if (action === 'sd') {\n        this.onSecurityDebugPacket_(body);\n      } else {\n        error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n      }\n    }\n  }, {\n    key: \"onReady_\",\n    value: function onReady_(timestamp, sessionId) {\n      this.log_('connection ready');\n      this.connected_ = true;\n      this.lastConnectionEstablishedTime_ = new Date().getTime();\n      this.handleTimestamp_(timestamp);\n      this.lastSessionId = sessionId;\n\n      if (this.firstConnection_) {\n        this.sendConnectStats_();\n      }\n\n      this.restoreState_();\n      this.firstConnection_ = false;\n      this.onConnectStatus_(true);\n    }\n  }, {\n    key: \"scheduleConnect_\",\n    value: function scheduleConnect_(timeout) {\n      var _this28 = this;\n\n      assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n      } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n      // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n      this.establishConnectionTimer_ = setTimeout(function () {\n        _this28.establishConnectionTimer_ = null;\n\n        _this28.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(timeout));\n    }\n  }, {\n    key: \"initConnection_\",\n    value: function initConnection_() {\n      if (!this.realtime_ && this.firstConnection_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }, {\n    key: \"onVisible_\",\n    value: function onVisible_(visible) {\n      // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n      if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n        this.log_('Window became visible.  Reducing delay.');\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n        if (!this.realtime_) {\n          this.scheduleConnect_(0);\n        }\n      }\n\n      this.visible_ = visible;\n    }\n  }, {\n    key: \"onOnline_\",\n    value: function onOnline_(online) {\n      if (online) {\n        this.log_('Browser went online.');\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n        if (!this.realtime_) {\n          this.scheduleConnect_(0);\n        }\n      } else {\n        this.log_('Browser went offline.  Killing connection.');\n\n        if (this.realtime_) {\n          this.realtime_.close();\n        }\n      }\n    }\n  }, {\n    key: \"onRealtimeDisconnect_\",\n    value: function onRealtimeDisconnect_() {\n      this.log_('data client disconnected');\n      this.connected_ = false;\n      this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n      this.cancelSentTransactions_(); // Clear out the pending requests.\n\n      this.requestCBHash_ = {};\n\n      if (this.shouldReconnect_()) {\n        if (!this.visible_) {\n          this.log_(\"Window isn't visible.  Delaying reconnect.\");\n          this.reconnectDelay_ = this.maxReconnectDelay_;\n          this.lastConnectionAttemptTime_ = new Date().getTime();\n        } else if (this.lastConnectionEstablishedTime_) {\n          // If we've been connected long enough, reset reconnect delay to minimum.\n          var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n\n          if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n          }\n\n          this.lastConnectionEstablishedTime_ = null;\n        }\n\n        var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n        var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n        reconnectDelay = Math.random() * reconnectDelay;\n        this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n        this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n        this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n      }\n\n      this.onConnectStatus_(false);\n    }\n  }, {\n    key: \"establishConnection_\",\n    value: function () {\n      var _establishConnection_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this29 = this;\n\n        var onDataMessage, onReady, _onDisconnect, connId, lastSessionId, canceled, connection, closeFn, sendRequestFn, forceRefresh, _yield$Promise$all, _yield$Promise$all2, authToken, appCheckToken;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.shouldReconnect_()) {\n                  _context.next = 30;\n                  break;\n                }\n\n                this.log_('Making a connection attempt');\n                this.lastConnectionAttemptTime_ = new Date().getTime();\n                this.lastConnectionEstablishedTime_ = null;\n                onDataMessage = this.onDataMessage_.bind(this);\n                onReady = this.onReady_.bind(this);\n                _onDisconnect = this.onRealtimeDisconnect_.bind(this);\n                connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n                lastSessionId = this.lastSessionId;\n                canceled = false;\n                connection = null;\n\n                closeFn = function closeFn() {\n                  if (connection) {\n                    connection.close();\n                  } else {\n                    canceled = true;\n\n                    _onDisconnect();\n                  }\n                };\n\n                sendRequestFn = function sendRequestFn(msg) {\n                  assert(connection, \"sendRequest call when we're not connected not allowed.\");\n                  connection.sendRequest(msg);\n                };\n\n                this.realtime_ = {\n                  close: closeFn,\n                  sendRequest: sendRequestFn\n                };\n                forceRefresh = this.forceTokenRefresh_;\n                this.forceTokenRefresh_ = false;\n                _context.prev = 16;\n                _context.next = 19;\n                return Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n\n              case 19:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                authToken = _yield$Promise$all2[0];\n                appCheckToken = _yield$Promise$all2[1];\n\n                if (!canceled) {\n                  log('getToken() completed. Creating connection.');\n                  this.authToken_ = authToken && authToken.accessToken;\n                  this.appCheckToken_ = appCheckToken && appCheckToken.token;\n                  connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, _onDisconnect,\n                  /* onKill= */\n                  function (reason) {\n                    warn(reason + ' (' + _this29.repoInfo_.toString() + ')');\n\n                    _this29.interrupt(SERVER_KILL_INTERRUPT_REASON);\n                  }, lastSessionId);\n                } else {\n                  log('getToken() completed but was canceled');\n                }\n\n                _context.next = 30;\n                break;\n\n              case 26:\n                _context.prev = 26;\n                _context.t0 = _context[\"catch\"](16);\n                this.log_('Failed to get token: ' + _context.t0);\n\n                if (!canceled) {\n                  if (this.repoInfo_.nodeAdmin) {\n                    // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                    // But getToken() may also just have temporarily failed, so we still want to\n                    // continue retrying.\n                    warn(_context.t0);\n                  }\n\n                  closeFn();\n                }\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[16, 26]]);\n      }));\n\n      function establishConnection_() {\n        return _establishConnection_.apply(this, arguments);\n      }\n\n      return establishConnection_;\n    }()\n  }, {\n    key: \"interrupt\",\n    value: function interrupt(reason) {\n      log('Interrupting connection for reason: ' + reason);\n      this.interruptReasons_[reason] = true;\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      } else {\n        if (this.establishConnectionTimer_) {\n          clearTimeout(this.establishConnectionTimer_);\n          this.establishConnectionTimer_ = null;\n        }\n\n        if (this.connected_) {\n          this.onRealtimeDisconnect_();\n        }\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume(reason) {\n      log('Resuming connection for reason: ' + reason);\n      delete this.interruptReasons_[reason];\n\n      if (isEmpty(this.interruptReasons_)) {\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n        if (!this.realtime_) {\n          this.scheduleConnect_(0);\n        }\n      }\n    }\n  }, {\n    key: \"handleTimestamp_\",\n    value: function handleTimestamp_(timestamp) {\n      var delta = timestamp - new Date().getTime();\n      this.onServerInfoUpdate_({\n        serverTimeOffset: delta\n      });\n    }\n  }, {\n    key: \"cancelSentTransactions_\",\n    value: function cancelSentTransactions_() {\n      for (var i = 0; i < this.outstandingPuts_.length; i++) {\n        var put = this.outstandingPuts_[i];\n\n        if (put &&\n        /*hash*/\n        'h' in put.request && put.queued) {\n          if (put.onComplete) {\n            put.onComplete('disconnect');\n          }\n\n          delete this.outstandingPuts_[i];\n          this.outstandingPutCount_--;\n        }\n      } // Clean up array occasionally.\n\n\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n    }\n  }, {\n    key: \"onListenRevoked_\",\n    value: function onListenRevoked_(pathString, query) {\n      // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n      var queryId;\n\n      if (!query) {\n        queryId = 'default';\n      } else {\n        queryId = query.map(function (q) {\n          return ObjectToUniqueKey(q);\n        }).join('$');\n      }\n\n      var listen = this.removeListen_(pathString, queryId);\n\n      if (listen && listen.onComplete) {\n        listen.onComplete('permission_denied');\n      }\n    }\n  }, {\n    key: \"removeListen_\",\n    value: function removeListen_(pathString, queryId) {\n      var normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n      var listen;\n\n      if (this.listens.has(normalizedPathString)) {\n        var _map = this.listens.get(normalizedPathString);\n\n        listen = _map.get(queryId);\n\n        _map.delete(queryId);\n\n        if (_map.size === 0) {\n          this.listens.delete(normalizedPathString);\n        }\n      } else {\n        // all listens for this path has already been removed\n        listen = undefined;\n      }\n\n      return listen;\n    }\n  }, {\n    key: \"onAuthRevoked_\",\n    value: function onAuthRevoked_(statusCode, explanation) {\n      log('Auth token revoked: ' + statusCode + '/' + explanation);\n      this.authToken_ = null;\n      this.forceTokenRefresh_ = true;\n      this.realtime_.close();\n\n      if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n        // We'll wait a couple times before logging the warning / increasing the\n        // retry period since oauth tokens will report as \"invalid\" if they're\n        // just expired. Plus there may be transient issues that resolve themselves.\n        this.invalidAuthTokenCount_++;\n\n        if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n          // Set a long reconnect delay because recovery is unlikely\n          this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n          // a warning\n\n          this.authTokenProvider_.notifyForInvalidToken();\n        }\n      }\n    }\n  }, {\n    key: \"onAppCheckRevoked_\",\n    value: function onAppCheckRevoked_(statusCode, explanation) {\n      log('App check token revoked: ' + statusCode + '/' + explanation);\n      this.appCheckToken_ = null;\n      this.forceTokenRefresh_ = true; // Note: We don't close the connection as the developer may not have\n      // enforcement enabled. The backend closes connections with enforcements.\n\n      if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n        // We'll wait a couple times before logging the warning / increasing the\n        // retry period since oauth tokens will report as \"invalid\" if they're\n        // just expired. Plus there may be transient issues that resolve themselves.\n        this.invalidAppCheckTokenCount_++;\n\n        if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n          this.appCheckTokenProvider_.notifyForInvalidToken();\n        }\n      }\n    }\n  }, {\n    key: \"onSecurityDebugPacket_\",\n    value: function onSecurityDebugPacket_(body) {\n      if (this.securityDebugCallback_) {\n        this.securityDebugCallback_(body);\n      } else {\n        if ('msg' in body) {\n          console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n        }\n      }\n    }\n  }, {\n    key: \"restoreState_\",\n    value: function restoreState_() {\n      //Re-authenticate ourselves if we have a credential stored.\n      this.tryAuth();\n      this.tryAppCheck(); // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n\n      var _iterator2 = _createForOfIteratorHelper(this.listens.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var queries = _step2.value;\n\n          var _iterator3 = _createForOfIteratorHelper(queries.values()),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var listenSpec = _step3.value;\n              this.sendListen_(listenSpec);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      for (var i = 0; i < this.outstandingPuts_.length; i++) {\n        if (this.outstandingPuts_[i]) {\n          this.sendPut_(i);\n        }\n      }\n\n      while (this.onDisconnectRequestQueue_.length) {\n        var request = this.onDisconnectRequestQueue_.shift();\n        this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n      }\n\n      for (var _i3 = 0; _i3 < this.outstandingGets_.length; _i3++) {\n        if (this.outstandingGets_[_i3]) {\n          this.sendGet_(_i3);\n        }\n      }\n    }\n    /**\r\n     * Sends client stats for first connection\r\n     */\n\n  }, {\n    key: \"sendConnectStats_\",\n    value: function sendConnectStats_() {\n      var stats = {};\n      var clientName = 'js';\n\n      if (isNodeSdk()) {\n        if (this.repoInfo_.nodeAdmin) {\n          clientName = 'admin_node';\n        } else {\n          clientName = 'node';\n        }\n      }\n\n      stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n      if (isMobileCordova()) {\n        stats['framework.cordova'] = 1;\n      } else if (isReactNative()) {\n        stats['framework.reactnative'] = 1;\n      }\n\n      this.reportStats(stats);\n    }\n  }, {\n    key: \"shouldReconnect_\",\n    value: function shouldReconnect_() {\n      var online = OnlineMonitor.getInstance().currentlyOnline();\n      return isEmpty(this.interruptReasons_) && online;\n    }\n  }], [{\n    key: \"warnOnListenWarnings_\",\n    value: function warnOnListenWarnings_(payload, query) {\n      if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var warnings = safeGet(payload, 'w');\n\n        if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n          var indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n\n          var indexPath = query._path.toString();\n\n          warn(\"Using an unspecified index. Your data will be downloaded and \" + \"filtered on the client. Consider adding \".concat(indexSpec, \" at \") + \"\".concat(indexPath, \" to your security rules for better performance.\"));\n        }\n      }\n    }\n  }]);\n\n  return PersistentConnection;\n}(ServerActions);\n\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\n\nPersistentConnection.nextConnectionId_ = 0;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar NamedNode = /*#__PURE__*/function () {\n  function NamedNode(name, node) {\n    _classCallCheck(this, NamedNode);\n\n    this.name = name;\n    this.node = node;\n  }\n\n  _createClass(NamedNode, null, [{\n    key: \"Wrap\",\n    value: function Wrap(name, node) {\n      return new NamedNode(name, node);\n    }\n  }]);\n\n  return NamedNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Index = /*#__PURE__*/function () {\n  function Index() {\n    _classCallCheck(this, Index);\n  }\n\n  _createClass(Index, [{\n    key: \"getCompare\",\n    value:\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\n    function getCompare() {\n      return this.compare.bind(this);\n    }\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\n\n  }, {\n    key: \"indexedValueChanged\",\n    value: function indexedValueChanged(oldNode, newNode) {\n      var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n      var newWrapped = new NamedNode(MIN_NAME, newNode);\n      return this.compare(oldWrapped, newWrapped) !== 0;\n    }\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\n\n  }, {\n    key: \"minPost\",\n    value: function minPost() {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return NamedNode.MIN;\n    }\n  }]);\n\n  return Index;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __EMPTY_NODE;\n\nvar KeyIndex = /*#__PURE__*/function (_Index) {\n  _inherits(KeyIndex, _Index);\n\n  var _super4 = _createSuper(KeyIndex);\n\n  function KeyIndex() {\n    _classCallCheck(this, KeyIndex);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(KeyIndex, [{\n    key: \"compare\",\n    value: function compare(a, b) {\n      return nameCompare(a.name, b.name);\n    }\n  }, {\n    key: \"isDefinedOn\",\n    value: function isDefinedOn(node) {\n      // We could probably return true here (since every node has a key), but it's never called\n      // so just leaving unimplemented for now.\n      throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n    }\n  }, {\n    key: \"indexedValueChanged\",\n    value: function indexedValueChanged(oldNode, newNode) {\n      return false; // The key for a node never changes.\n    }\n  }, {\n    key: \"minPost\",\n    value: function minPost() {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return NamedNode.MIN;\n    }\n  }, {\n    key: \"maxPost\",\n    value: function maxPost() {\n      // TODO: This should really be created once and cached in a static property, but\n      // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n      return new NamedNode(MAX_NAME, __EMPTY_NODE);\n    }\n  }, {\n    key: \"makePost\",\n    value: function makePost(indexValue, name) {\n      assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n      return new NamedNode(indexValue, __EMPTY_NODE);\n    }\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '.key';\n    }\n  }], [{\n    key: \"__EMPTY_NODE\",\n    get: function get() {\n      return __EMPTY_NODE;\n    },\n    set: function set(val) {\n      __EMPTY_NODE = val;\n    }\n  }]);\n\n  return KeyIndex;\n}(Index);\n\nvar KEY_INDEX = new KeyIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nvar SortedMapIterator = /*#__PURE__*/function () {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_) {\n    var resultGenerator_ = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n    _classCallCheck(this, SortedMapIterator);\n\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  _createClass(SortedMapIterator, [{\n    key: \"getNext\",\n    value: function getNext() {\n      if (this.nodeStack_.length === 0) {\n        return null;\n      }\n\n      var node = this.nodeStack_.pop();\n      var result;\n\n      if (this.resultGenerator_) {\n        result = this.resultGenerator_(node.key, node.value);\n      } else {\n        result = {\n          key: node.key,\n          value: node.value\n        };\n      }\n\n      if (this.isReverse_) {\n        node = node.left;\n\n        while (!node.isEmpty()) {\n          this.nodeStack_.push(node);\n          node = node.right;\n        }\n      } else {\n        node = node.right;\n\n        while (!node.isEmpty()) {\n          this.nodeStack_.push(node);\n          node = node.left;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this.nodeStack_.length > 0;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      if (this.nodeStack_.length === 0) {\n        return null;\n      }\n\n      var node = this.nodeStack_[this.nodeStack_.length - 1];\n\n      if (this.resultGenerator_) {\n        return this.resultGenerator_(node.key, node.value);\n      } else {\n        return {\n          key: node.key,\n          value: node.value\n        };\n      }\n    }\n  }]);\n\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nvar LLRBNode = /*#__PURE__*/function () {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    _classCallCheck(this, LLRBNode);\n\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n\n\n  _createClass(LLRBNode, [{\n    key: \"copy\",\n    value: function copy(key, value, color, left, right) {\n      return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    }\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\n\n  }, {\n    key: \"count\",\n    value: function count() {\n      return this.left.count() + 1 + this.right.count();\n    }\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return false;\n    }\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\n\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(action) {\n      return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n    }\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\n\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(action) {\n      return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n    }\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\n\n  }, {\n    key: \"min_\",\n    value: function min_() {\n      if (this.left.isEmpty()) {\n        return this;\n      } else {\n        return this.left.min_();\n      }\n    }\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\n\n  }, {\n    key: \"minKey\",\n    value: function minKey() {\n      return this.min_().key;\n    }\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\n\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      if (this.right.isEmpty()) {\n        return this.key;\n      } else {\n        return this.right.maxKey();\n      }\n    }\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value, comparator) {\n      var n = this;\n      var cmp = comparator(key, n.key);\n\n      if (cmp < 0) {\n        n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n      } else if (cmp === 0) {\n        n = n.copy(null, value, null, null, null);\n      } else {\n        n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n      }\n\n      return n.fixUp_();\n    }\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\n\n  }, {\n    key: \"removeMin_\",\n    value: function removeMin_() {\n      if (this.left.isEmpty()) {\n        return SortedMap.EMPTY_NODE;\n      }\n\n      var n = this;\n\n      if (!n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.removeMin_(), null);\n      return n.fixUp_();\n    }\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key, comparator) {\n      var n, smallest;\n      n = this;\n\n      if (comparator(key, n.key) < 0) {\n        if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n          n = n.moveRedLeft_();\n        }\n\n        n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n      } else {\n        if (n.left.isRed_()) {\n          n = n.rotateRight_();\n        }\n\n        if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n          n = n.moveRedRight_();\n        }\n\n        if (comparator(key, n.key) === 0) {\n          if (n.right.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n          } else {\n            smallest = n.right.min_();\n            n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n          }\n        }\n\n        n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n      }\n\n      return n.fixUp_();\n    }\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\n\n  }, {\n    key: \"isRed_\",\n    value: function isRed_() {\n      return this.color;\n    }\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\n\n  }, {\n    key: \"fixUp_\",\n    value: function fixUp_() {\n      var n = this;\n\n      if (n.right.isRed_() && !n.left.isRed_()) {\n        n = n.rotateLeft_();\n      }\n\n      if (n.left.isRed_() && n.left.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n\n      if (n.left.isRed_() && n.right.isRed_()) {\n        n = n.colorFlip_();\n      }\n\n      return n;\n    }\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\n\n  }, {\n    key: \"moveRedLeft_\",\n    value: function moveRedLeft_() {\n      var n = this.colorFlip_();\n\n      if (n.right.left.isRed_()) {\n        n = n.copy(null, null, null, null, n.right.rotateRight_());\n        n = n.rotateLeft_();\n        n = n.colorFlip_();\n      }\n\n      return n;\n    }\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\n\n  }, {\n    key: \"moveRedRight_\",\n    value: function moveRedRight_() {\n      var n = this.colorFlip_();\n\n      if (n.left.left.isRed_()) {\n        n = n.rotateRight_();\n        n = n.colorFlip_();\n      }\n\n      return n;\n    }\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\n\n  }, {\n    key: \"rotateLeft_\",\n    value: function rotateLeft_() {\n      var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n      return this.right.copy(null, null, this.color, nl, null);\n    }\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\n\n  }, {\n    key: \"rotateRight_\",\n    value: function rotateRight_() {\n      var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n      return this.left.copy(null, null, this.color, null, nr);\n    }\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\n\n  }, {\n    key: \"colorFlip_\",\n    value: function colorFlip_() {\n      var left = this.left.copy(null, null, !this.left.color, null, null);\n      var right = this.right.copy(null, null, !this.right.color, null, null);\n      return this.copy(null, null, !this.color, left, right);\n    }\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\n\n  }, {\n    key: \"checkMaxDepth_\",\n    value: function checkMaxDepth_() {\n      var blackDepth = this.check_();\n      return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    }\n  }, {\n    key: \"check_\",\n    value: function check_() {\n      if (this.isRed_() && this.left.isRed_()) {\n        throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n      }\n\n      if (this.right.isRed_()) {\n        throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n      }\n\n      var blackDepth = this.left.check_();\n\n      if (blackDepth !== this.right.check_()) {\n        throw new Error('Black depths differ');\n      } else {\n        return blackDepth + (this.isRed_() ? 0 : 1);\n      }\n    }\n  }]);\n\n  return LLRBNode;\n}();\n\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\nvar LLRBEmptyNode = /*#__PURE__*/function () {\n  function LLRBEmptyNode() {\n    _classCallCheck(this, LLRBEmptyNode);\n  }\n\n  _createClass(LLRBEmptyNode, [{\n    key: \"copy\",\n    value:\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\n    function copy(key, value, color, left, right) {\n      return this;\n    }\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value, comparator) {\n      return new LLRBNode(key, value, null);\n    }\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key, comparator) {\n      return this;\n    }\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\n\n  }, {\n    key: \"count\",\n    value: function count() {\n      return 0;\n    }\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return true;\n    }\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\n\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(action) {\n      return false;\n    }\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\n\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(action) {\n      return false;\n    }\n  }, {\n    key: \"minKey\",\n    value: function minKey() {\n      return null;\n    }\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      return null;\n    }\n  }, {\n    key: \"check_\",\n    value: function check_() {\n      return 0;\n    }\n    /**\r\n     * @returns Whether this node is red.\r\n     */\n\n  }, {\n    key: \"isRed_\",\n    value: function isRed_() {\n      return false;\n    }\n  }]);\n\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nvar SortedMap = /*#__PURE__*/function () {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  function SortedMap(comparator_) {\n    var root_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SortedMap.EMPTY_NODE;\n\n    _classCallCheck(this, SortedMap);\n\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n\n\n  _createClass(SortedMap, [{\n    key: \"insert\",\n    value: function insert(key, value) {\n      return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var cmp;\n      var node = this.root_;\n\n      while (!node.isEmpty()) {\n        cmp = this.comparator_(key, node.key);\n\n        if (cmp === 0) {\n          return node.value;\n        } else if (cmp < 0) {\n          node = node.left;\n        } else if (cmp > 0) {\n          node = node.right;\n        }\n      }\n\n      return null;\n    }\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\n\n  }, {\n    key: \"getPredecessorKey\",\n    value: function getPredecessorKey(key) {\n      var cmp,\n          node = this.root_,\n          rightParent = null;\n\n      while (!node.isEmpty()) {\n        cmp = this.comparator_(key, node.key);\n\n        if (cmp === 0) {\n          if (!node.left.isEmpty()) {\n            node = node.left;\n\n            while (!node.right.isEmpty()) {\n              node = node.right;\n            }\n\n            return node.key;\n          } else if (rightParent) {\n            return rightParent.key;\n          } else {\n            return null; // first item.\n          }\n        } else if (cmp < 0) {\n          node = node.left;\n        } else if (cmp > 0) {\n          rightParent = node;\n          node = node.right;\n        }\n      }\n\n      throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    }\n    /**\r\n     * @returns True if the map is empty.\r\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.root_.isEmpty();\n    }\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\n\n  }, {\n    key: \"count\",\n    value: function count() {\n      return this.root_.count();\n    }\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\n\n  }, {\n    key: \"minKey\",\n    value: function minKey() {\n      return this.root_.minKey();\n    }\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\n\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      return this.root_.maxKey();\n    }\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\n\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(action) {\n      return this.root_.inorderTraversal(action);\n    }\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\n\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(action) {\n      return this.root_.reverseTraversal(action);\n    }\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\n\n  }, {\n    key: \"getIterator\",\n    value: function getIterator(resultGenerator) {\n      return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    }\n  }, {\n    key: \"getIteratorFrom\",\n    value: function getIteratorFrom(key, resultGenerator) {\n      return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    }\n  }, {\n    key: \"getReverseIteratorFrom\",\n    value: function getReverseIteratorFrom(key, resultGenerator) {\n      return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    }\n  }, {\n    key: \"getReverseIterator\",\n    value: function getReverseIterator(resultGenerator) {\n      return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    }\n  }]);\n\n  return SortedMap;\n}();\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\n\n\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MAX_NODE$2;\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\n\nvar priorityHashText = function priorityHashText(priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\n\n\nvar validatePriorityNode = function validatePriorityNode(priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nvar LeafNode = /*#__PURE__*/function () {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  function LeafNode(value_) {\n    var priorityNode_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n\n    _classCallCheck(this, LeafNode);\n\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  _createClass(LeafNode, [{\n    key: \"isLeafNode\",\n    value:\n    /** @inheritDoc */\n    function isLeafNode() {\n      return true;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getPriority\",\n    value: function getPriority() {\n      return this.priorityNode_;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"updatePriority\",\n    value: function updatePriority(newPriorityNode) {\n      return new LeafNode(this.value_, newPriorityNode);\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getImmediateChild\",\n    value: function getImmediateChild(childName) {\n      // Hack to treat priority as a regular child\n      if (childName === '.priority') {\n        return this.priorityNode_;\n      } else {\n        return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getChild\",\n    value: function getChild(path) {\n      if (pathIsEmpty(path)) {\n        return this;\n      } else if (pathGetFront(path) === '.priority') {\n        return this.priorityNode_;\n      } else {\n        return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n      }\n    }\n  }, {\n    key: \"hasChild\",\n    value: function hasChild() {\n      return false;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getPredecessorChildName\",\n    value: function getPredecessorChildName(childName, childNode) {\n      return null;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"updateImmediateChild\",\n    value: function updateImmediateChild(childName, newChildNode) {\n      if (childName === '.priority') {\n        return this.updatePriority(newChildNode);\n      } else if (newChildNode.isEmpty() && childName !== '.priority') {\n        return this;\n      } else {\n        return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"updateChild\",\n    value: function updateChild(path, newChildNode) {\n      var front = pathGetFront(path);\n\n      if (front === null) {\n        return newChildNode;\n      } else if (newChildNode.isEmpty() && front !== '.priority') {\n        return this;\n      } else {\n        assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n        return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return false;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"numChildren\",\n    value: function numChildren() {\n      return 0;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"forEachChild\",\n    value: function forEachChild(index, action) {\n      return false;\n    }\n  }, {\n    key: \"val\",\n    value: function val(exportFormat) {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        return {\n          '.value': this.getValue(),\n          '.priority': this.getPriority().val()\n        };\n      } else {\n        return this.getValue();\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      if (this.lazyHash_ === null) {\n        var toHash = '';\n\n        if (!this.priorityNode_.isEmpty()) {\n          toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n        }\n\n        var type = typeof this.value_;\n        toHash += type + ':';\n\n        if (type === 'number') {\n          toHash += doubleToIEEE754String(this.value_);\n        } else {\n          toHash += this.value_;\n        }\n\n        this.lazyHash_ = sha1(toHash);\n      }\n\n      return this.lazyHash_;\n    }\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value_;\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n        return 1;\n      } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n        return -1;\n      } else {\n        assert(other.isLeafNode(), 'Unknown node type');\n        return this.compareToLeafNode_(other);\n      }\n    }\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\n\n  }, {\n    key: \"compareToLeafNode_\",\n    value: function compareToLeafNode_(otherLeaf) {\n      var otherLeafType = typeof otherLeaf.value_;\n      var thisLeafType = typeof this.value_;\n      var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n      var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n      assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n      assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n      if (otherIndex === thisIndex) {\n        // Same type, compare values\n        if (thisLeafType === 'object') {\n          // Deferred value nodes are all equal, but we should also never get to this point...\n          return 0;\n        } else {\n          // Note that this works because true > false, all others are number or string comparisons\n          if (this.value_ < otherLeaf.value_) {\n            return -1;\n          } else if (this.value_ === otherLeaf.value_) {\n            return 0;\n          } else {\n            return 1;\n          }\n        }\n      } else {\n        return thisIndex - otherIndex;\n      }\n    }\n  }, {\n    key: \"withIndex\",\n    value: function withIndex() {\n      return this;\n    }\n  }, {\n    key: \"isIndexed\",\n    value: function isIndexed() {\n      return true;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (other === this) {\n        return true;\n      } else if (other.isLeafNode()) {\n        var otherLeaf = other;\n        return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n      } else {\n        return false;\n      }\n    }\n  }], [{\n    key: \"__childrenNodeConstructor\",\n    get: function get() {\n      return __childrenNodeConstructor;\n    },\n    set: function set(val) {\n      __childrenNodeConstructor = val;\n    }\n  }]);\n\n  return LeafNode;\n}();\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\n\n\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar nodeFromJSON$1;\nvar MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\n\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\n\nvar PriorityIndex = /*#__PURE__*/function (_Index2) {\n  _inherits(PriorityIndex, _Index2);\n\n  var _super5 = _createSuper(PriorityIndex);\n\n  function PriorityIndex() {\n    _classCallCheck(this, PriorityIndex);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(PriorityIndex, [{\n    key: \"compare\",\n    value: function compare(a, b) {\n      var aPriority = a.node.getPriority();\n      var bPriority = b.node.getPriority();\n      var indexCmp = aPriority.compareTo(bPriority);\n\n      if (indexCmp === 0) {\n        return nameCompare(a.name, b.name);\n      } else {\n        return indexCmp;\n      }\n    }\n  }, {\n    key: \"isDefinedOn\",\n    value: function isDefinedOn(node) {\n      return !node.getPriority().isEmpty();\n    }\n  }, {\n    key: \"indexedValueChanged\",\n    value: function indexedValueChanged(oldNode, newNode) {\n      return !oldNode.getPriority().equals(newNode.getPriority());\n    }\n  }, {\n    key: \"minPost\",\n    value: function minPost() {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return NamedNode.MIN;\n    }\n  }, {\n    key: \"maxPost\",\n    value: function maxPost() {\n      return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n    }\n  }, {\n    key: \"makePost\",\n    value: function makePost(indexValue, name) {\n      var priorityNode = nodeFromJSON$1(indexValue);\n      return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n    }\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '.priority';\n    }\n  }]);\n\n  return PriorityIndex;\n}(Index);\n\nvar PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar LOG_2 = Math.log(2);\n\nvar Base12Num = /*#__PURE__*/function () {\n  function Base12Num(length) {\n    _classCallCheck(this, Base12Num);\n\n    var logBase2 = function logBase2(num) {\n      return (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n        parseInt(Math.log(num) / LOG_2, 10)\n      );\n    };\n\n    var bitMask = function bitMask(bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n\n  _createClass(Base12Num, [{\n    key: \"nextBitIsOne\",\n    value: function nextBitIsOne() {\n      //noinspection JSBitwiseOperatorUsage\n      var result = !(this.bits_ & 0x1 << this.current_);\n      this.current_--;\n      return result;\n    }\n  }]);\n\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\n\n\nvar buildChildSet = function buildChildSet(childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  var buildBalancedTree = function buildBalancedTree(low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  var buildFrom12Array = function buildFrom12Array(base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n\n    var buildPennant = function buildPennant(chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    var attachPennant = function attachPennant(pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _defaultIndexMap;\n\nvar fallbackObject = {};\n\nvar IndexMap = /*#__PURE__*/function () {\n  function IndexMap(indexes_, indexSet_) {\n    _classCallCheck(this, IndexMap);\n\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\r\n   * The default IndexMap for nodes without a priority\r\n   */\n\n\n  _createClass(IndexMap, [{\n    key: \"get\",\n    value: function get(indexKey) {\n      var sortedMap = safeGet(this.indexes_, indexKey);\n\n      if (!sortedMap) {\n        throw new Error('No index defined for ' + indexKey);\n      }\n\n      if (sortedMap instanceof SortedMap) {\n        return sortedMap;\n      } else {\n        // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n        // regular child map\n        return null;\n      }\n    }\n  }, {\n    key: \"hasIndex\",\n    value: function hasIndex(indexDefinition) {\n      return contains(this.indexSet_, indexDefinition.toString());\n    }\n  }, {\n    key: \"addIndex\",\n    value: function addIndex(indexDefinition, existingChildren) {\n      assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n      var childList = [];\n      var sawIndexedValue = false;\n      var iter = existingChildren.getIterator(NamedNode.Wrap);\n      var next = iter.getNext();\n\n      while (next) {\n        sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n        childList.push(next);\n        next = iter.getNext();\n      }\n\n      var newIndex;\n\n      if (sawIndexedValue) {\n        newIndex = buildChildSet(childList, indexDefinition.getCompare());\n      } else {\n        newIndex = fallbackObject;\n      }\n\n      var indexName = indexDefinition.toString();\n      var newIndexSet = Object.assign({}, this.indexSet_);\n      newIndexSet[indexName] = indexDefinition;\n      var newIndexes = Object.assign({}, this.indexes_);\n      newIndexes[indexName] = newIndex;\n      return new IndexMap(newIndexes, newIndexSet);\n    }\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\n\n  }, {\n    key: \"addToIndexes\",\n    value: function addToIndexes(namedNode, existingChildren) {\n      var _this30 = this;\n\n      var newIndexes = map(this.indexes_, function (indexedChildren, indexName) {\n        var index = safeGet(_this30.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            var childList = [];\n            var iter = existingChildren.getIterator(NamedNode.Wrap);\n            var next = iter.getNext();\n\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n\n              next = iter.getNext();\n            }\n\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          var existingSnap = existingChildren.get(namedNode.name);\n          var newChildren = indexedChildren;\n\n          if (existingSnap) {\n            newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n          }\n\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      });\n      return new IndexMap(newIndexes, this.indexSet_);\n    }\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\n\n  }, {\n    key: \"removeFromIndexes\",\n    value: function removeFromIndexes(namedNode, existingChildren) {\n      var newIndexes = map(this.indexes_, function (indexedChildren) {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          var existingSnap = existingChildren.get(namedNode.name);\n\n          if (existingSnap) {\n            return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      });\n      return new IndexMap(newIndexes, this.indexSet_);\n    }\n  }], [{\n    key: \"Default\",\n    get: function get() {\n      assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    }\n  }]);\n\n  return IndexMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\n\nvar ChildrenNode = /*#__PURE__*/function () {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    _classCallCheck(this, ChildrenNode);\n\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  _createClass(ChildrenNode, [{\n    key: \"isLeafNode\",\n    value:\n    /** @inheritDoc */\n    function isLeafNode() {\n      return false;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getPriority\",\n    value: function getPriority() {\n      return this.priorityNode_ || EMPTY_NODE;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"updatePriority\",\n    value: function updatePriority(newPriorityNode) {\n      if (this.children_.isEmpty()) {\n        // Don't allow priorities on empty nodes\n        return this;\n      } else {\n        return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getImmediateChild\",\n    value: function getImmediateChild(childName) {\n      // Hack to treat priority as a regular child\n      if (childName === '.priority') {\n        return this.getPriority();\n      } else {\n        var _child = this.children_.get(childName);\n\n        return _child === null ? EMPTY_NODE : _child;\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getChild\",\n    value: function getChild(path) {\n      var front = pathGetFront(path);\n\n      if (front === null) {\n        return this;\n      }\n\n      return this.getImmediateChild(front).getChild(pathPopFront(path));\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"hasChild\",\n    value: function hasChild(childName) {\n      return this.children_.get(childName) !== null;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"updateImmediateChild\",\n    value: function updateImmediateChild(childName, newChildNode) {\n      assert(newChildNode, 'We should always be passing snapshot nodes');\n\n      if (childName === '.priority') {\n        return this.updatePriority(newChildNode);\n      } else {\n        var namedNode = new NamedNode(childName, newChildNode);\n        var newChildren, newIndexMap;\n\n        if (newChildNode.isEmpty()) {\n          newChildren = this.children_.remove(childName);\n          newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n        } else {\n          newChildren = this.children_.insert(childName, newChildNode);\n          newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n        }\n\n        var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n        return new ChildrenNode(newChildren, newPriority, newIndexMap);\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"updateChild\",\n    value: function updateChild(path, newChildNode) {\n      var front = pathGetFront(path);\n\n      if (front === null) {\n        return newChildNode;\n      } else {\n        assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n        var newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n        return this.updateImmediateChild(front, newImmediateChild);\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.children_.isEmpty();\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"numChildren\",\n    value: function numChildren() {\n      return this.children_.count();\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"val\",\n    value: function val(exportFormat) {\n      if (this.isEmpty()) {\n        return null;\n      }\n\n      var obj = {};\n      var numKeys = 0,\n          maxKey = 0,\n          allIntegerKeys = true;\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        obj[key] = childNode.val(exportFormat);\n        numKeys++;\n\n        if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n          maxKey = Math.max(maxKey, Number(key));\n        } else {\n          allIntegerKeys = false;\n        }\n      });\n\n      if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n        // convert to array.\n        var array = []; // eslint-disable-next-line guard-for-in\n\n        for (var key in obj) {\n          array[key] = obj[key];\n        }\n\n        return array;\n      } else {\n        if (exportFormat && !this.getPriority().isEmpty()) {\n          obj['.priority'] = this.getPriority().val();\n        }\n\n        return obj;\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      if (this.lazyHash_ === null) {\n        var toHash = '';\n\n        if (!this.getPriority().isEmpty()) {\n          toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n        }\n\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          var childHash = childNode.hash();\n\n          if (childHash !== '') {\n            toHash += ':' + key + ':' + childHash;\n          }\n        });\n        this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n      }\n\n      return this.lazyHash_;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getPredecessorChildName\",\n    value: function getPredecessorChildName(childName, childNode, index) {\n      var idx = this.resolveIndex_(index);\n\n      if (idx) {\n        var _predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n\n        return _predecessor ? _predecessor.name : null;\n      } else {\n        return this.children_.getPredecessorKey(childName);\n      }\n    }\n  }, {\n    key: \"getFirstChildName\",\n    value: function getFirstChildName(indexDefinition) {\n      var idx = this.resolveIndex_(indexDefinition);\n\n      if (idx) {\n        var minKey = idx.minKey();\n        return minKey && minKey.name;\n      } else {\n        return this.children_.minKey();\n      }\n    }\n  }, {\n    key: \"getFirstChild\",\n    value: function getFirstChild(indexDefinition) {\n      var minKey = this.getFirstChildName(indexDefinition);\n\n      if (minKey) {\n        return new NamedNode(minKey, this.children_.get(minKey));\n      } else {\n        return null;\n      }\n    }\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\n\n  }, {\n    key: \"getLastChildName\",\n    value: function getLastChildName(indexDefinition) {\n      var idx = this.resolveIndex_(indexDefinition);\n\n      if (idx) {\n        var maxKey = idx.maxKey();\n        return maxKey && maxKey.name;\n      } else {\n        return this.children_.maxKey();\n      }\n    }\n  }, {\n    key: \"getLastChild\",\n    value: function getLastChild(indexDefinition) {\n      var maxKey = this.getLastChildName(indexDefinition);\n\n      if (maxKey) {\n        return new NamedNode(maxKey, this.children_.get(maxKey));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"forEachChild\",\n    value: function forEachChild(index, action) {\n      var idx = this.resolveIndex_(index);\n\n      if (idx) {\n        return idx.inorderTraversal(function (wrappedNode) {\n          return action(wrappedNode.name, wrappedNode.node);\n        });\n      } else {\n        return this.children_.inorderTraversal(action);\n      }\n    }\n  }, {\n    key: \"getIterator\",\n    value: function getIterator(indexDefinition) {\n      return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    }\n  }, {\n    key: \"getIteratorFrom\",\n    value: function getIteratorFrom(startPost, indexDefinition) {\n      var idx = this.resolveIndex_(indexDefinition);\n\n      if (idx) {\n        return idx.getIteratorFrom(startPost, function (key) {\n          return key;\n        });\n      } else {\n        var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n        var next = iterator.peek();\n\n        while (next != null && indexDefinition.compare(next, startPost) < 0) {\n          iterator.getNext();\n          next = iterator.peek();\n        }\n\n        return iterator;\n      }\n    }\n  }, {\n    key: \"getReverseIterator\",\n    value: function getReverseIterator(indexDefinition) {\n      return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    }\n  }, {\n    key: \"getReverseIteratorFrom\",\n    value: function getReverseIteratorFrom(endPost, indexDefinition) {\n      var idx = this.resolveIndex_(indexDefinition);\n\n      if (idx) {\n        return idx.getReverseIteratorFrom(endPost, function (key) {\n          return key;\n        });\n      } else {\n        var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n        var next = iterator.peek();\n\n        while (next != null && indexDefinition.compare(next, endPost) > 0) {\n          iterator.getNext();\n          next = iterator.peek();\n        }\n\n        return iterator;\n      }\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      if (this.isEmpty()) {\n        if (other.isEmpty()) {\n          return 0;\n        } else {\n          return -1;\n        }\n      } else if (other.isLeafNode() || other.isEmpty()) {\n        return 1;\n      } else if (other === MAX_NODE) {\n        return -1;\n      } else {\n        // Must be another node with children.\n        return 0;\n      }\n    }\n  }, {\n    key: \"withIndex\",\n    value: function withIndex(indexDefinition) {\n      if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n        return this;\n      } else {\n        var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n        return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n      }\n    }\n  }, {\n    key: \"isIndexed\",\n    value: function isIndexed(index) {\n      return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (other === this) {\n        return true;\n      } else if (other.isLeafNode()) {\n        return false;\n      } else {\n        var otherChildrenNode = other;\n\n        if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n          return false;\n        } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n          var thisIter = this.getIterator(PRIORITY_INDEX);\n          var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n          var thisCurrent = thisIter.getNext();\n          var otherCurrent = otherIter.getNext();\n\n          while (thisCurrent && otherCurrent) {\n            if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n              return false;\n            }\n\n            thisCurrent = thisIter.getNext();\n            otherCurrent = otherIter.getNext();\n          }\n\n          return thisCurrent === null && otherCurrent === null;\n        } else {\n          return false;\n        }\n      }\n    }\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\n\n  }, {\n    key: \"resolveIndex_\",\n    value: function resolveIndex_(indexDefinition) {\n      if (indexDefinition === KEY_INDEX) {\n        return null;\n      } else {\n        return this.indexMap_.get(indexDefinition.toString());\n      }\n    }\n  }], [{\n    key: \"EMPTY_NODE\",\n    get: function get() {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    }\n  }]);\n\n  return ChildrenNode;\n}();\n\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\nvar MaxNode = /*#__PURE__*/function (_ChildrenNode) {\n  _inherits(MaxNode, _ChildrenNode);\n\n  var _super6 = _createSuper(MaxNode);\n\n  function MaxNode() {\n    _classCallCheck(this, MaxNode);\n\n    return _super6.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n\n  _createClass(MaxNode, [{\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      if (other === this) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      // Not that we every compare it, but MAX_NODE is only ever equal to itself\n      return other === this;\n    }\n  }, {\n    key: \"getPriority\",\n    value: function getPriority() {\n      return this;\n    }\n  }, {\n    key: \"getImmediateChild\",\n    value: function getImmediateChild(childName) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return false;\n    }\n  }]);\n\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\n\n\nvar MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\n\nfunction nodeFromJSON(json) {\n  var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children = [];\n    var childrenHavePriority = false;\n    var hinzeJsonObj = json;\n    each(hinzeJsonObj, function (key, child) {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    var childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n\n    if (childrenHavePriority) {\n      var sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    var node = ChildrenNode.EMPTY_NODE;\n    each(json, function (key, childData) {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON(childData);\n\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PathIndex = /*#__PURE__*/function (_Index3) {\n  _inherits(PathIndex, _Index3);\n\n  var _super7 = _createSuper(PathIndex);\n\n  function PathIndex(indexPath_) {\n    var _this31;\n\n    _classCallCheck(this, PathIndex);\n\n    _this31 = _super7.call(this);\n    _this31.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this31;\n  }\n\n  _createClass(PathIndex, [{\n    key: \"extractChild\",\n    value: function extractChild(snap) {\n      return snap.getChild(this.indexPath_);\n    }\n  }, {\n    key: \"isDefinedOn\",\n    value: function isDefinedOn(node) {\n      return !node.getChild(this.indexPath_).isEmpty();\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      var aChild = this.extractChild(a.node);\n      var bChild = this.extractChild(b.node);\n      var indexCmp = aChild.compareTo(bChild);\n\n      if (indexCmp === 0) {\n        return nameCompare(a.name, b.name);\n      } else {\n        return indexCmp;\n      }\n    }\n  }, {\n    key: \"makePost\",\n    value: function makePost(indexValue, name) {\n      var valueNode = nodeFromJSON(indexValue);\n      var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n      return new NamedNode(name, node);\n    }\n  }, {\n    key: \"maxPost\",\n    value: function maxPost() {\n      var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n      return new NamedNode(MAX_NAME, node);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return pathSlice(this.indexPath_, 0).join('/');\n    }\n  }]);\n\n  return PathIndex;\n}(Index);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ValueIndex = /*#__PURE__*/function (_Index4) {\n  _inherits(ValueIndex, _Index4);\n\n  var _super8 = _createSuper(ValueIndex);\n\n  function ValueIndex() {\n    _classCallCheck(this, ValueIndex);\n\n    return _super8.apply(this, arguments);\n  }\n\n  _createClass(ValueIndex, [{\n    key: \"compare\",\n    value: function compare(a, b) {\n      var indexCmp = a.node.compareTo(b.node);\n\n      if (indexCmp === 0) {\n        return nameCompare(a.name, b.name);\n      } else {\n        return indexCmp;\n      }\n    }\n  }, {\n    key: \"isDefinedOn\",\n    value: function isDefinedOn(node) {\n      return true;\n    }\n  }, {\n    key: \"indexedValueChanged\",\n    value: function indexedValueChanged(oldNode, newNode) {\n      return !oldNode.equals(newNode);\n    }\n  }, {\n    key: \"minPost\",\n    value: function minPost() {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return NamedNode.MIN;\n    }\n  }, {\n    key: \"maxPost\",\n    value: function maxPost() {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return NamedNode.MAX;\n    }\n  }, {\n    key: \"makePost\",\n    value: function makePost(indexValue, name) {\n      var valueNode = nodeFromJSON(indexValue);\n      return new NamedNode(name, valueNode);\n    }\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '.value';\n    }\n  }]);\n\n  return ValueIndex;\n}(Index);\n\nvar VALUE_INDEX = new ValueIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\n\nvar PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nvar MIN_PUSH_CHAR = '-';\nvar MAX_PUSH_CHAR = 'z';\nvar MAX_KEY_LEN = 786;\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\nvar nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  var lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n\nvar successor = function successor(key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n\n  var keyAsInt = tryParseInt(key);\n\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n\n  var next = new Array(key.length);\n\n  for (var _i4 = 0; _i4 < next.length; _i4++) {\n    next[_i4] = key.charAt(_i4);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  var i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  } // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n\n\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  var source = next[i];\n  var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n}; // `key` is assumed to be non-empty.\n\n\nvar predecessor = function predecessor(key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n\n  var keyAsInt = tryParseInt(key);\n\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n\n  var next = new Array(key.length);\n\n  for (var i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  } // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n\n\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n\n    delete next[next.length - 1];\n    return next.join('');\n  } // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n\n\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\"\n    /* VALUE */\n    ,\n    snapshotNode: snapshotNode\n  };\n}\n\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\"\n    /* CHILD_ADDED */\n    ,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\n\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\"\n    /* CHILD_REMOVED */\n    ,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\n\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\"\n    /* CHILD_CHANGED */\n    ,\n    snapshotNode: snapshotNode,\n    childName: childName,\n    oldSnap: oldSnap\n  };\n}\n\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\"\n    /* CHILD_MOVED */\n    ,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\n\n\nvar IndexedFilter = /*#__PURE__*/function () {\n  function IndexedFilter(index_) {\n    _classCallCheck(this, IndexedFilter);\n\n    this.index_ = index_;\n  }\n\n  _createClass(IndexedFilter, [{\n    key: \"updateChild\",\n    value: function updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n      assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n      var oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n      if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n        // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n        // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n        // to avoid treating these cases as \"nothing changed.\"\n        if (oldChild.isEmpty() === newChild.isEmpty()) {\n          // Nothing changed.\n          // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n          //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n          return snap;\n        }\n      }\n\n      if (optChangeAccumulator != null) {\n        if (newChild.isEmpty()) {\n          if (snap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n          } else {\n            assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n          }\n        } else if (oldChild.isEmpty()) {\n          optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n        } else {\n          optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n        }\n      }\n\n      if (snap.isLeafNode() && newChild.isEmpty()) {\n        return snap;\n      } else {\n        // Make sure the node is indexed\n        return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n      }\n    }\n  }, {\n    key: \"updateFullNode\",\n    value: function updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n      if (optChangeAccumulator != null) {\n        if (!oldSnap.isLeafNode()) {\n          oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n            if (!newSnap.hasChild(key)) {\n              optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n            }\n          });\n        }\n\n        if (!newSnap.isLeafNode()) {\n          newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n            if (oldSnap.hasChild(key)) {\n              var oldChild = oldSnap.getImmediateChild(key);\n\n              if (!oldChild.equals(childNode)) {\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n              }\n            } else {\n              optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n            }\n          });\n        }\n      }\n\n      return newSnap.withIndex(this.index_);\n    }\n  }, {\n    key: \"updatePriority\",\n    value: function updatePriority(oldSnap, newPriority) {\n      if (oldSnap.isEmpty()) {\n        return ChildrenNode.EMPTY_NODE;\n      } else {\n        return oldSnap.updatePriority(newPriority);\n      }\n    }\n  }, {\n    key: \"filtersNodes\",\n    value: function filtersNodes() {\n      return false;\n    }\n  }, {\n    key: \"getIndexedFilter\",\n    value: function getIndexedFilter() {\n      return this;\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex() {\n      return this.index_;\n    }\n  }]);\n\n  return IndexedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\n\n\nvar RangedFilter = /*#__PURE__*/function () {\n  function RangedFilter(params) {\n    _classCallCheck(this, RangedFilter);\n\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  _createClass(RangedFilter, [{\n    key: \"getStartPost\",\n    value: function getStartPost() {\n      return this.startPost_;\n    }\n  }, {\n    key: \"getEndPost\",\n    value: function getEndPost() {\n      return this.endPost_;\n    }\n  }, {\n    key: \"matches\",\n    value: function matches(node) {\n      return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n    }\n  }, {\n    key: \"updateChild\",\n    value: function updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n      if (!this.matches(new NamedNode(key, newChild))) {\n        newChild = ChildrenNode.EMPTY_NODE;\n      }\n\n      return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    }\n  }, {\n    key: \"updateFullNode\",\n    value: function updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n      if (newSnap.isLeafNode()) {\n        // Make sure we have a children node with the correct index, not a leaf node;\n        newSnap = ChildrenNode.EMPTY_NODE;\n      }\n\n      var filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n      filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n      var self = this;\n      newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        if (!self.matches(new NamedNode(key, childNode))) {\n          filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n        }\n      });\n      return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n  }, {\n    key: \"updatePriority\",\n    value: function updatePriority(oldSnap, newPriority) {\n      // Don't support priorities on queries\n      return oldSnap;\n    }\n  }, {\n    key: \"filtersNodes\",\n    value: function filtersNodes() {\n      return true;\n    }\n  }, {\n    key: \"getIndexedFilter\",\n    value: function getIndexedFilter() {\n      return this.indexedFilter_;\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex() {\n      return this.index_;\n    }\n  }], [{\n    key: \"getStartPost_\",\n    value: function getStartPost_(params) {\n      if (params.hasStart()) {\n        var startName = params.getIndexStartName();\n        return params.getIndex().makePost(params.getIndexStartValue(), startName);\n      } else {\n        return params.getIndex().minPost();\n      }\n    }\n  }, {\n    key: \"getEndPost_\",\n    value: function getEndPost_(params) {\n      if (params.hasEnd()) {\n        var endName = params.getIndexEndName();\n        return params.getIndex().makePost(params.getIndexEndValue(), endName);\n      } else {\n        return params.getIndex().maxPost();\n      }\n    }\n  }]);\n\n  return RangedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\n\n\nvar LimitedFilter = /*#__PURE__*/function () {\n  function LimitedFilter(params) {\n    _classCallCheck(this, LimitedFilter);\n\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  _createClass(LimitedFilter, [{\n    key: \"updateChild\",\n    value: function updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n      if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n        newChild = ChildrenNode.EMPTY_NODE;\n      }\n\n      if (snap.getImmediateChild(key).equals(newChild)) {\n        // No change\n        return snap;\n      } else if (snap.numChildren() < this.limit_) {\n        return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n      } else {\n        return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n      }\n    }\n  }, {\n    key: \"updateFullNode\",\n    value: function updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n      var filtered;\n\n      if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n        // Make sure we have a children node with the correct index, not a leaf node;\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n      } else {\n        if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n          // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n          filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n          var iterator;\n\n          if (this.reverse_) {\n            iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n          } else {\n            iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n          }\n\n          var count = 0;\n\n          while (iterator.hasNext() && count < this.limit_) {\n            var next = iterator.getNext();\n            var inRange = void 0;\n\n            if (this.reverse_) {\n              inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n            } else {\n              inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n            }\n\n            if (inRange) {\n              filtered = filtered.updateImmediateChild(next.name, next.node);\n              count++;\n            } else {\n              // if we have reached the end post, we cannot keep adding elemments\n              break;\n            }\n          }\n        } else {\n          // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n          filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n          filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n          var startPost;\n          var endPost;\n          var cmp;\n\n          var _iterator4;\n\n          if (this.reverse_) {\n            _iterator4 = filtered.getReverseIterator(this.index_);\n            startPost = this.rangedFilter_.getEndPost();\n            endPost = this.rangedFilter_.getStartPost();\n            var indexCompare = this.index_.getCompare();\n\n            cmp = function cmp(a, b) {\n              return indexCompare(b, a);\n            };\n          } else {\n            _iterator4 = filtered.getIterator(this.index_);\n            startPost = this.rangedFilter_.getStartPost();\n            endPost = this.rangedFilter_.getEndPost();\n            cmp = this.index_.getCompare();\n          }\n\n          var _count = 0;\n          var foundStartPost = false;\n\n          while (_iterator4.hasNext()) {\n            var _next = _iterator4.getNext();\n\n            if (!foundStartPost && cmp(startPost, _next) <= 0) {\n              // start adding\n              foundStartPost = true;\n            }\n\n            var _inRange = foundStartPost && _count < this.limit_ && cmp(_next, endPost) <= 0;\n\n            if (_inRange) {\n              _count++;\n            } else {\n              filtered = filtered.updateImmediateChild(_next.name, ChildrenNode.EMPTY_NODE);\n            }\n          }\n        }\n      }\n\n      return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n  }, {\n    key: \"updatePriority\",\n    value: function updatePriority(oldSnap, newPriority) {\n      // Don't support priorities on queries\n      return oldSnap;\n    }\n  }, {\n    key: \"filtersNodes\",\n    value: function filtersNodes() {\n      return true;\n    }\n  }, {\n    key: \"getIndexedFilter\",\n    value: function getIndexedFilter() {\n      return this.rangedFilter_.getIndexedFilter();\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex() {\n      return this.index_;\n    }\n  }, {\n    key: \"fullLimitUpdateChild_\",\n    value: function fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n      // TODO: rename all cache stuff etc to general snap terminology\n      var cmp;\n\n      if (this.reverse_) {\n        var indexCmp = this.index_.getCompare();\n\n        cmp = function cmp(a, b) {\n          return indexCmp(b, a);\n        };\n      } else {\n        cmp = this.index_.getCompare();\n      }\n\n      var oldEventCache = snap;\n      assert(oldEventCache.numChildren() === this.limit_, '');\n      var newChildNamedNode = new NamedNode(childKey, childSnap);\n      var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n      var inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n      if (oldEventCache.hasChild(childKey)) {\n        var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n        var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n        while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n          // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n          // been applied to the limited filter yet. Ignore this next child which will be updated later in\n          // the limited filter...\n          nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n        }\n\n        var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n        var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n        if (remainsInWindow) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n          }\n\n          return oldEventCache.updateImmediateChild(childKey, childSnap);\n        } else {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n          }\n\n          var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n          var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n          if (nextChildInRange) {\n            if (changeAccumulator != null) {\n              changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n            }\n\n            return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n          } else {\n            return newEventCache;\n          }\n        }\n      } else if (childSnap.isEmpty()) {\n        // we're deleting a node, but it was not in the window, so ignore it\n        return snap;\n      } else if (inRange) {\n        if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n            changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n          }\n\n          return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n        } else {\n          return snap;\n        }\n      } else {\n        return snap;\n      }\n    }\n  }]);\n\n  return LimitedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\n\n\nvar QueryParams = /*#__PURE__*/function () {\n  function QueryParams() {\n    _classCallCheck(this, QueryParams);\n\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n\n  _createClass(QueryParams, [{\n    key: \"hasStart\",\n    value: function hasStart() {\n      return this.startSet_;\n    }\n  }, {\n    key: \"hasStartAfter\",\n    value: function hasStartAfter() {\n      return this.startAfterSet_;\n    }\n  }, {\n    key: \"hasEndBefore\",\n    value: function hasEndBefore() {\n      return this.endBeforeSet_;\n    }\n    /**\r\n     * @returns True if it would return from left.\r\n     */\n\n  }, {\n    key: \"isViewFromLeft\",\n    value: function isViewFromLeft() {\n      if (this.viewFrom_ === '') {\n        // limit(), rather than limitToFirst or limitToLast was called.\n        // This means that only one of startSet_ and endSet_ is true. Use them\n        // to calculate which side of the view to anchor to. If neither is set,\n        // anchor to the end.\n        return this.startSet_;\n      } else {\n        return this.viewFrom_ === \"l\"\n        /* VIEW_FROM_LEFT */\n        ;\n      }\n    }\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\n\n  }, {\n    key: \"getIndexStartValue\",\n    value: function getIndexStartValue() {\n      assert(this.startSet_, 'Only valid if start has been set');\n      return this.indexStartValue_;\n    }\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\n\n  }, {\n    key: \"getIndexStartName\",\n    value: function getIndexStartName() {\n      assert(this.startSet_, 'Only valid if start has been set');\n\n      if (this.startNameSet_) {\n        return this.indexStartName_;\n      } else {\n        return MIN_NAME;\n      }\n    }\n  }, {\n    key: \"hasEnd\",\n    value: function hasEnd() {\n      return this.endSet_;\n    }\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\n\n  }, {\n    key: \"getIndexEndValue\",\n    value: function getIndexEndValue() {\n      assert(this.endSet_, 'Only valid if end has been set');\n      return this.indexEndValue_;\n    }\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\n\n  }, {\n    key: \"getIndexEndName\",\n    value: function getIndexEndName() {\n      assert(this.endSet_, 'Only valid if end has been set');\n\n      if (this.endNameSet_) {\n        return this.indexEndName_;\n      } else {\n        return MAX_NAME;\n      }\n    }\n  }, {\n    key: \"hasLimit\",\n    value: function hasLimit() {\n      return this.limitSet_;\n    }\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\n\n  }, {\n    key: \"hasAnchoredLimit\",\n    value: function hasAnchoredLimit() {\n      return this.limitSet_ && this.viewFrom_ !== '';\n    }\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\n\n  }, {\n    key: \"getLimit\",\n    value: function getLimit() {\n      assert(this.limitSet_, 'Only valid if limit has been set');\n      return this.limit_;\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex() {\n      return this.index_;\n    }\n  }, {\n    key: \"loadsAllData\",\n    value: function loadsAllData() {\n      return !(this.startSet_ || this.endSet_ || this.limitSet_);\n    }\n  }, {\n    key: \"isDefault\",\n    value: function isDefault() {\n      return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var copy = new QueryParams();\n      copy.limitSet_ = this.limitSet_;\n      copy.limit_ = this.limit_;\n      copy.startSet_ = this.startSet_;\n      copy.indexStartValue_ = this.indexStartValue_;\n      copy.startNameSet_ = this.startNameSet_;\n      copy.indexStartName_ = this.indexStartName_;\n      copy.endSet_ = this.endSet_;\n      copy.indexEndValue_ = this.indexEndValue_;\n      copy.endNameSet_ = this.endNameSet_;\n      copy.indexEndName_ = this.indexEndName_;\n      copy.index_ = this.index_;\n      copy.viewFrom_ = this.viewFrom_;\n      return copy;\n    }\n  }]);\n\n  return QueryParams;\n}();\n\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  var newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\"\n  /* VIEW_FROM_LEFT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  var newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\"\n  /* VIEW_FROM_RIGHT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  var newParams = queryParams.copy();\n  newParams.startSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexStartValue_ = indexValue;\n\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  var params;\n\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue);\n    }\n\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    var childKey;\n\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n\n  params.startAfterSet_ = true;\n  return params;\n}\n\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  var newParams = queryParams.copy();\n  newParams.endSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexEndValue_ = indexValue;\n\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  var childKey;\n  var params;\n\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue);\n    }\n\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nfunction queryParamsOrderBy(queryParams, index) {\n  var newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\n\n\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  var qs = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  var orderBy;\n\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\"\n    /* PRIORITY_INDEX */\n    ;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\"\n    /* VALUE_INDEX */\n    ;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\"\n    /* KEY_INDEX */\n    ;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n\n  qs[\"orderBy\"\n  /* ORDER_BY */\n  ] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[\"startAt\"\n    /* START_AT */\n    ] = stringify(queryParams.indexStartValue_);\n\n    if (queryParams.startNameSet_) {\n      qs[\"startAt\"\n      /* START_AT */\n      ] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[\"endAt\"\n    /* END_AT */\n    ] = stringify(queryParams.indexEndValue_);\n\n    if (queryParams.endNameSet_) {\n      qs[\"endAt\"\n      /* END_AT */\n      ] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\"\n      /* LIMIT_TO_FIRST */\n      ] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\"\n      /* LIMIT_TO_LAST */\n      ] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nfunction queryParamsGetQueryObject(queryParams) {\n  var obj = {};\n\n  if (queryParams.startSet_) {\n    obj[\"sp\"\n    /* INDEX_START_VALUE */\n    ] = queryParams.indexStartValue_;\n\n    if (queryParams.startNameSet_) {\n      obj[\"sn\"\n      /* INDEX_START_NAME */\n      ] = queryParams.indexStartName_;\n    }\n  }\n\n  if (queryParams.endSet_) {\n    obj[\"ep\"\n    /* INDEX_END_VALUE */\n    ] = queryParams.indexEndValue_;\n\n    if (queryParams.endNameSet_) {\n      obj[\"en\"\n      /* INDEX_END_NAME */\n      ] = queryParams.indexEndName_;\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    obj[\"l\"\n    /* LIMIT */\n    ] = queryParams.limit_;\n    var viewFrom = queryParams.viewFrom_;\n\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\"\n        /* VIEW_FROM_LEFT */\n        ;\n      } else {\n        viewFrom = \"r\"\n        /* VIEW_FROM_RIGHT */\n        ;\n      }\n    }\n\n    obj[\"vf\"\n    /* VIEW_FROM */\n    ] = viewFrom;\n  } // For now, priority index is the default, so we only specify if it's some other index\n\n\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\"\n    /* INDEX */\n    ] = queryParams.index_.toString();\n  }\n\n  return obj;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nvar ReadonlyRestClient = /*#__PURE__*/function (_ServerActions2) {\n  _inherits(ReadonlyRestClient, _ServerActions2);\n\n  var _super9 = _createSuper(ReadonlyRestClient);\n\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    var _this32;\n\n    _classCallCheck(this, ReadonlyRestClient);\n\n    _this32 = _super9.call(this);\n    _this32.repoInfo_ = repoInfo_;\n    _this32.onDataUpdate_ = onDataUpdate_;\n    _this32.authTokenProvider_ = authTokenProvider_;\n    _this32.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n\n    _this32.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n\n    _this32.listens_ = {};\n    return _this32;\n  }\n\n  _createClass(ReadonlyRestClient, [{\n    key: \"reportStats\",\n    value: function reportStats(stats) {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"listen\",\n    value:\n    /** @inheritDoc */\n    function listen(query, currentHashFn, tag, onComplete) {\n      var _this33 = this;\n\n      var pathString = query._path.toString();\n\n      this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier); // Mark this listener so we can tell if it's removed.\n\n      var listenId = ReadonlyRestClient.getListenId_(query, tag);\n      var thisListen = {};\n      this.listens_[listenId] = thisListen;\n      var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n      this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n        var data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          _this33.onDataUpdate_(pathString, data,\n          /*isMerge=*/\n          false, tag);\n        }\n\n        if (safeGet(_this33.listens_, listenId) === thisListen) {\n          var status;\n\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      });\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"unlisten\",\n    value: function unlisten(query, tag) {\n      var listenId = ReadonlyRestClient.getListenId_(query, tag);\n      delete this.listens_[listenId];\n    }\n  }, {\n    key: \"get\",\n    value: function get(query) {\n      var _this34 = this;\n\n      var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n\n      var pathString = query._path.toString();\n\n      var deferred = new Deferred();\n      this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n        var data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          _this34.onDataUpdate_(pathString, data,\n          /*isMerge=*/\n          false,\n          /*tag=*/\n          null);\n\n          deferred.resolve(data);\n        } else {\n          deferred.reject(new Error(data));\n        }\n      });\n      return deferred.promise;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"refreshAuthToken\",\n    value: function refreshAuthToken(token) {// no-op since we just always call getToken.\n    }\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\n\n  }, {\n    key: \"restRequest_\",\n    value: function restRequest_(pathString) {\n      var _this35 = this;\n\n      var queryStringParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      queryStringParameters['format'] = 'export';\n      return Promise.all([this.authTokenProvider_.getToken(\n      /*forceRefresh=*/\n      false), this.appCheckTokenProvider_.getToken(\n      /*forceRefresh=*/\n      false)]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            authToken = _ref2[0],\n            appCheckToken = _ref2[1];\n\n        if (authToken && authToken.accessToken) {\n          queryStringParameters['auth'] = authToken.accessToken;\n        }\n\n        if (appCheckToken && appCheckToken.token) {\n          queryStringParameters['ac'] = appCheckToken.token;\n        }\n\n        var url = (_this35.repoInfo_.secure ? 'https://' : 'http://') + _this35.repoInfo_.host + pathString + '?' + 'ns=' + _this35.repoInfo_.namespace + querystring(queryStringParameters);\n\n        _this35.log_('Sending REST request for ' + url);\n\n        var xhr = new XMLHttpRequest();\n\n        xhr.onreadystatechange = function () {\n          if (callback && xhr.readyState === 4) {\n            _this35.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n\n            var res = null;\n\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n              }\n\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n              }\n\n              callback(xhr.status);\n            }\n\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url,\n        /*asynchronous=*/\n        true);\n        xhr.send();\n      });\n    }\n  }], [{\n    key: \"getListenId_\",\n    value: function getListenId_(query, tag) {\n      if (tag !== undefined) {\n        return 'tag$' + tag;\n      } else {\n        assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n        return query._path.toString();\n      }\n    }\n  }]);\n\n  return ReadonlyRestClient;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\n\n\nvar SnapshotHolder = /*#__PURE__*/function () {\n  function SnapshotHolder() {\n    _classCallCheck(this, SnapshotHolder);\n\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  _createClass(SnapshotHolder, [{\n    key: \"getNode\",\n    value: function getNode(path) {\n      return this.rootNode_.getChild(path);\n    }\n  }, {\n    key: \"updateSnapshot\",\n    value: function updateSnapshot(path, newSnapshotNode) {\n      this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n    }\n  }]);\n\n  return SnapshotHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\n\n\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    var childKey = pathGetFront(path);\n\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    var _child2 = sparseSnapshotTree.children.get(childKey);\n\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(_child2, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\n\n\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        var value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      var childKey = pathGetFront(path);\n      path = pathPopFront(path);\n\n      if (sparseSnapshotTree.children.has(childKey)) {\n        var safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\n\n\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, function (key, tree) {\n      var path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\n\n\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach(function (tree, key) {\n    func(key, tree);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\n\n\nvar StatsListener = /*#__PURE__*/function () {\n  function StatsListener(collection_) {\n    _classCallCheck(this, StatsListener);\n\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  _createClass(StatsListener, [{\n    key: \"get\",\n    value: function get() {\n      var newStats = this.collection_.get();\n      var delta = Object.assign({}, newStats);\n\n      if (this.last_) {\n        each(this.last_, function (stat, value) {\n          delta[stat] = delta[stat] - value;\n        });\n      }\n\n      this.last_ = newStats;\n      return delta;\n    }\n  }]);\n\n  return StatsListener;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nvar StatsReporter = /*#__PURE__*/function () {\n  function StatsReporter(collection, server_) {\n    _classCallCheck(this, StatsReporter);\n\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  _createClass(StatsReporter, [{\n    key: \"reportStats_\",\n    value: function reportStats_() {\n      var _this36 = this;\n\n      var stats = this.statsListener_.get();\n      var reportedStats = {};\n      var haveStatsToReport = false;\n      each(stats, function (stat, value) {\n        if (value > 0 && contains(_this36.statsToReport_, stat)) {\n          reportedStats[stat] = value;\n          haveStatsToReport = true;\n        }\n      });\n\n      if (haveStatsToReport) {\n        this.server_.reportStats(reportedStats);\n      } // queue our next run.\n\n\n      setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    }\n  }]);\n\n  return StatsReporter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: queryId,\n    tagged: true\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AckUserWrite = /*#__PURE__*/function () {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  function AckUserWrite(\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  affectedTree,\n  /** @inheritDoc */\n  revert) {\n    _classCallCheck(this, AckUserWrite);\n\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = newOperationSourceUser();\n  }\n\n  _createClass(AckUserWrite, [{\n    key: \"operationForChild\",\n    value: function operationForChild(childName) {\n      if (!pathIsEmpty(this.path)) {\n        assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n        return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n      } else if (this.affectedTree.value != null) {\n        assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n        return this;\n      } else {\n        var childTree = this.affectedTree.subtree(new Path(childName));\n        return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n      }\n    }\n  }]);\n\n  return AckUserWrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ListenComplete = /*#__PURE__*/function () {\n  function ListenComplete(source, path) {\n    _classCallCheck(this, ListenComplete);\n\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  _createClass(ListenComplete, [{\n    key: \"operationForChild\",\n    value: function operationForChild(childName) {\n      if (pathIsEmpty(this.path)) {\n        return new ListenComplete(this.source, newEmptyPath());\n      } else {\n        return new ListenComplete(this.source, pathPopFront(this.path));\n      }\n    }\n  }]);\n\n  return ListenComplete;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Overwrite = /*#__PURE__*/function () {\n  function Overwrite(source, path, snap) {\n    _classCallCheck(this, Overwrite);\n\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  _createClass(Overwrite, [{\n    key: \"operationForChild\",\n    value: function operationForChild(childName) {\n      if (pathIsEmpty(this.path)) {\n        return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n      } else {\n        return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n      }\n    }\n  }]);\n\n  return Overwrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Merge = /*#__PURE__*/function () {\n  function Merge(\n  /** @inheritDoc */\n  source,\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  children) {\n    _classCallCheck(this, Merge);\n\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n\n  _createClass(Merge, [{\n    key: \"operationForChild\",\n    value: function operationForChild(childName) {\n      if (pathIsEmpty(this.path)) {\n        var childTree = this.children.subtree(new Path(childName));\n\n        if (childTree.isEmpty()) {\n          // This child is unaffected\n          return null;\n        } else if (childTree.value) {\n          // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n          return new Overwrite(this.source, newEmptyPath(), childTree.value);\n        } else {\n          // This is a merge at a deeper level\n          return new Merge(this.source, newEmptyPath(), childTree);\n        }\n      } else {\n        assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n        return new Merge(this.source, pathPopFront(this.path), this.children);\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n    }\n  }]);\n\n  return Merge;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nvar CacheNode = /*#__PURE__*/function () {\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    _classCallCheck(this, CacheNode);\n\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n\n\n  _createClass(CacheNode, [{\n    key: \"isFullyInitialized\",\n    value: function isFullyInitialized() {\n      return this.fullyInitialized_;\n    }\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\n\n  }, {\n    key: \"isFiltered\",\n    value: function isFiltered() {\n      return this.filtered_;\n    }\n  }, {\n    key: \"isCompleteForPath\",\n    value: function isCompleteForPath(path) {\n      if (pathIsEmpty(path)) {\n        return this.isFullyInitialized() && !this.filtered_;\n      }\n\n      var childKey = pathGetFront(path);\n      return this.isCompleteForChild(childKey);\n    }\n  }, {\n    key: \"isCompleteForChild\",\n    value: function isCompleteForChild(key) {\n      return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode() {\n      return this.node_;\n    }\n  }]);\n\n  return CacheNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\n\n\nvar EventGenerator = /*#__PURE__*/_createClass(function EventGenerator(query_) {\n  _classCallCheck(this, EventGenerator);\n\n  this.query_ = query_;\n  this.index_ = this.query_._queryParams.getIndex();\n});\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\n\n\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  var events = [];\n  var moves = [];\n  changes.forEach(function (change) {\n    if (change.type === \"child_changed\"\n    /* CHILD_CHANGED */\n    && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\"\n  /* CHILD_REMOVED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\"\n  /* CHILD_ADDED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\"\n  /* CHILD_MOVED */\n  , moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\"\n  /* CHILD_CHANGED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\"\n  /* VALUE */\n  , changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\n\n\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  var filteredChanges = changes.filter(function (change) {\n    return change.type === eventType;\n  });\n  filteredChanges.sort(function (a, b) {\n    return eventGeneratorCompareChanges(eventGenerator, a, b);\n  });\n  filteredChanges.forEach(function (change) {\n    var materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(function (registration) {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n\n  var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache: eventCache,\n    serverCache: serverCache\n  };\n}\n\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\n\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\n\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\n\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\n\nvar EmptyChildren = function EmptyChildren() {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nvar ImmutableTree = /*#__PURE__*/function () {\n  function ImmutableTree(value) {\n    var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmptyChildren();\n\n    _classCallCheck(this, ImmutableTree);\n\n    this.value = value;\n    this.children = children;\n  }\n\n  _createClass(ImmutableTree, [{\n    key: \"isEmpty\",\n    value:\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\n    function isEmpty() {\n      return this.value === null && this.children.isEmpty();\n    }\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\n\n  }, {\n    key: \"findRootMostMatchingPathAndValue\",\n    value: function findRootMostMatchingPathAndValue(relativePath, predicate) {\n      if (this.value != null && predicate(this.value)) {\n        return {\n          path: newEmptyPath(),\n          value: this.value\n        };\n      } else {\n        if (pathIsEmpty(relativePath)) {\n          return null;\n        } else {\n          var front = pathGetFront(relativePath);\n\n          var _child3 = this.children.get(front);\n\n          if (_child3 !== null) {\n            var childExistingPathAndValue = _child3.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n\n            if (childExistingPathAndValue != null) {\n              var fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n              return {\n                path: fullPath,\n                value: childExistingPathAndValue.value\n              };\n            } else {\n              return null;\n            }\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\n\n  }, {\n    key: \"findRootMostValueAndPath\",\n    value: function findRootMostValueAndPath(relativePath) {\n      return this.findRootMostMatchingPathAndValue(relativePath, function () {\n        return true;\n      });\n    }\n    /**\r\n     * @returns The subtree at the given path\r\n     */\n\n  }, {\n    key: \"subtree\",\n    value: function subtree(relativePath) {\n      if (pathIsEmpty(relativePath)) {\n        return this;\n      } else {\n        var front = pathGetFront(relativePath);\n        var childTree = this.children.get(front);\n\n        if (childTree !== null) {\n          return childTree.subtree(pathPopFront(relativePath));\n        } else {\n          return new ImmutableTree(null);\n        }\n      }\n    }\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(relativePath, toSet) {\n      if (pathIsEmpty(relativePath)) {\n        return new ImmutableTree(toSet, this.children);\n      } else {\n        var front = pathGetFront(relativePath);\n\n        var _child4 = this.children.get(front) || new ImmutableTree(null);\n\n        var newChild = _child4.set(pathPopFront(relativePath), toSet);\n\n        var newChildren = this.children.insert(front, newChild);\n        return new ImmutableTree(this.value, newChildren);\n      }\n    }\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(relativePath) {\n      if (pathIsEmpty(relativePath)) {\n        if (this.children.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(null, this.children);\n        }\n      } else {\n        var front = pathGetFront(relativePath);\n\n        var _child5 = this.children.get(front);\n\n        if (_child5) {\n          var newChild = _child5.remove(pathPopFront(relativePath));\n\n          var newChildren;\n\n          if (newChild.isEmpty()) {\n            newChildren = this.children.remove(front);\n          } else {\n            newChildren = this.children.insert(front, newChild);\n          }\n\n          if (this.value === null && newChildren.isEmpty()) {\n            return new ImmutableTree(null);\n          } else {\n            return new ImmutableTree(this.value, newChildren);\n          }\n        } else {\n          return this;\n        }\n      }\n    }\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(relativePath) {\n      if (pathIsEmpty(relativePath)) {\n        return this.value;\n      } else {\n        var front = pathGetFront(relativePath);\n\n        var _child6 = this.children.get(front);\n\n        if (_child6) {\n          return _child6.get(pathPopFront(relativePath));\n        } else {\n          return null;\n        }\n      }\n    }\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\n\n  }, {\n    key: \"setTree\",\n    value: function setTree(relativePath, newTree) {\n      if (pathIsEmpty(relativePath)) {\n        return newTree;\n      } else {\n        var front = pathGetFront(relativePath);\n\n        var _child7 = this.children.get(front) || new ImmutableTree(null);\n\n        var newChild = _child7.setTree(pathPopFront(relativePath), newTree);\n\n        var newChildren;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        return new ImmutableTree(this.value, newChildren);\n      }\n    }\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\n\n  }, {\n    key: \"fold\",\n    value: function fold(fn) {\n      return this.fold_(newEmptyPath(), fn);\n    }\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\n\n  }, {\n    key: \"fold_\",\n    value: function fold_(pathSoFar, fn) {\n      var accum = {};\n      this.children.inorderTraversal(function (childKey, childTree) {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      });\n      return fn(pathSoFar, this.value, accum);\n    }\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\n\n  }, {\n    key: \"findOnPath\",\n    value: function findOnPath(path, f) {\n      return this.findOnPath_(path, newEmptyPath(), f);\n    }\n  }, {\n    key: \"findOnPath_\",\n    value: function findOnPath_(pathToFollow, pathSoFar, f) {\n      var result = this.value ? f(pathSoFar, this.value) : false;\n\n      if (result) {\n        return result;\n      } else {\n        if (pathIsEmpty(pathToFollow)) {\n          return null;\n        } else {\n          var front = pathGetFront(pathToFollow);\n          var nextChild = this.children.get(front);\n\n          if (nextChild) {\n            return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"foreachOnPath\",\n    value: function foreachOnPath(path, f) {\n      return this.foreachOnPath_(path, newEmptyPath(), f);\n    }\n  }, {\n    key: \"foreachOnPath_\",\n    value: function foreachOnPath_(pathToFollow, currentRelativePath, f) {\n      if (pathIsEmpty(pathToFollow)) {\n        return this;\n      } else {\n        if (this.value) {\n          f(currentRelativePath, this.value);\n        }\n\n        var front = pathGetFront(pathToFollow);\n        var nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n        } else {\n          return new ImmutableTree(null);\n        }\n      }\n    }\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\n\n  }, {\n    key: \"foreach\",\n    value: function foreach(f) {\n      this.foreach_(newEmptyPath(), f);\n    }\n  }, {\n    key: \"foreach_\",\n    value: function foreach_(currentRelativePath, f) {\n      this.children.inorderTraversal(function (childName, childTree) {\n        childTree.foreach_(pathChild(currentRelativePath, childName), f);\n      });\n\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n    }\n  }, {\n    key: \"foreachChild\",\n    value: function foreachChild(f) {\n      this.children.inorderTraversal(function (childName, childTree) {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      });\n    }\n  }], [{\n    key: \"fromObject\",\n    value: function fromObject(obj) {\n      var tree = new ImmutableTree(null);\n      each(obj, function (childPath, childSnap) {\n        tree = tree.set(new Path(childPath), childSnap);\n      });\n      return tree;\n    }\n  }]);\n\n  return ImmutableTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\n\n\nvar CompoundWrite = /*#__PURE__*/function () {\n  function CompoundWrite(writeTree_) {\n    _classCallCheck(this, CompoundWrite);\n\n    this.writeTree_ = writeTree_;\n  }\n\n  _createClass(CompoundWrite, null, [{\n    key: \"empty\",\n    value: function empty() {\n      return new CompoundWrite(new ImmutableTree(null));\n    }\n  }]);\n\n  return CompoundWrite;\n}();\n\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      var rootMostPath = rootmost.path;\n      var value = rootmost.value;\n      var relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      var subtree = new ImmutableTree(node);\n\n      var _newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n\n      return new CompoundWrite(_newWriteTree);\n    }\n  }\n}\n\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  var newWrite = compoundWrite;\n  each(updates, function (childKey, node) {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\n\n\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    var _newWriteTree2 = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n\n    return new CompoundWrite(_newWriteTree2);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\n\n\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\n\n\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\n\n\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  var children = [];\n  var node = compoundWrite.writeTree_.value;\n\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n\n  return children;\n}\n\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    var shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\n\n\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\n\n\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    var priorityWrite = null;\n    writeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n\n    return node;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\n\n\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\n\n\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n\n  if (visible === undefined) {\n    visible = true;\n  }\n\n  writeTree.allWrites.push({\n    path: path,\n    snap: snap,\n    writeId: writeId,\n    visible: visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\n\n\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path: path,\n    children: changedChildren,\n    writeId: writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\n\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (var i = 0; i < writeTree.allWrites.length; i++) {\n    var record = writeTree.allWrites[i];\n\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\n\n\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  var idx = writeTree.allWrites.findIndex(function (s) {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  var writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  var removedWriteWasVisible = writeToRemove.visible;\n  var removedWriteOverlapsWithOtherWrites = false;\n  var i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    var currentWrite = writeTree.allWrites[i];\n\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      var children = writeToRemove.children;\n      each(children, function (childName) {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (var childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\n\n\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\n\n\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\n\n\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  var compoundWrite = CompoundWrite.empty();\n\n  for (var i = 0; i < writes.length; ++i) {\n    var write = writes[i]; // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n    if (filter(write)) {\n      var writePath = write.path;\n      var relativePath = void 0;\n\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            var _child8 = safeGet(write.children, pathGetFront(relativePath));\n\n            if (_child8) {\n              // There exists a child in this node that matches the root path\n              var deepNode = _child8.getChild(pathPopFront(relativePath));\n\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\n\n\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      var subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        var filter = function filter(write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n\n        var mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n\n        var _layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n\n        return compoundWriteApply(mergeAtPath, _layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\n\n\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  var completeChildren = ChildrenNode.EMPTY_NODE;\n  var topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    }); // Add any complete children we have from the set\n\n    compoundWriteGetCompleteChildren(merge).forEach(function (namedNode) {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    var _merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n    compoundWriteGetCompleteChildren(_merge).forEach(function (namedNode) {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\n\n\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  var path = pathChild(treePath, childPath);\n\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\n\n\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  var path = pathChild(treePath, childKey);\n  var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\n\n\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\n\n\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  var toIterate;\n  var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  var shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n\n  toIterate = toIterate.withIndex(index);\n\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    var nodes = [];\n    var cmp = index.getCompare();\n    var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    var next = iter.getNext();\n\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n\n      next = iter.getNext();\n    }\n\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\n\n\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\n\n\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\n\n\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\n\n\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\n\n\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\n\n\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\n\n\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\n\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree: writeTree\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ChildChangeAccumulator = /*#__PURE__*/function () {\n  function ChildChangeAccumulator() {\n    _classCallCheck(this, ChildChangeAccumulator);\n\n    this.changeMap = new Map();\n  }\n\n  _createClass(ChildChangeAccumulator, [{\n    key: \"trackChildChange\",\n    value: function trackChildChange(change) {\n      var type = change.type;\n      var childKey = change.childName;\n      assert(type === \"child_added\"\n      /* CHILD_ADDED */\n      || type === \"child_changed\"\n      /* CHILD_CHANGED */\n      || type === \"child_removed\"\n      /* CHILD_REMOVED */\n      , 'Only child changes supported for tracking');\n      assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n      var oldChange = this.changeMap.get(childKey);\n\n      if (oldChange) {\n        var oldType = oldChange.type;\n\n        if (type === \"child_added\"\n        /* CHILD_ADDED */\n        && oldType === \"child_removed\"\n        /* CHILD_REMOVED */\n        ) {\n          this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n        } else if (type === \"child_removed\"\n        /* CHILD_REMOVED */\n        && oldType === \"child_added\"\n        /* CHILD_ADDED */\n        ) {\n          this.changeMap.delete(childKey);\n        } else if (type === \"child_removed\"\n        /* CHILD_REMOVED */\n        && oldType === \"child_changed\"\n        /* CHILD_CHANGED */\n        ) {\n          this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n        } else if (type === \"child_changed\"\n        /* CHILD_CHANGED */\n        && oldType === \"child_added\"\n        /* CHILD_ADDED */\n        ) {\n          this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n        } else if (type === \"child_changed\"\n        /* CHILD_CHANGED */\n        && oldType === \"child_changed\"\n        /* CHILD_CHANGED */\n        ) {\n          this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n        } else {\n          throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n        }\n      } else {\n        this.changeMap.set(childKey, change);\n      }\n    }\n  }, {\n    key: \"getChanges\",\n    value: function getChanges() {\n      return Array.from(this.changeMap.values());\n    }\n  }]);\n\n  return ChildChangeAccumulator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\n\nvar NoCompleteChildSource_ = /*#__PURE__*/function () {\n  function NoCompleteChildSource_() {\n    _classCallCheck(this, NoCompleteChildSource_);\n  }\n\n  _createClass(NoCompleteChildSource_, [{\n    key: \"getCompleteChild\",\n    value: function getCompleteChild(childKey) {\n      return null;\n    }\n  }, {\n    key: \"getChildAfterChild\",\n    value: function getChildAfterChild(index, child, reverse) {\n      return null;\n    }\n  }]);\n\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n */\n\n\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\n\nvar WriteTreeCompleteChildSource = /*#__PURE__*/function () {\n  function WriteTreeCompleteChildSource(writes_, viewCache_) {\n    var optCompleteServerCache_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, WriteTreeCompleteChildSource);\n\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n\n  _createClass(WriteTreeCompleteChildSource, [{\n    key: \"getCompleteChild\",\n    value: function getCompleteChild(childKey) {\n      var node = this.viewCache_.eventCache;\n\n      if (node.isCompleteForChild(childKey)) {\n        return node.getNode().getImmediateChild(childKey);\n      } else {\n        var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n        return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n      }\n    }\n  }, {\n    key: \"getChildAfterChild\",\n    value: function getChildAfterChild(index, child, reverse) {\n      var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n      var nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n\n      if (nodes.length === 0) {\n        return null;\n      } else {\n        return nodes[0];\n      }\n    }\n  }]);\n\n  return WriteTreeCompleteChildSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newViewProcessor(filter) {\n  return {\n    filter: filter\n  };\n}\n\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\n\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  var accumulator = new ChildChangeAccumulator();\n  var newViewCache, filterServerNode;\n\n  if (operation.type === OperationType.OVERWRITE) {\n    var overwrite = operation;\n\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    var merge = operation;\n\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    var ackUserWrite = operation;\n\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n\n  var changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes: changes\n  };\n}\n\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  var eventSnap = newViewCache.eventCache;\n\n  if (eventSnap.isFullyInitialized()) {\n    var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    var oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  var oldEventSnap = viewCache.eventCache;\n\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    var newEventCache, serverNode;\n\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        var serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        var completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        var completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      var childKey = pathGetFront(changePath);\n\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        var oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode(); // we might have overwrites for this priority\n\n        var updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        var childChangePath = pathPopFront(changePath); // update child\n\n        var newEventChild;\n\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          var eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  var oldServerSnap = oldViewCache.serverCache;\n  var newServerCache;\n  var serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    var childKey = pathGetFront(changePath);\n\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n\n    var childChangePath = pathPopFront(changePath);\n    var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n\n  var newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\n\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  var oldEventSnap = oldViewCache.eventCache;\n  var newViewCache, newEventCache;\n  var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    var childKey = pathGetFront(changePath);\n\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      var childChangePath = pathPopFront(changePath);\n      var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      var newChild;\n\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        var childNode = source.getCompleteChild(childKey);\n\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n\n      if (!oldChild.equals(newChild)) {\n        var newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  var curViewCache = viewCache;\n  changedChildren.foreach(function (relativePath, childNode) {\n    var writePath = pathChild(path, relativePath);\n\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach(function (relativePath, childNode) {\n    var writePath = pathChild(path, relativePath);\n\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach(function (relativePath, childNode) {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n\n\n  var curViewCache = viewCache;\n  var viewMergeTree;\n\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n\n  var serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n    if (serverNode.hasChild(childKey)) {\n      var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n    var isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === undefined;\n\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  } // Only filter server node if it is currently filtered\n\n\n  var filterServerNode = viewCache.serverCache.isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n\n  var serverCache = viewCache.serverCache;\n\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      var changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    var _changedChildren = new ImmutableTree(null);\n\n    affectedTree.foreach(function (mergePath, value) {\n      var serverCachePath = pathChild(ackPath, mergePath);\n\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        _changedChildren = _changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, _changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\n\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  var oldServerNode = viewCache.serverCache;\n  var newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\n\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  var complete;\n\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    var oldEventCache = viewCache.eventCache.getNode();\n    var newEventCache;\n\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      var newNode;\n\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        var serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      var childKey = pathGetFront(path);\n      var newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\n\n\nvar View = /*#__PURE__*/function () {\n  function View(query_, initialViewCache) {\n    _classCallCheck(this, View);\n\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_._queryParams;\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    var initialServerCache = initialViewCache.serverCache;\n    var initialEventCache = initialViewCache.eventCache; // Don't filter server node with other filter than index, wait for tagged listen\n\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  _createClass(View, [{\n    key: \"query\",\n    get: function get() {\n      return this.query_;\n    }\n  }]);\n\n  return View;\n}();\n\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\n\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nfunction viewGetCompleteServerCache(view, path) {\n  var cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n\n  return null;\n}\n\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\n\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\n\n\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  var cancelEvents = [];\n\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    var path = view.query._path;\n    view.eventRegistrations_.forEach(function (registration) {\n      var maybeEvent = registration.createCancelEvent(cancelError, path);\n\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    var remaining = [];\n\n    for (var i = 0; i < view.eventRegistrations_.length; ++i) {\n      var existing = view.eventRegistrations_[i];\n\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\n\n\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n\n  var oldViewCache = view.viewCache_;\n  var result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\n\nfunction viewGetInitialEvents(view, registration) {\n  var eventSnap = view.viewCache_.eventCache;\n  var initialChanges = [];\n\n  if (!eventSnap.getNode().isLeafNode()) {\n    var eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\n\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  var registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\nvar SyncPoint = /*#__PURE__*/_createClass(function SyncPoint() {\n  _classCallCheck(this, SyncPoint);\n\n  /**\r\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n   * queryId and the value is the View for that query.\r\n   *\r\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n   */\n  this.views = new Map();\n});\n\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\n\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\n\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\n\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  var queryId = operation.source.queryId;\n\n  if (queryId !== null) {\n    var view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    var events = [];\n\n    var _iterator5 = _createForOfIteratorHelper(syncPoint.views.values()),\n        _step4;\n\n    try {\n      for (_iterator5.s(); !(_step4 = _iterator5.n()).done;) {\n        var _view = _step4.value;\n        events = events.concat(viewApplyOperation(_view, operation, writesCache, optCompleteServerCache));\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  var queryId = query._queryIdentifier;\n  var view = syncPoint.views.get(queryId);\n\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    var eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    var eventCacheComplete = false;\n\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n\n    var viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  var view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  } // This is guaranteed to exist now, we just created anything that was missing\n\n\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\n\n\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  var queryId = query._queryIdentifier;\n  var removed = [];\n  var cancelEvents = [];\n  var hadCompleteView = syncPointHasCompleteView(syncPoint);\n\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    var _iterator6 = _createForOfIteratorHelper(syncPoint.views.entries()),\n        _step5;\n\n    try {\n      for (_iterator6.s(); !(_step5 = _iterator6.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n            viewQueryId = _step5$value[0],\n            view = _step5$value[1];\n\n        cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n        if (viewIsEmpty(view)) {\n          syncPoint.views.delete(viewQueryId); // We'll deal with complete views later.\n\n          if (!view.query._queryParams.loadsAllData()) {\n            removed.push(view.query);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  } else {\n    // remove the callback from the specific view.\n    var _view2 = syncPoint.views.get(queryId);\n\n    if (_view2) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(_view2, eventRegistration, cancelError));\n\n      if (viewIsEmpty(_view2)) {\n        syncPoint.views.delete(queryId); // We'll deal with complete views later.\n\n        if (!_view2.query._queryParams.loadsAllData()) {\n          removed.push(_view2.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n\n  return {\n    removed: removed,\n    events: cancelEvents\n  };\n}\n\nfunction syncPointGetQueryViews(syncPoint) {\n  var result = [];\n\n  var _iterator7 = _createForOfIteratorHelper(syncPoint.views.values()),\n      _step6;\n\n  try {\n    for (_iterator7.s(); !(_step6 = _iterator7.n()).done;) {\n      var view = _step6.value;\n\n      if (!view.query._queryParams.loadsAllData()) {\n        result.push(view);\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\n\n\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  var serverCache = null;\n\n  var _iterator8 = _createForOfIteratorHelper(syncPoint.views.values()),\n      _step7;\n\n  try {\n    for (_iterator8.s(); !(_step7 = _iterator8.n()).done;) {\n      var view = _step7.value;\n      serverCache = serverCache || viewGetCompleteServerCache(view, path);\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  return serverCache;\n}\n\nfunction syncPointViewForQuery(syncPoint, query) {\n  var params = query._queryParams;\n\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    var queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nfunction syncPointGetCompleteView(syncPoint) {\n  var _iterator9 = _createForOfIteratorHelper(syncPoint.views.values()),\n      _step8;\n\n  try {\n    for (_iterator9.s(); !(_step8 = _iterator9.n()).done;) {\n      var view = _step8.value;\n\n      if (view.query._queryParams.loadsAllData()) {\n        return view;\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar referenceConstructor;\n\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\n\n\nvar syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\n\nvar SyncTree = /*#__PURE__*/_createClass(\n/**\r\n * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n *   to server data.\r\n */\nfunction SyncTree(listenProvider_) {\n  _classCallCheck(this, SyncTree);\n\n  this.listenProvider_ = listenProvider_;\n  /**\r\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n   */\n\n  this.syncPointTree_ = new ImmutableTree(null);\n  /**\r\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n   */\n\n  this.pendingWriteTree_ = newWriteTree();\n  this.tagToQueryMap = new Map();\n  this.queryToTagMap = new Map();\n});\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  var changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeAckUserWrite(syncTree, writeId) {\n  var revert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  var needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    var affectedTree = new ImmutableTree(null);\n\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, function (pathString) {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  var changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n        queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\n\n\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  var path = query._path;\n  var maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    var removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    var removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n\n    var removingDefault = -1 !== removed.findIndex(function (query) {\n      return query._queryParams.loadsAllData();\n    });\n    var covered = syncTree.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n      return syncPointHasCompleteView(parentSyncPoint);\n    });\n\n    if (removingDefault && !covered) {\n      var subtree = syncTree.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        var newViews = syncTreeCollectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n        for (var i = 0; i < newViews.length; ++i) {\n          var view = newViews[i],\n              newQuery = view.query;\n          var listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\n        }\n      }\n    } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        var defaultTag = null;\n        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n      } else {\n        removed.forEach(function (queryToRemove) {\n          var tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n        });\n      }\n    } // Now, clear all of the tags we're tracking for the removed listens\n\n\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey != null) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n        queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n        queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    var op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  var path = query._path;\n  var serverCache = null;\n  var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n    var relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  var syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  var serverCacheComplete;\n\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    var subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild(function (childName, childSyncPoint) {\n      var completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n\n  var viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    var queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    var tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  var events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    var view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\n\n\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  var includeHiddenSets = true;\n  var writeTree = syncTree.pendingWriteTree_;\n  var serverCache = syncTree.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n    var relativePath = newRelativePath(pathSoFar, path);\n    var serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\n\nfunction syncTreeGetServerValue(syncTree, query) {\n  var path = query._path;\n  var serverCache = null; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n    var relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  var syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  var serverCacheComplete = serverCache != null;\n  var serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  var view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\n\n\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_,\n  /*serverCache=*/\n  null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\n\n\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    var syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    var events = [];\n    var childName = pathGetFront(operation.path);\n    var childOperation = operation.operationForChild(childName);\n    var childTree = syncPointTree.children.get(childName);\n\n    if (childTree && childOperation) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\n\n\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  var syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  var events = [];\n  syncPointTree.children.inorderTraversal(function (childName, childTree) {\n    var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    var childWritesCache = writeTreeRefChild(writesCache, childName);\n    var childOperation = operation.operationForChild(childName);\n\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  var query = view.query;\n  var tag = syncTreeTagForQuery_(syncTree, query);\n  return {\n    hashFn: function hashFn() {\n      var cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: function onComplete(status) {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        var _error2 = errorForServerCode(status, query);\n\n        return syncTreeRemoveEventRegistration(syncTree, query,\n        /*eventRegistration*/\n        null, _error2);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\n\n\nfunction syncTreeTagForQuery_(syncTree, query) {\n  var queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\n\n\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\n\n\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\n\n\nfunction syncTreeParseQueryKey_(queryKey) {\n  var splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\n\n\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  var syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\n\n\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      var completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      var views = [];\n\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n\n      each(childMap, function (_key, childViews) {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\n\n\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (var j = 0; j < queries.length; ++j) {\n    var removedQuery = queries[j];\n\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      var removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      var removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\n\n\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\n\n\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  var path = query._path;\n  var tag = syncTreeTagForQuery_(syncTree, query);\n  var listener = syncTreeCreateListenerForView_(syncTree, view);\n  var events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  var subtree = syncTree.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        var queries = [];\n\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(function (view) {\n            return view.query;\n          }));\n        }\n\n        each(childMap, function (_key, childQueries) {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n\n    for (var i = 0; i < queriesToStop.length; ++i) {\n      var queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\n    }\n  }\n\n  return events;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ExistingValueProvider = /*#__PURE__*/function () {\n  function ExistingValueProvider(node_) {\n    _classCallCheck(this, ExistingValueProvider);\n\n    this.node_ = node_;\n  }\n\n  _createClass(ExistingValueProvider, [{\n    key: \"getImmediateChild\",\n    value: function getImmediateChild(childName) {\n      var child = this.node_.getImmediateChild(childName);\n      return new ExistingValueProvider(child);\n    }\n  }, {\n    key: \"node\",\n    value: function node() {\n      return this.node_;\n    }\n  }]);\n\n  return ExistingValueProvider;\n}();\n\nvar DeferredValueProvider = /*#__PURE__*/function () {\n  function DeferredValueProvider(syncTree, path) {\n    _classCallCheck(this, DeferredValueProvider);\n\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  _createClass(DeferredValueProvider, [{\n    key: \"getImmediateChild\",\n    value: function getImmediateChild(childName) {\n      var childPath = pathChild(this.path_, childName);\n      return new DeferredValueProvider(this.syncTree_, childPath);\n    }\n  }, {\n    key: \"node\",\n    value: function node() {\n      return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n    }\n  }]);\n\n  return DeferredValueProvider;\n}();\n/**\r\n * Generate placeholders for deferred values.\r\n */\n\n\nvar generateWithValues = function generateWithValues(values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\n\n\nvar resolveDeferredLeafValue = function resolveDeferredLeafValue(value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nvar resolveScalarDeferredValue = function resolveScalarDeferredValue(op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nvar resolveComplexDeferredValue = function resolveComplexDeferredValue(op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n\n  var delta = op['increment'];\n\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  var existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount\n\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  var leaf = existingNode;\n  var existingVal = leaf.getValue();\n\n  if (typeof existingVal !== 'number') {\n    return delta;\n  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n\n\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\n\n\nvar resolveDeferredValueTree = function resolveDeferredValueTree(path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\n\n\nvar resolveDeferredValueSnapshot = function resolveDeferredValueSnapshot(node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\n\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  var newNode;\n\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nvar Tree = /*#__PURE__*/_createClass(\n/**\r\n * @param name - Optional name of the node.\r\n * @param parent - Optional parent node.\r\n * @param node - Optional node to wrap.\r\n */\nfunction Tree() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    children: {},\n    childCount: 0\n  };\n\n  _classCallCheck(this, Tree);\n\n  this.name = name;\n  this.parent = parent;\n  this.node = node;\n});\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\n\n\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  var child = tree,\n      next = pathGetFront(path);\n\n  while (next !== null) {\n    var childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\n\n\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\n\n\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\n\n\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\n\n\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\n\n\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, function (child, childTree) {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\n\n\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, function (child) {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\n\n\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  var node = includeSelf ? tree : tree.parent;\n\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n\n    node = node.parent;\n  }\n\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\n\n\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\n\n\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\n\n\nfunction treeUpdateChild(tree, childName, child) {\n  var childEmpty = treeIsEmpty(child);\n  var childExists = contains(tree.node.children, childName);\n\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n */\n\n\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\n\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\n\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nvar isValidKey = function isValidKey(key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n\nvar isValidPathString = function isValidPathString(pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n\nvar isValidRootPathString = function isValidRootPathString(pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nvar isValidPriority = function isValidPriority(priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\n\n\nvar validateFirebaseDataArg = function validateFirebaseDataArg(fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\n\n\nvar validateFirebaseData = function validateFirebaseData(errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    var hasDotValue = false;\n    var hasActualChild = false;\n    each(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\n\n\nvar validateFirebaseMergePaths = function validateFirebaseMergePaths(errorPrefix, mergePaths) {\n  var i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = pathSlice(curPath);\n\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(pathCompare);\n  var prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\n\n\nvar validateFirebaseMergeDataArg = function validateFirebaseMergeDataArg(fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  var errorPrefix$1 = errorPrefix(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n\n  var mergePaths = [];\n  each(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\n\nvar validatePriority = function validatePriority(fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  } // Special case to allow importing data with a .sv.\n\n\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\n\nvar validateKey = function validateKey(fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\r\n * @internal\r\n */\n\n\nvar validatePathString = function validatePathString(fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\n\nvar validateRootPathString = function validateRootPathString(fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\r\n * @internal\r\n */\n\n\nvar validateWritablePath = function validateWritablePath(fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nvar validateUrl = function validateUrl(fnName, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\n\n\nvar EventQueue = /*#__PURE__*/_createClass(function EventQueue() {\n  _classCallCheck(this, EventQueue);\n\n  this.eventLists_ = [];\n  /**\r\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n   */\n\n  this.recursionDepth_ = 0;\n});\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\n\n\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  var currList = null;\n\n  for (var i = 0; i < eventDataList.length; i++) {\n    var data = eventDataList[i];\n    var path = data.getPath();\n\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = {\n        events: [],\n        path: path\n      };\n    }\n\n    currList.events.push(data);\n  }\n\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\n\n\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {\n    return pathEquals(eventPath, path);\n  });\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\n\n\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {\n    return pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath);\n  });\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  var sentAll = true;\n\n  for (var i = 0; i < eventQueue.eventLists_.length; i++) {\n    var eventList = eventQueue.eventLists_[i];\n\n    if (eventList) {\n      var eventPath = eventList.path;\n\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\n\n\nfunction eventListRaise(eventList) {\n  for (var i = 0; i < eventList.events.length; i++) {\n    var eventData = eventList.events[i];\n\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      var eventFn = eventData.getEventRunner();\n\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n\n      exceptionGuard(eventFn);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\n\nvar MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\n\nvar Repo = /*#__PURE__*/function () {\n  function Repo(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    _classCallCheck(this, Repo);\n\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n\n    this.transactionQueueTree_ = new Tree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null; // This key is intentionally not updated if RepoInfo is later changed or replaced\n\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  _createClass(Repo, [{\n    key: \"toString\",\n    value: function toString() {\n      return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n    }\n  }]);\n\n  return Repo;\n}();\n\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, function (pathString, data, isMerge, tag) {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n    setTimeout(function () {\n      return repoOnConnectStatus(repo,\n      /* connectStatus= */\n      true);\n    }, 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, function (pathString, data, isMerge, tag) {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, function (connectStatus) {\n      repoOnConnectStatus(repo, connectStatus);\n    }, function (updates) {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(function (token) {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(function (result) {\n    repo.server_.refreshAppCheckToken(result.token);\n  }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, function () {\n    return new StatsReporter(repo.stats_, repo.server_);\n  }); // Used for .info.\n\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: function startListening(query, tag, currentHashFn, onComplete) {\n      var infoEvents = [];\n      var node = repo.infoData_.getNode(query._path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(function () {\n          onComplete('ok');\n        }, 0);\n      }\n\n      return infoEvents;\n    },\n    stopListening: function stopListening() {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: function startListening(query, tag, currentHashFn, onComplete) {\n      repo.server_.listen(query, currentHashFn, tag, function (status, data) {\n        var events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      }); // No synchronous events for network-backed sync trees\n\n      return [];\n    },\n    stopListening: function stopListening(query, tag) {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\n\n\nfunction repoServerTime(repo) {\n  var offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  var offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\n\n\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\n\n\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  var path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  var events = [];\n\n  if (tag) {\n    if (isMerge) {\n      var taggedChildren = map(data, function (raw) {\n        return nodeFromJSON(raw);\n      });\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      var taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    var changedChildren = map(data, function (raw) {\n      return nodeFromJSON(raw);\n    });\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    var snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n\n  var affectedPath = path;\n\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, function (key, value) {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo, pathString, value) {\n  var path = new Path('/.info/' + pathString);\n  var newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  var events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\n\n\nfunction repoGetValue(repo, query) {\n  // Only active queries are cached. There is no persisted cache.\n  var cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n\n  return repo.server_.get(query).then(function (payload) {\n    var node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    var events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n    return Promise.resolve(node);\n  }, function (err) {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\n\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n\n  var serverValues = repoGenerateServerValues(repo);\n  var newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  var existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  var writeId = repoGetNextWriteId(repo);\n  var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val(\n  /*export=*/\n  true), function (status, errorReason) {\n    var success = status === 'ok';\n\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n\n    var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  var affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath); // We queued the events above, so just flush the queue here\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  }); // Start with our existing data and merge each child into it.\n\n  var empty = true;\n  var serverValues = repoGenerateServerValues(repo);\n  var changedChildren = {};\n  each(childrenToMerge, function (changedKey, changedValue) {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n\n  if (!empty) {\n    var writeId = repoGetNextWriteId(repo);\n    var events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n      var success = status === 'ok';\n\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n\n      var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, function (changedPath) {\n      var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    }); // We queued the events above, so just flush the queue here\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\n\n\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  var serverValues = repoGenerateServerValues(repo);\n  var resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), function (path, node) {\n    var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  var events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), function (path, snap) {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    var affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  var newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  var newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n    if (status === 'ok') {\n      each(childrenToMerge, function (childName, childNode) {\n        var newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  var events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  var events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nfunction repoLog(repo) {\n  var prefix = '';\n\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n\n  for (var _len6 = arguments.length, varArgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n    varArgs[_key7 - 1] = arguments[_key7];\n  }\n\n  log.apply(void 0, [prefix].concat(varArgs));\n}\n\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(function () {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        var code = (status || 'error').toUpperCase();\n        var message = code;\n\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        var _error3 = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        _error3.code = code;\n        callback(_error3);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\n\n\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path); // Initialize transaction.\n\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  var currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = 0\n    /* RUN */\n    ;\n    var queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    var nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n\n    var priorityForNode;\n\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    var serverValues = repoGenerateServerValues(repo);\n    var newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\n\n\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\n\n\nfunction repoSendReadyTransactions(repo) {\n  var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : repo.transactionQueueTree_;\n\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    var queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === 0;\n    }\n    /* RUN */\n    ); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, function (childNode) {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\n\n\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = repoGetLatestState(repo, path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    assert(txn.status === 0\n    /* RUN */\n    , 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1\n    /* SENT */\n    ;\n    txn.retryCount++;\n    var relativePath = newRelativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /** @type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path; // Send the put.\n\n  repo.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n    var events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      var callbacks = [];\n\n      var _loop3 = function _loop3(_i5) {\n        queue[_i5].status = 2\n        /* COMPLETED */\n        ;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[_i5].currentWriteId));\n\n        if (queue[_i5].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(function () {\n            return queue[_i5].onComplete(null, true, queue[_i5].currentOutputSnapshotResolved);\n          });\n        }\n\n        queue[_i5].unwatcher();\n      };\n\n      for (var _i5 = 0; _i5 < queue.length; _i5++) {\n        _loop3(_i5);\n      } // Now remove the completed transactions.\n\n\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path)); // There may be pending transactions that we can now send.\n\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events); // Finally, trigger onComplete callbacks.\n\n      for (var _i6 = 0; _i6 < callbacks.length; _i6++) {\n        exceptionGuard(callbacks[_i6]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var _i7 = 0; _i7 < queue.length; _i7++) {\n          if (queue[_i7].status === 3\n          /* SENT_NEEDS_ABORT */\n          ) {\n            queue[_i7].status = 4\n            /* NEEDS_ABORT */\n            ;\n          } else {\n            queue[_i7].status = 0\n            /* RUN */\n            ;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (var _i8 = 0; _i8 < queue.length; _i8++) {\n          queue[_i8].status = 4\n          /* NEEDS_ABORT */\n          ;\n          queue[_i8].abortReason = status;\n        }\n      }\n\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\n\n\nfunction repoRerunTransactions(repo, changedPath) {\n  var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  var path = treeGetPath(rootMostTransactionNode);\n  var queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\n\n\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n\n\n  var callbacks = [];\n  var events = []; // Ignore all of the sets we're going to re-run.\n\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === 0\n    /* RUN */\n    ;\n  });\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n\n  var _loop4 = function _loop4(i) {\n    var transaction = queue[i];\n    var relativePath = newRelativePath(path, transaction.path);\n    var abortTransaction = false,\n        abortReason = void 0;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === 4\n    /* NEEDS_ABORT */\n    ) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0\n    /* RUN */\n    ) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = repoGenerateServerValues(repo);\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2\n      /* COMPLETED */\n      ; // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(function () {\n            return queue[i].onComplete(null, false, queue[i].currentInputSnapshot);\n          });\n        } else {\n          callbacks.push(function () {\n            return queue[i].onComplete(new Error(abortReason), false, null);\n          });\n        }\n      }\n    }\n  };\n\n  for (var i = 0; i < queue.length; i++) {\n    _loop4(i);\n  } // Clean up completed transactions.\n\n\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (var _i9 = 0; _i9 < callbacks.length; _i9++) {\n    exceptionGuard(callbacks[_i9]);\n  } // Try to send the transaction result to the server.\n\n\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\n\n\nfunction repoGetAncestorTransactionNode(repo, path) {\n  var front; // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n\n  var transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\n\n\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  var nodeQueue = treeGetValue(node);\n\n  if (nodeQueue) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, function (child) {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\n\n\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  var queue = treeGetValue(node);\n\n  if (queue) {\n    var to = 0;\n\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2\n      /* COMPLETED */\n      ) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, function (childNode) {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\n\n\nfunction repoAbortTransactions(repo, path) {\n  var affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  var transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, function (node) {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, function (node) {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\n\n\nfunction repoAbortTransactionsOnNode(repo, node) {\n  var queue = treeGetValue(node);\n\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    var callbacks = []; // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n\n    var events = [];\n    var lastSent = -1;\n\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3\n      /* SENT_NEEDS_ABORT */\n      ) ;else if (queue[i].status === 1\n      /* SENT */\n      ) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = 3\n        /* SENT_NEEDS_ABORT */\n        ;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0\n        /* RUN */\n        , 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n\n    for (var _i10 = 0; _i10 < callbacks.length; _i10++) {\n      exceptionGuard(callbacks[_i10]);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  var results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  var _iterator10 = _createForOfIteratorHelper(queryString.split('&')),\n      _step9;\n\n  try {\n    for (_iterator10.s(); !(_step9 = _iterator10.n()).done;) {\n      var segment = _step9.value;\n\n      if (segment.length === 0) {\n        continue;\n      }\n\n      var kv = segment.split('=');\n\n      if (kv.length === 2) {\n        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n      } else {\n        warn(\"Invalid query segment '\".concat(segment, \"' in query '\").concat(queryString, \"'\"));\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return results;\n}\n\nvar parseRepoInfo = function parseRepoInfo(dataURL, nodeAdmin) {\n  var parsedUrl = parseDatabaseURL(dataURL),\n      namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly,\n    /*persistenceKey=*/\n    '',\n    /*includeNamespaceInQueryParams=*/\n    namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nvar parseDatabaseURL = function parseDatabaseURL(dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n      domain = '',\n      subdomain = '',\n      pathString = '',\n      namespace = ''; // Always default to SSL, unless otherwise specified.\n\n  var secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    var slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    var questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    var hostWithoutPort = host.slice(0, colonInd);\n\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      var dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1); // Normalize namespaces to lowercase to share storage / connection.\n\n      namespace = subdomain;\n    } // Always treat the value of the `ns` as the namespace name if it is present.\n\n\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString,\n    namespace: namespace\n  };\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\n\n\nvar DataEvent = /*#__PURE__*/function () {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    _classCallCheck(this, DataEvent);\n\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n\n  _createClass(DataEvent, [{\n    key: \"getPath\",\n    value: function getPath() {\n      var ref = this.snapshot.ref;\n\n      if (this.eventType === 'value') {\n        return ref._path;\n      } else {\n        return ref.parent._path;\n      }\n    }\n  }, {\n    key: \"getEventType\",\n    value: function getEventType() {\n      return this.eventType;\n    }\n  }, {\n    key: \"getEventRunner\",\n    value: function getEventRunner() {\n      return this.eventRegistration.getEventRunner(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n    }\n  }]);\n\n  return DataEvent;\n}();\n\nvar CancelEvent = /*#__PURE__*/function () {\n  function CancelEvent(eventRegistration, error, path) {\n    _classCallCheck(this, CancelEvent);\n\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n\n  _createClass(CancelEvent, [{\n    key: \"getPath\",\n    value: function getPath() {\n      return this.path;\n    }\n  }, {\n    key: \"getEventType\",\n    value: function getEventType() {\n      return 'cancel';\n    }\n  }, {\n    key: \"getEventRunner\",\n    value: function getEventRunner() {\n      return this.eventRegistration.getEventRunner(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.path.toString() + ':cancel';\n    }\n  }]);\n\n  return CancelEvent;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\n\n\nvar CallbackContext = /*#__PURE__*/function () {\n  function CallbackContext(snapshotCallback, cancelCallback) {\n    _classCallCheck(this, CallbackContext);\n\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n\n  _createClass(CallbackContext, [{\n    key: \"onValue\",\n    value: function onValue(expDataSnapshot, previousChildName) {\n      this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel(error) {\n      assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n      return this.cancelCallback.call(null, error);\n    }\n  }, {\n    key: \"hasCancelCallback\",\n    get: function get() {\n      return !!this.cancelCallback;\n    }\n  }, {\n    key: \"matches\",\n    value: function matches(other) {\n      return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n    }\n  }]);\n\n  return CallbackContext;\n}();\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\n\n\nvar OnDisconnect = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function OnDisconnect(_repo, _path) {\n    _classCallCheck(this, OnDisconnect);\n\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n\n\n  _createClass(OnDisconnect, [{\n    key: \"cancel\",\n    value: function cancel() {\n      var deferred = new Deferred();\n      repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(function () {}));\n      return deferred.promise;\n    }\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      validateWritablePath('OnDisconnect.remove', this._path);\n      var deferred = new Deferred();\n      repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(function () {}));\n      return deferred.promise;\n    }\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      validateWritablePath('OnDisconnect.set', this._path);\n      validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n      var deferred = new Deferred();\n      repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(function () {}));\n      return deferred.promise;\n    }\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\n\n  }, {\n    key: \"setWithPriority\",\n    value: function setWithPriority(value, priority) {\n      validateWritablePath('OnDisconnect.setWithPriority', this._path);\n      validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n      validatePriority('OnDisconnect.setWithPriority', priority, false);\n      var deferred = new Deferred();\n      repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(function () {}));\n      return deferred.promise;\n    }\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(values) {\n      validateWritablePath('OnDisconnect.update', this._path);\n      validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n      var deferred = new Deferred();\n      repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(function () {}));\n      return deferred.promise;\n    }\n  }]);\n\n  return OnDisconnect;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\n\nvar QueryImpl = /*#__PURE__*/function () {\n  /**\r\n   * @hideconstructor\r\n   */\n  function QueryImpl(_repo, _path, _queryParams, _orderByCalled) {\n    _classCallCheck(this, QueryImpl);\n\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n\n  _createClass(QueryImpl, [{\n    key: \"key\",\n    get: function get() {\n      if (pathIsEmpty(this._path)) {\n        return null;\n      } else {\n        return pathGetBack(this._path);\n      }\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return new ReferenceImpl(this._repo, this._path);\n    }\n  }, {\n    key: \"_queryIdentifier\",\n    get: function get() {\n      var obj = queryParamsGetQueryObject(this._queryParams);\n      var id = ObjectToUniqueKey(obj);\n      return id === '{}' ? 'default' : id;\n    }\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\n\n  }, {\n    key: \"_queryObject\",\n    get: function get() {\n      return queryParamsGetQueryObject(this._queryParams);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      other = getModularInstance(other);\n\n      if (!(other instanceof QueryImpl)) {\n        return false;\n      }\n\n      var sameRepo = this._repo === other._repo;\n      var samePath = pathEquals(this._path, other._path);\n      var sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n      return sameRepo && samePath && sameQueryIdentifier;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._repo.toString() + pathToUrlEncodedString(this._path);\n    }\n  }]);\n\n  return QueryImpl;\n}();\n/**\r\n * Validates that no other order by call has been made\r\n */\n\n\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\n\n\nfunction validateQueryEndpoints(params) {\n  var startNode = null;\n  var endNode = null;\n\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\n\n\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\n\n\nvar ReferenceImpl = /*#__PURE__*/function (_QueryImpl) {\n  _inherits(ReferenceImpl, _QueryImpl);\n\n  var _super10 = _createSuper(ReferenceImpl);\n\n  /** @hideconstructor */\n  function ReferenceImpl(repo, path) {\n    _classCallCheck(this, ReferenceImpl);\n\n    return _super10.call(this, repo, path, new QueryParams(), false);\n  }\n\n  _createClass(ReferenceImpl, [{\n    key: \"parent\",\n    get: function get() {\n      var parentPath = pathParent(this._path);\n      return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      var ref = this;\n\n      while (ref.parent !== null) {\n        ref = ref.parent;\n      }\n\n      return ref;\n    }\n  }]);\n\n  return ReferenceImpl;\n}(QueryImpl);\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\n\n\nvar DataSnapshot = /*#__PURE__*/function () {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  function DataSnapshot(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    _classCallCheck(this, DataSnapshot);\n\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\r\n   * Gets the priority value of the data in this `DataSnapshot`.\r\n   *\r\n   * Applications need not use priority but can order collections by\r\n   * ordinary properties (see\r\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n   * ).\r\n   */\n\n\n  _createClass(DataSnapshot, [{\n    key: \"priority\",\n    get: function get() {\n      // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n      return this._node.getPriority().val();\n    }\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\n\n  }, {\n    key: \"key\",\n    get: function get() {\n      return this.ref.key;\n    }\n    /** Returns the number of child properties of this `DataSnapshot`. */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._node.numChildren();\n    }\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\n\n  }, {\n    key: \"child\",\n    value: function child(path) {\n      var childPath = new Path(path);\n\n      var childRef = _child9(this.ref, path);\n\n      return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n    }\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\n\n  }, {\n    key: \"exists\",\n    value: function exists() {\n      return !this._node.isEmpty();\n    }\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"exportVal\",\n    value: function exportVal() {\n      return this._node.val(true);\n    }\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(action) {\n      var _this37 = this;\n\n      if (this._node.isLeafNode()) {\n        return false;\n      }\n\n      var childrenNode = this._node; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n      return !!childrenNode.forEachChild(this._index, function (key, node) {\n        return action(new DataSnapshot(node, _child9(_this37.ref, key), PRIORITY_INDEX));\n      });\n    }\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\n\n  }, {\n    key: \"hasChild\",\n    value: function hasChild(path) {\n      var childPath = new Path(path);\n      return !this._node.getChild(childPath).isEmpty();\n    }\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\n\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren() {\n      if (this._node.isLeafNode()) {\n        return false;\n      } else {\n        return !this._node.isEmpty();\n      }\n    }\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.exportVal();\n    }\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"val\",\n    value: function val() {\n      return this._node.val();\n    }\n  }]);\n\n  return DataSnapshot;\n}();\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\n\n\nfunction ref(db, path) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('ref');\n\n  return path !== undefined ? _child9(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\n\n\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('refFromURL');\n\n  var parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  var repoInfo = parsedURL.repoInfo;\n\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\n\n\nfunction _child9(parent, path) {\n  parent = getModularInstance(parent);\n\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\n\n\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\n\n\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  var now = repoServerTime(parent._repo);\n  var name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n\n  var thennablePushRef = _child9(parent, name);\n\n  var pushRef = _child9(parent, name);\n\n  var promise;\n\n  if (value != null) {\n    promise = set(pushRef, value).then(function () {\n      return pushRef;\n    });\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\n\n\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value,\n  /*priority=*/\n  null, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\n\n\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  var deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\n\n\nfunction get(query) {\n  query = getModularInstance(query);\n  return repoGetValue(query._repo, query).then(function (node) {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nvar ValueEventRegistration = /*#__PURE__*/function () {\n  function ValueEventRegistration(callbackContext) {\n    _classCallCheck(this, ValueEventRegistration);\n\n    this.callbackContext = callbackContext;\n  }\n\n  _createClass(ValueEventRegistration, [{\n    key: \"respondsTo\",\n    value: function respondsTo(eventType) {\n      return eventType === 'value';\n    }\n  }, {\n    key: \"createEvent\",\n    value: function createEvent(change, query) {\n      var index = query._queryParams.getIndex();\n\n      return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n    }\n  }, {\n    key: \"getEventRunner\",\n    value: function getEventRunner(eventData) {\n      var _this38 = this;\n\n      if (eventData.getEventType() === 'cancel') {\n        return function () {\n          return _this38.callbackContext.onCancel(eventData.error);\n        };\n      } else {\n        return function () {\n          return _this38.callbackContext.onValue(eventData.snapshot, null);\n        };\n      }\n    }\n  }, {\n    key: \"createCancelEvent\",\n    value: function createCancelEvent(error, path) {\n      if (this.callbackContext.hasCancelCallback) {\n        return new CancelEvent(this, error, path);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"matches\",\n    value: function matches(other) {\n      if (!(other instanceof ValueEventRegistration)) {\n        return false;\n      } else if (!other.callbackContext || !this.callbackContext) {\n        // If no callback specified, we consider it to match any callback.\n        return true;\n      } else {\n        return other.callbackContext.matches(this.callbackContext);\n      }\n    }\n  }, {\n    key: \"hasAnyCallback\",\n    value: function hasAnyCallback() {\n      return this.callbackContext !== null;\n    }\n  }]);\n\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of a child_x event.\r\n */\n\n\nvar ChildEventRegistration = /*#__PURE__*/function () {\n  function ChildEventRegistration(eventType, callbackContext) {\n    _classCallCheck(this, ChildEventRegistration);\n\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n\n  _createClass(ChildEventRegistration, [{\n    key: \"respondsTo\",\n    value: function respondsTo(eventType) {\n      var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n      eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n      return this.eventType === eventToCheck;\n    }\n  }, {\n    key: \"createCancelEvent\",\n    value: function createCancelEvent(error, path) {\n      if (this.callbackContext.hasCancelCallback) {\n        return new CancelEvent(this, error, path);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"createEvent\",\n    value: function createEvent(change, query) {\n      assert(change.childName != null, 'Child events should have a childName.');\n\n      var childRef = _child9(new ReferenceImpl(query._repo, query._path), change.childName);\n\n      var index = query._queryParams.getIndex();\n\n      return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n    }\n  }, {\n    key: \"getEventRunner\",\n    value: function getEventRunner(eventData) {\n      var _this39 = this;\n\n      if (eventData.getEventType() === 'cancel') {\n        return function () {\n          return _this39.callbackContext.onCancel(eventData.error);\n        };\n      } else {\n        return function () {\n          return _this39.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n        };\n      }\n    }\n  }, {\n    key: \"matches\",\n    value: function matches(other) {\n      if (other instanceof ChildEventRegistration) {\n        return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n      }\n\n      return false;\n    }\n  }, {\n    key: \"hasAnyCallback\",\n    value: function hasAnyCallback() {\n      return !!this.callbackContext;\n    }\n  }]);\n\n  return ChildEventRegistration;\n}();\n\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  var cancelCallback;\n\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    var userCallback = callback;\n\n    var onceCallback = function onceCallback(dataSnapshot, previousChildName) {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  var callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  var container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return function () {\n    return repoRemoveEventCallbackForQuery(query._repo, query, container);\n  };\n}\n\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\n\n\nfunction off(query, eventType, callback) {\n  var container = null;\n  var expCallback = callback ? new CallbackContext(callback) : null;\n\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\n\n\nvar QueryConstraint = /*#__PURE__*/_createClass(function QueryConstraint() {\n  _classCallCheck(this, QueryConstraint);\n});\n\nvar QueryEndAtConstraint = /*#__PURE__*/function (_QueryConstraint) {\n  _inherits(QueryEndAtConstraint, _QueryConstraint);\n\n  var _super11 = _createSuper(QueryEndAtConstraint);\n\n  function QueryEndAtConstraint(_value, _key) {\n    var _this40;\n\n    _classCallCheck(this, QueryEndAtConstraint);\n\n    _this40 = _super11.call(this);\n    _this40._value = _value;\n    _this40._key = _key;\n    return _this40;\n  }\n\n  _createClass(QueryEndAtConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateFirebaseDataArg('endAt', this._value, query._path, true);\n      var newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n      validateLimit(newParams);\n      validateQueryEndpoints(newParams);\n\n      if (query._queryParams.hasEnd()) {\n        throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n      }\n\n      return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n  }]);\n\n  return QueryEndAtConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\n\n\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nvar QueryEndBeforeConstraint = /*#__PURE__*/function (_QueryConstraint2) {\n  _inherits(QueryEndBeforeConstraint, _QueryConstraint2);\n\n  var _super12 = _createSuper(QueryEndBeforeConstraint);\n\n  function QueryEndBeforeConstraint(_value, _key) {\n    var _this41;\n\n    _classCallCheck(this, QueryEndBeforeConstraint);\n\n    _this41 = _super12.call(this);\n    _this41._value = _value;\n    _this41._key = _key;\n    return _this41;\n  }\n\n  _createClass(QueryEndBeforeConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateFirebaseDataArg('endBefore', this._value, query._path, false);\n      var newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n      validateLimit(newParams);\n      validateQueryEndpoints(newParams);\n\n      if (query._queryParams.hasEnd()) {\n        throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n      }\n\n      return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n  }]);\n\n  return QueryEndBeforeConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\n\n\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nvar QueryStartAtConstraint = /*#__PURE__*/function (_QueryConstraint3) {\n  _inherits(QueryStartAtConstraint, _QueryConstraint3);\n\n  var _super13 = _createSuper(QueryStartAtConstraint);\n\n  function QueryStartAtConstraint(_value, _key) {\n    var _this42;\n\n    _classCallCheck(this, QueryStartAtConstraint);\n\n    _this42 = _super13.call(this);\n    _this42._value = _value;\n    _this42._key = _key;\n    return _this42;\n  }\n\n  _createClass(QueryStartAtConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateFirebaseDataArg('startAt', this._value, query._path, true);\n      var newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n      validateLimit(newParams);\n      validateQueryEndpoints(newParams);\n\n      if (query._queryParams.hasStart()) {\n        throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n      }\n\n      return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n  }]);\n\n  return QueryStartAtConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\n\n\nfunction startAt() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var key = arguments.length > 1 ? arguments[1] : undefined;\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nvar QueryStartAfterConstraint = /*#__PURE__*/function (_QueryConstraint4) {\n  _inherits(QueryStartAfterConstraint, _QueryConstraint4);\n\n  var _super14 = _createSuper(QueryStartAfterConstraint);\n\n  function QueryStartAfterConstraint(_value, _key) {\n    var _this43;\n\n    _classCallCheck(this, QueryStartAfterConstraint);\n\n    _this43 = _super14.call(this);\n    _this43._value = _value;\n    _this43._key = _key;\n    return _this43;\n  }\n\n  _createClass(QueryStartAfterConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateFirebaseDataArg('startAfter', this._value, query._path, false);\n      var newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n      validateLimit(newParams);\n      validateQueryEndpoints(newParams);\n\n      if (query._queryParams.hasStart()) {\n        throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n      }\n\n      return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n  }]);\n\n  return QueryStartAfterConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\n\n\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nvar QueryLimitToFirstConstraint = /*#__PURE__*/function (_QueryConstraint5) {\n  _inherits(QueryLimitToFirstConstraint, _QueryConstraint5);\n\n  var _super15 = _createSuper(QueryLimitToFirstConstraint);\n\n  function QueryLimitToFirstConstraint(_limit) {\n    var _this44;\n\n    _classCallCheck(this, QueryLimitToFirstConstraint);\n\n    _this44 = _super15.call(this);\n    _this44._limit = _limit;\n    return _this44;\n  }\n\n  _createClass(QueryLimitToFirstConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      if (query._queryParams.hasLimit()) {\n        throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n      }\n\n      return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n    }\n  }]);\n\n  return QueryLimitToFirstConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\n\n\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nvar QueryLimitToLastConstraint = /*#__PURE__*/function (_QueryConstraint6) {\n  _inherits(QueryLimitToLastConstraint, _QueryConstraint6);\n\n  var _super16 = _createSuper(QueryLimitToLastConstraint);\n\n  function QueryLimitToLastConstraint(_limit) {\n    var _this45;\n\n    _classCallCheck(this, QueryLimitToLastConstraint);\n\n    _this45 = _super16.call(this);\n    _this45._limit = _limit;\n    return _this45;\n  }\n\n  _createClass(QueryLimitToLastConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      if (query._queryParams.hasLimit()) {\n        throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n      }\n\n      return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n    }\n  }]);\n\n  return QueryLimitToLastConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\n\n\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nvar QueryOrderByChildConstraint = /*#__PURE__*/function (_QueryConstraint7) {\n  _inherits(QueryOrderByChildConstraint, _QueryConstraint7);\n\n  var _super17 = _createSuper(QueryOrderByChildConstraint);\n\n  function QueryOrderByChildConstraint(_path) {\n    var _this46;\n\n    _classCallCheck(this, QueryOrderByChildConstraint);\n\n    _this46 = _super17.call(this);\n    _this46._path = _path;\n    return _this46;\n  }\n\n  _createClass(QueryOrderByChildConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateNoPreviousOrderByCall(query, 'orderByChild');\n      var parsedPath = new Path(this._path);\n\n      if (pathIsEmpty(parsedPath)) {\n        throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n      }\n\n      var index = new PathIndex(parsedPath);\n      var newParams = queryParamsOrderBy(query._queryParams, index);\n      validateQueryEndpoints(newParams);\n      return new QueryImpl(query._repo, query._path, newParams,\n      /*orderByCalled=*/\n      true);\n    }\n  }]);\n\n  return QueryOrderByChildConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\n\n\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nvar QueryOrderByKeyConstraint = /*#__PURE__*/function (_QueryConstraint8) {\n  _inherits(QueryOrderByKeyConstraint, _QueryConstraint8);\n\n  var _super18 = _createSuper(QueryOrderByKeyConstraint);\n\n  function QueryOrderByKeyConstraint() {\n    _classCallCheck(this, QueryOrderByKeyConstraint);\n\n    return _super18.apply(this, arguments);\n  }\n\n  _createClass(QueryOrderByKeyConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateNoPreviousOrderByCall(query, 'orderByKey');\n      var newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n      validateQueryEndpoints(newParams);\n      return new QueryImpl(query._repo, query._path, newParams,\n      /*orderByCalled=*/\n      true);\n    }\n  }]);\n\n  return QueryOrderByKeyConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\n\n\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\n\nvar QueryOrderByPriorityConstraint = /*#__PURE__*/function (_QueryConstraint9) {\n  _inherits(QueryOrderByPriorityConstraint, _QueryConstraint9);\n\n  var _super19 = _createSuper(QueryOrderByPriorityConstraint);\n\n  function QueryOrderByPriorityConstraint() {\n    _classCallCheck(this, QueryOrderByPriorityConstraint);\n\n    return _super19.apply(this, arguments);\n  }\n\n  _createClass(QueryOrderByPriorityConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateNoPreviousOrderByCall(query, 'orderByPriority');\n      var newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n      validateQueryEndpoints(newParams);\n      return new QueryImpl(query._repo, query._path, newParams,\n      /*orderByCalled=*/\n      true);\n    }\n  }]);\n\n  return QueryOrderByPriorityConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\n\n\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\n\nvar QueryOrderByValueConstraint = /*#__PURE__*/function (_QueryConstraint10) {\n  _inherits(QueryOrderByValueConstraint, _QueryConstraint10);\n\n  var _super20 = _createSuper(QueryOrderByValueConstraint);\n\n  function QueryOrderByValueConstraint() {\n    _classCallCheck(this, QueryOrderByValueConstraint);\n\n    return _super20.apply(this, arguments);\n  }\n\n  _createClass(QueryOrderByValueConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateNoPreviousOrderByCall(query, 'orderByValue');\n      var newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n      validateQueryEndpoints(newParams);\n      return new QueryImpl(query._repo, query._path, newParams,\n      /*orderByCalled=*/\n      true);\n    }\n  }]);\n\n  return QueryOrderByValueConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\n\n\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\n\nvar QueryEqualToValueConstraint = /*#__PURE__*/function (_QueryConstraint11) {\n  _inherits(QueryEqualToValueConstraint, _QueryConstraint11);\n\n  var _super21 = _createSuper(QueryEqualToValueConstraint);\n\n  function QueryEqualToValueConstraint(_value, _key) {\n    var _this47;\n\n    _classCallCheck(this, QueryEqualToValueConstraint);\n\n    _this47 = _super21.call(this);\n    _this47._value = _value;\n    _this47._key = _key;\n    return _this47;\n  }\n\n  _createClass(QueryEqualToValueConstraint, [{\n    key: \"_apply\",\n    value: function _apply(query) {\n      validateFirebaseDataArg('equalTo', this._value, query._path, false);\n\n      if (query._queryParams.hasStart()) {\n        throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n      }\n\n      if (query._queryParams.hasEnd()) {\n        throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n      }\n\n      return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n    }\n  }]);\n\n  return QueryEqualToValueConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\n\n\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\n\n\nfunction query(query) {\n  var queryImpl = getModularInstance(query);\n\n  for (var _len7 = arguments.length, queryConstraints = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n    queryConstraints[_key8 - 1] = arguments[_key8];\n  }\n\n  for (var _i11 = 0, _queryConstraints = queryConstraints; _i11 < _queryConstraints.length; _i11++) {\n    var constraint = _queryConstraints[_i11];\n    queryImpl = constraint._apply(queryImpl);\n  }\n\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\n\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches `Repo` instances.\r\n */\n\nvar repos = {};\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\n\nvar useRestClient = false;\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\n\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(\"\".concat(host, \":\").concat(port),\n  /* secure= */\n  false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\n\n\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  var dbUrl = url || app.options.databaseURL;\n\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = \"\".concat(app.options.projectId, \"-default-rtdb.firebaseio.com\");\n  }\n\n  var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  var repoInfo = parsedUrl.repoInfo;\n  var isEmulator;\n  var dbEmulatorHost = undefined;\n\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = \"http://\".concat(dbEmulatorHost, \"?ns=\").concat(repoInfo.namespace);\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n\n  var repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\n\n\nfunction repoManagerDeleteRepo(repo, appName) {\n  var appRepos = repos[appName]; // This should never happen...\n\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(\"Database \".concat(appName, \"(\").concat(repo.repoInfo_, \") has already been deleted.\"));\n  }\n\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\n\n\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  var appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  var repo = appRepos[repoInfo.toURLString()];\n\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\n\n\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\n\n\nvar Database = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function Database(_repoInternal,\n  /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    _classCallCheck(this, Database);\n\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n\n    this._instanceStarted = false;\n  }\n\n  _createClass(Database, [{\n    key: \"_repo\",\n    get: function get() {\n      if (!this._instanceStarted) {\n        repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n        this._instanceStarted = true;\n      }\n\n      return this._repoInternal;\n    }\n  }, {\n    key: \"_root\",\n    get: function get() {\n      if (!this._rootInternal) {\n        this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n      }\n\n      return this._rootInternal;\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete() {\n      if (this._rootInternal !== null) {\n        repoManagerDeleteRepo(this._repo, this.app.name);\n        this._repoInternal = null;\n        this._rootInternal = null;\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"_checkNotDeleted\",\n    value: function _checkNotDeleted(apiName) {\n      if (this._rootInternal === null) {\n        fatal('Cannot call ' + apiName + ' on a deleted database.');\n      }\n    }\n  }]);\n\n  return Database;\n}();\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\n\n\nfunction getDatabase() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var url = arguments.length > 1 ? arguments[1] : undefined;\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n}\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\n\n\nfunction connectDatabaseEmulator(db, host, port) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('useEmulator');\n\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n\n  var repo = db._repoInternal;\n  var tokenProvider = undefined;\n\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    var token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  } // Modify the repo to apply emulator settings\n\n\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\n\n\nfunction goOffline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOffline');\n\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\n\n\nfunction goOnline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOnline');\n\n  repoResume(db._repo);\n}\n\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n\n  _registerComponent(new Component('database', function (container, _ref3) {\n    var url = _ref3.instanceIdentifier;\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    var appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\n\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\n\n\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\n\n\nvar TransactionResult = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function TransactionResult(\n  /** Whether the transaction was successfully committed. */\n  committed,\n  /** The resulting data snapshot. */\n  snapshot) {\n    _classCallCheck(this, TransactionResult);\n\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n\n\n  _createClass(TransactionResult, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        committed: this.committed,\n        snapshot: this.snapshot.toJSON()\n      };\n    }\n  }]);\n\n  return TransactionResult;\n}();\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\n\n\nfunction runTransaction(ref, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  var applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  var deferred = new Deferred();\n\n  var promiseComplete = function promiseComplete(error, committed, node) {\n    var dataSnapshot = null;\n\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  }; // Add a watch to make sure we get server updates.\n\n\n  var unwatcher = onValue(ref, function () {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nPersistentConnection; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nConnection;\n/**\r\n * @internal\r\n */\n\nvar hijackHash = function hijackHash(newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nRepoInfo;\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\n\nvar forceRestClient = function forceRestClient(_forceRestClient) {\n  repoManagerForceRestClient(_forceRestClient);\n};\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, _child9 as child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;AACO,IAAIA,WAAW,GAAG,EAAlB;AAEP;;;;;SAIgBC,cAAcC,SAAe;AAC3CF,aAAW,GAAGE,OAAd;AACF;AC1BA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;IASaC,iB;;;;AAOX,6BAAoBC,WAApB,EAAwC;AAAA;;AAApB,mCAAoB;;AALhC,mBAAU,WAAV;AAKoC;;;;;;;;;WAM5C,aAAIC,GAAJ,EAAiBC,KAAjB,EAAsC;AACpC,UAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAKF,WAAL,CAAiBG,UAAjB,CAA4B,KAAKC,aAAL,CAAmBH,GAAnB,CAA5B;AACD,OAFD,MAEO;AACL,aAAKD,WAAL,CAAiBK,OAAjB,CAAyB,KAAKD,aAAL,CAAmBH,GAAnB,CAAzB,EAAkDK,SAAS,CAACJ,KAAD,CAA3D;AACD;AACF;;;;;;;WAKD,aAAID,GAAJ,EAAe;AACb,UAAMM,SAAS,GAAG,KAAKP,WAAL,CAAiBQ,OAAjB,CAAyB,KAAKJ,aAAL,CAAmBH,GAAnB,CAAzB,CAAlB;;AACA,UAAIM,SAAS,IAAI,IAAjB,EAAuB;AACrB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAOE,QAAQ,CAACF,SAAD,CAAf;AACD;AACF;;;WAED,gBAAON,GAAP,EAAkB;AAChB,WAAKD,WAAL,CAAiBG,UAAjB,CAA4B,KAAKC,aAAL,CAAmBH,GAAnB,CAA5B;AACD;;;WAID,uBAAcS,IAAd,EAA0B;AACxB,aAAO,KAAKC,OAAL,GAAeD,IAAtB;AACD;;;WAED,oBAAQ;AACN,aAAO,KAAKV,WAAL,CAAiBY,QAAjB,EAAP;AACD;;;;;ACzEH;;;;;;;;;;;;;;;;;AAmBA;;;;;;IAIaC,a;AAAb;AAAA;;AACU,kBAAmC,EAAnC;AAqBR,6BAAoB,IAApB;AACD;;;;WApBC,aAAIZ,GAAJ,EAAiBC,KAAjB,EAAsC;AACpC,UAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,eAAO,KAAKY,MAAL,CAAYb,GAAZ,CAAP;AACD,OAFD,MAEO;AACL,aAAKa,MAAL,CAAYb,GAAZ,IAAmBC,KAAnB;AACD;AACF;;;WAED,aAAID,GAAJ,EAAe;AACb,UAAIc,QAAQ,CAAC,KAAKD,MAAN,EAAcb,GAAd,CAAZ,EAAgC;AAC9B,eAAO,KAAKa,MAAL,CAAYb,GAAZ,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;WAED,gBAAOA,GAAP,EAAkB;AAChB,aAAO,KAAKa,MAAL,CAAYb,GAAZ,CAAP;AACD;;;;;AC3CH;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;AASA,IAAMe,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBC,cADuB,EACD;AAEtB,MAAI;;;AAGF,QACE,OAAOC,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACD,cAAD,CAAb,KAAkC,WAFpC,EAGE;;AAEA,UAAME,UAAU,GAAGD,MAAM,CAACD,cAAD,CAAzB;AACAE,gBAAU,CAACd,OAAX,CAAmB,mBAAnB,EAAwC,OAAxC;AACAc,gBAAU,CAAChB,UAAX,CAAsB,mBAAtB;AACA,aAAO,IAAIJ,iBAAJ,CAAsBoB,UAAtB,CAAP;AACD;AACF,GAbD,CAaE,OAAOC,CAAP,EAAU,CAAE,CAfQ;;;;AAmBtB,SAAO,IAAIP,aAAJ,EAAP;AACD,CArBD;AAuBA;;;AACO,IAAMQ,iBAAiB,GAAGL,gBAAgB,CAAC,cAAD,CAA1C;AAEP;;AACO,IAAMM,cAAc,GAAGN,gBAAgB,CAAC,gBAAD,CAAvC;AC1DP;;;;;;;;;;;;;;;;;AAkCA,IAAMO,SAAS,GAAG,IAAIC,MAAJ,CAAW,oBAAX,CAAlB;AAEA;;;;AAGO,IAAMC,aAAa,GAAkB;AAC1C,MAAIC,EAAE,GAAG,CAAT;AACA,SAAO;AACL,WAAOA,EAAE,EAAT;AACD,GAFD;AAGD,CAL0C,EAApC;AAOP;;;;;;;AAKO,IAAMC,IAAI,GAAG,cAAUC,GAAV,EAAqB;AACvC,MAAMC,SAAS,GAAGC,iBAAiB,CAACF,GAAD,CAAnC;AACA,MAAMD,IAAI,GAAG,IAAII,IAAJ,EAAb;AACAJ,MAAI,CAACK,MAAL,CAAYH,SAAZ;AACA,MAAMI,SAAS,GAAGN,IAAI,CAACO,MAAL,EAAlB;AACA,SAAOC,MAAM,CAACC,eAAP,CAAuBH,SAAvB,CAAP;AACD,CANM;;AAQP,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,GAA+B;AACtD,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,UAAQC,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAME,GAAG,GAAWF,CAAX,4BAAWA,CAAX,yBAAWA,CAAX,CAAT;;AACA,QACEG,KAAK,CAACC,OAAN,CAAcF,GAAd,KACCA,GAAG,IACF,OAAOA,GAAP,KAAe,QADhB;AAGC,WAAQA,GAAW,CAACD,MAApB,KAA+B,QALnC,EAME;AACAF,aAAO,IAAID,gBAAgB,CAACO,KAAjB,CAAuB,IAAvB,EAA6BH,GAA7B,CAAX;AACD,KARD,MAQO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClCH,aAAO,IAAIhC,SAAS,CAACmC,GAAD,CAApB;AACD,KAFM,MAEA;AACLH,aAAO,IAAIG,GAAX;AACD;;AACDH,WAAO,IAAI,GAAX;AACD;;AAED,SAAOA,OAAP;AACD,CArBD;AAuBA;;;;;AAGO,IAAIO,MAAM,GAAiC,IAA3C;AAEP;;;;AAGA,IAAIC,SAAS,GAAG,IAAhB;AAEA;;;;;;AAKO,IAAMC,eAAa,GAAG,SAAhBA,eAAgB,CAC3BC,OAD2B,EAE3BC,UAF2B,EAEP;AAEpBC,QAAM,CACJ,CAACD,UAAD,IAAeD,OAAO,KAAK,IAA3B,IAAmCA,OAAO,KAAK,KAD3C,EAEJ,4CAFI,CAAN;;AAIA,MAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBzB,aAAS,CAAC4B,QAAV,GAAqBC,QAAQ,CAACC,OAA9B;AACAR,UAAM,GAAGtB,SAAS,CAAC+B,GAAV,CAAcC,IAAd,CAAmBhC,SAAnB,CAAT;;AACA,QAAI0B,UAAJ,EAAgB;AACd3B,oBAAc,CAACkC,GAAf,CAAmB,iBAAnB,EAAsC,IAAtC;AACD;AACF,GAND,MAMO,IAAI,OAAOR,OAAP,KAAmB,UAAvB,EAAmC;AACxCH,UAAM,GAAGG,OAAT;AACD,GAFM,MAEA;AACLH,UAAM,GAAG,IAAT;AACAvB,kBAAc,CAACmC,MAAf,CAAsB,iBAAtB;AACD;AACF,CApBM;;AAsBA,IAAMH,GAAG,GAAG,SAANA,GAAM,GAA+B;AAChD,MAAIR,SAAS,KAAK,IAAlB,EAAwB;AACtBA,aAAS,GAAG,KAAZ;;AACA,QAAID,MAAM,KAAK,IAAX,IAAmBvB,cAAc,CAACoC,GAAf,CAAmB,iBAAnB,MAA0C,IAAjE,EAAuE;AACrEX,qBAAa,CAAC,IAAD,CAAbA;AACD;AACF;;AAED,MAAIF,MAAJ,EAAY;AAAA,sCARkBc,OAQlB;AARkBA,aAQlB;AAAA;;AACV,QAAMrB,OAAO,GAAGD,gBAAgB,CAACO,KAAjB,CAAuB,IAAvB,EAA6Be,OAA7B,CAAhB;AACAd,UAAM,CAACP,OAAD,CAAN;AACD;AACF,CAZM;;AAcA,IAAMsB,UAAU,GAAG,SAAbA,UAAa,CACxBC,MADwB,EACV;AAEd,SAAO,YAA+B;AAAA,uCAAlBF,OAAkB;AAAlBA,aAAkB;AAAA;;AACpCL,OAAG,MAAH,UAAIO,MAAJ,SAAeF,OAAf;AACD,GAFD;AAGD,CANM;;AAQA,IAAMG,KAAK,GAAG,SAARA,KAAQ,GAA8B;AACjD,MAAMxB,OAAO,GAAG,8BAA8BD,gBAAgB,MAAhB,mBAA9C;AACAd,WAAS,CAACuC,KAAV,CAAgBxB,OAAhB;AACD,CAHM;;AAKA,IAAMyB,KAAK,GAAG,SAARA,KAAQ,GAA8B;AACjD,MAAMzB,OAAO,mCAA4BD,gBAAgB,MAAhB,mBAA5B,CAAb;AACAd,WAAS,CAACuC,KAAV,CAAgBxB,OAAhB;AACA,QAAM,IAAI0B,KAAJ,CAAU1B,OAAV,CAAN;AACD,CAJM;;AAMA,IAAM2B,IAAI,GAAG,SAAPA,IAAO,GAA+B;AACjD,MAAM3B,OAAO,GAAG,uBAAuBD,gBAAgB,MAAhB,mBAAvC;AACAd,WAAS,CAAC0C,IAAV,CAAe3B,OAAf;AACD,CAHM;AAKP;;;;;;AAIO,IAAM4B,kBAAkB,GAAG,SAArBA,kBAAqB;;AAEhC,MACE,OAAOhD,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACiD,QADP,IAEAjD,MAAM,CAACiD,QAAP,CAAgBC,QAFhB,IAGAlD,MAAM,CAACiD,QAAP,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,QAAjC,MAA+C,CAAC,CAJlD,EAKE;AACAJ,QAAI,CACF,kDACE,8CAFA,CAAJ;AAID;AACF,CAbM;AAuBP;;;;;AAGO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAUC,IAAV,EAAuB;AACxD,SACE,OAAOA,IAAP,KAAgB,QAAhB,KACCA,IAAI,KAAKA,IAAT,IAAa;AACZA,MAAI,KAAKC,MAAM,CAACC,iBADjB,IAECF,IAAI,KAAKC,MAAM,CAACE,iBAHlB,CADF;AAMD,CAPM;;AASA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAUC,EAAV,EAAwB;AACzD,MAAIC,SAAS,MAAMC,QAAQ,CAACC,UAAT,KAAwB,UAA3C,EAAuD;AACrDH,MAAE;AACH,GAFD,MAEO;;;AAIL,QAAII,MAAM,GAAG,KAAb;;AACA,QAAMC,SAAS,GAAG,SAAZA,SAAY;AAChB,UAAI,CAACH,QAAQ,CAACI,IAAd,EAAoB;AAClBC,kBAAU,CAACF,SAAD,EAAYG,IAAI,CAACC,KAAL,CAAW,EAAX,CAAZ,CAAV;AACA;AACD;;AAED,UAAI,CAACL,MAAL,EAAa;AACXA,cAAM,GAAG,IAAT;AACAJ,UAAE;AACH;AACF,KAVD;;AAYA,QAAIE,QAAQ,CAACQ,gBAAb,EAA+B;AAC7BR,cAAQ,CAACQ,gBAAT,CAA0B,kBAA1B,EAA8CL,SAA9C,EAAyD,KAAzD,EAD6B;;AAG7B/D,YAAM,CAACoE,gBAAP,CAAwB,MAAxB,EAAgCL,SAAhC,EAA2C,KAA3C,EAH6B;AAK9B,KALD,MAKO,IAAKH,QAAgB,CAACS,WAAtB,EAAmC;;;AAGvCT,cAAgB,CAACS,WAAjB,CAA6B,oBAA7B,EAAmD;AAClD,YAAIT,QAAQ,CAACC,UAAT,KAAwB,UAA5B,EAAwC;AACtCE,mBAAS;AACV;AACF,OAJA,EAHuC;;;AAUvC/D,YAAc,CAACqE,WAAf,CAA2B,QAA3B,EAAqCN,SAArC,EAVuC;;;AAezC;AACF;AACF,CA1CM;AA4CP;;;;;AAGO,IAAMO,QAAQ,GAAG,YAAjB;AAEP;;;;AAGO,IAAMC,QAAQ,GAAG,YAAjB;AAEP;;;;AAGO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAUC,CAAV,EAAqBC,CAArB,EAA8B;AACvD,MAAID,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,CAAP;AACD,GAFD,MAEO,IAAID,CAAC,KAAKH,QAAN,IAAkBI,CAAC,KAAKH,QAA5B,EAAsC;AAC3C,WAAO,CAAC,CAAR;AACD,GAFM,MAEA,IAAIG,CAAC,KAAKJ,QAAN,IAAkBG,CAAC,KAAKF,QAA5B,EAAsC;AAC3C,WAAO,CAAP;AACD,GAFM,MAEA;AACL,QAAMI,MAAM,GAAGC,WAAW,CAACH,CAAD,CAA1B;AAAA,QACEI,MAAM,GAAGD,WAAW,CAACF,CAAD,CADtB;;AAGA,QAAIC,MAAM,KAAK,IAAf,EAAqB;AACnB,UAAIE,MAAM,KAAK,IAAf,EAAqB;AACnB,eAAOF,MAAM,GAAGE,MAAT,KAAoB,CAApB,GAAwBJ,CAAC,CAACnD,MAAF,GAAWoD,CAAC,CAACpD,MAArC,GAA8CqD,MAAM,GAAGE,MAA9D;AACD,OAFD,MAEO;AACL,eAAO,CAAC,CAAR;AACD;AACF,KAND,MAMO,IAAIA,MAAM,KAAK,IAAf,EAAqB;AAC1B,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAOJ,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAApB;AACD;AACF;AACF,CAvBM;AAyBP;;;;;AAGO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAUL,CAAV,EAAqBC,CAArB,EAA8B;AACzD,MAAID,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,CAAP;AACD,GAFD,MAEO,IAAID,CAAC,GAAGC,CAAR,EAAW;AAChB,WAAO,CAAC,CAAR;AACD,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF,CARM;;AAUA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CACxBhG,GADwB,EAExBiG,GAFwB,EAEK;AAE7B,MAAIA,GAAG,IAAIjG,GAAG,IAAIiG,GAAlB,EAAuB;AACrB,WAAOA,GAAG,CAACjG,GAAD,CAAV;AACD,GAFD,MAEO;AACL,UAAM,IAAI+D,KAAJ,CACJ,2BAA2B/D,GAA3B,GAAiC,eAAjC,GAAmDK,SAAS,CAAC4F,GAAD,CADxD,CAAN;AAGD;AACF,CAXM;;AAaA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUD,GAAV,EAAsB;AACrD,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;AAC3C,WAAO5F,SAAS,CAAC4F,GAAD,CAAhB;AACD;;AAED,MAAME,IAAI,GAAG,EAAb,CALqD;;AAOrD,OAAK,IAAMC,CAAX,IAAgBH,GAAhB,EAAqB;AACnBE,QAAI,CAACE,IAAL,CAAUD,CAAV;AACD,GAToD;;;AAYrDD,MAAI,CAACG,IAAL;AACA,MAAItG,GAAG,GAAG,GAAV;;AACA,OAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6D,IAAI,CAAC5D,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIA,CAAC,KAAK,CAAV,EAAa;AACXtC,SAAG,IAAI,GAAP;AACD;;AACDA,OAAG,IAAIK,SAAS,CAAC8F,IAAI,CAAC7D,CAAD,CAAL,CAAhB;AACAtC,OAAG,IAAI,GAAP;AACAA,OAAG,IAAIkG,iBAAiB,CAACD,GAAG,CAACE,IAAI,CAAC7D,CAAD,CAAL,CAAJ,CAAxB;AACD;;AAEDtC,KAAG,IAAI,GAAP;AACA,SAAOA,GAAP;AACD,CAzBM;AA2BP;;;;;;;;AAMO,IAAMuG,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/B5E,GAD+B,EAE/B6E,OAF+B,EAEhB;AAEf,MAAMC,GAAG,GAAG9E,GAAG,CAACY,MAAhB;;AAEA,MAAIkE,GAAG,IAAID,OAAX,EAAoB;AAClB,WAAO,CAAC7E,GAAD,CAAP;AACD;;AAED,MAAM+E,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,IAAIH,OAA9B,EAAuC;AACrC,QAAIG,CAAC,GAAGH,OAAJ,GAAcC,GAAlB,EAAuB;AACrBC,cAAQ,CAACL,IAAT,CAAc1E,GAAG,CAACiF,SAAJ,CAAcD,CAAd,EAAiBF,GAAjB,CAAd;AACD,KAFD,MAEO;AACLC,cAAQ,CAACL,IAAT,CAAc1E,GAAG,CAACiF,SAAJ,CAAcD,CAAd,EAAiBA,CAAC,GAAGH,OAArB,CAAd;AACD;AACF;;AACD,SAAOE,QAAP;AACD,CAnBM;AAqBP;;;;;;;;SAMgBG,KAAKZ,KAAatB,IAAmC;AACnE,OAAK,IAAM3E,GAAX,IAAkBiG,GAAlB,EAAuB;AACrB,QAAIA,GAAG,CAACa,cAAJ,CAAmB9G,GAAnB,CAAJ,EAA6B;AAC3B2E,QAAE,CAAC3E,GAAD,EAAMiG,GAAG,CAACjG,GAAD,CAAT,CAAF;AACD;AACF;AACF;AAeD;;;;;;;;;AAOO,IAAM+G,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAUC,CAAV,EAAmB;AACtD/D,QAAM,CAAC,CAACoB,mBAAmB,CAAC2C,CAAD,CAArB,EAA0B,qBAA1B,CAAN,CADsD,CACC;;AAEvD,MAAMC,KAAK,GAAG,EAAd;AAAA,MACEC,KAAK,GAAG,EADV;AAEA,MAAMC,IAAI,GAAG,CAAC,KAAMF,KAAK,GAAG,CAAf,IAAqB,CAAlC;AACA,MAAIG,CAAJ,EAAOjG,CAAP,EAAUkG,CAAV,EAAaC,EAAb,EAAiBhF,CAAjB,CANsD;;;AAUtD,MAAI0E,CAAC,KAAK,CAAV,EAAa;AACX7F,KAAC,GAAG,CAAJ;AACAkG,KAAC,GAAG,CAAJ;AACAD,KAAC,GAAG,IAAIJ,CAAJ,KAAU,CAACO,QAAX,GAAsB,CAAtB,GAA0B,CAA9B;AACD,GAJD,MAIO;AACLH,KAAC,GAAGJ,CAAC,GAAG,CAAR;AACAA,KAAC,GAAG7B,IAAI,CAACqC,GAAL,CAASR,CAAT,CAAJ;;AAEA,QAAIA,CAAC,IAAI7B,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAY,IAAIN,IAAhB,CAAT,EAAgC;;AAE9BG,QAAE,GAAGnC,IAAI,CAACuC,GAAL,CAASvC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC9B,GAAL,CAAS2D,CAAT,IAAc7B,IAAI,CAACwC,GAA9B,CAAT,EAA6CR,IAA7C,CAAL;AACAhG,OAAC,GAAGmG,EAAE,GAAGH,IAAT;AACAE,OAAC,GAAGlC,IAAI,CAACyC,KAAL,CAAWZ,CAAC,GAAG7B,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAYP,KAAK,GAAGI,EAApB,CAAJ,GAA8BnC,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAYP,KAAZ,CAAzC,CAAJ;AACD,KALD,MAKO;;AAEL/F,OAAC,GAAG,CAAJ;AACAkG,OAAC,GAAGlC,IAAI,CAACyC,KAAL,CAAWZ,CAAC,GAAG7B,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAY,IAAIN,IAAJ,GAAWD,KAAvB,CAAf,CAAJ;AACD;AACF,GA5BqD;;;AA+BtD,MAAMW,IAAI,GAAG,EAAb;;AACA,OAAKvF,CAAC,GAAG4E,KAAT,EAAgB5E,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2B;AACzBuF,QAAI,CAACxB,IAAL,CAAUgB,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAtB;AACAA,KAAC,GAAGlC,IAAI,CAACC,KAAL,CAAWiC,CAAC,GAAG,CAAf,CAAJ;AACD;;AACD,OAAK/E,CAAC,GAAG2E,KAAT,EAAgB3E,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2B;AACzBuF,QAAI,CAACxB,IAAL,CAAUlF,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAtB;AACAA,KAAC,GAAGgE,IAAI,CAACC,KAAL,CAAWjE,CAAC,GAAG,CAAf,CAAJ;AACD;;AACD0G,MAAI,CAACxB,IAAL,CAAUe,CAAC,GAAG,CAAH,GAAO,CAAlB;AACAS,MAAI,CAACC,OAAL;AACA,MAAMnG,GAAG,GAAGkG,IAAI,CAACE,IAAL,CAAU,EAAV,CAAZ,CA1CsD;;AA6CtD,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK1F,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,IAAI,CAAzB,EAA4B;AAC1B,QAAI2F,OAAO,GAAGC,QAAQ,CAACvG,GAAG,CAACwG,MAAJ,CAAW7F,CAAX,EAAc,CAAd,CAAD,EAAmB,CAAnB,CAAR,CAA8B3B,QAA9B,CAAuC,EAAvC,CAAd;;AACA,QAAIsH,OAAO,CAAC1F,MAAR,KAAmB,CAAvB,EAA0B;AACxB0F,aAAO,GAAG,MAAMA,OAAhB;AACD;;AACDD,iBAAa,GAAGA,aAAa,GAAGC,OAAhC;AACD;;AACD,SAAOD,aAAa,CAACI,WAAd,EAAP;AACD,CAtDM;AAwDP;;;;;;AAIO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC;AAC5C,SAAO,CAAC,EACN,OAAOpH,MAAP,KAAkB,QAAlB,IACAA,MAAM,CAAC,QAAD,CADN,IAEAA,MAAM,CAAC,QAAD,CAAN,CAAiB,WAAjB,CAFA,IAGA,CAAC,UAAUqH,IAAV,CAAerH,MAAM,CAACiD,QAAP,CAAgBqE,IAA/B,CAJK,CAAR;AAMD,CAPM;AASP;;;;;AAGO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;;AAE/B,SAAO,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,EAAf,KAAsB,QAA5D;AACD,CAHM;AAKP;;;;;SAGgBC,mBAAmBC,MAAcC,OAAmB;AAClE,MAAIC,MAAM,GAAG,eAAb;;AACA,MAAIF,IAAI,KAAK,SAAb,EAAwB;AACtBE,UAAM,GACJ,iDACA,6CAFF;AAGD,GAJD,MAIO,IAAIF,IAAI,KAAK,mBAAb,EAAkC;AACvCE,UAAM,GAAG,4DAAT;AACD,GAFM,MAEA,IAAIF,IAAI,KAAK,aAAb,EAA4B;AACjCE,UAAM,GAAG,4BAAT;AACD;;AAED,MAAMjF,KAAK,GAAG,IAAIE,KAAJ,CACZ6E,IAAI,GAAG,MAAP,GAAgBC,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EAAhB,GAAyC,IAAzC,GAAgDmI,MADpC,CAAd,CAZkE;;AAgBjEjF,OAAa,CAAC+E,IAAd,GAAqBA,IAAI,CAACI,WAAL,EAArB;AACD,SAAOnF,KAAP;AACD;AAED;;;;;AAGO,IAAMoF,eAAe,GAAG,IAAIC,MAAJ,CAAW,mBAAX,CAAxB;AAEP;;;;AAGO,IAAMC,cAAc,GAAG,CAAC,UAAxB;AAEP;;;;AAGO,IAAMC,cAAc,GAAG,UAAvB;AAEP;;;;AAGO,IAAMvD,WAAW,GAAG,SAAdA,WAAc,CAAUlE,GAAV,EAAqB;AAC9C,MAAIsH,eAAe,CAACX,IAAhB,CAAqB3G,GAArB,CAAJ,EAA+B;AAC7B,QAAM0H,MAAM,GAAG9E,MAAM,CAAC5C,GAAD,CAArB;;AACA,QAAI0H,MAAM,IAAIF,cAAV,IAA4BE,MAAM,IAAID,cAA1C,EAA0D;AACxD,aAAOC,MAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CARM;AAUP;;;;;;;;;;;;;;;;;;;AAiBO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAU3E,EAAV,EAAwB;AACpD,MAAI;AACFA,MAAE;AACH,GAFD,CAEE,OAAOxD,CAAP,EAAU;;AAEV+D,cAAU,CAAC;;;;;AAKT,UAAMqE,KAAK,GAAGpI,CAAC,CAACoI,KAAF,IAAW,EAAzB;AACAvF,UAAI,CAAC,wCAAD,EAA2CuF,KAA3C,CAAJ;AACA,YAAMpI,CAAN;AACD,KARS,EAQPgE,IAAI,CAACC,KAAL,CAAW,CAAX,CARO,CAAV;AASD;AACF,CAfM;AAqCP;;;;;AAGO,IAAMoE,YAAY,GAAG,SAAfA,YAAe;AAC1B,MAAMC,SAAS,GACZ,OAAOxI,MAAP,KAAkB,QAAlB,IACCA,MAAM,CAAC,WAAD,CADP,IAECA,MAAM,CAAC,WAAD,CAAN,CAAoB,WAApB,CAFF,IAGA,EAJF,CAD0B;;;;;AAW1B,SACEwI,SAAS,CAACC,MAAV,CACE,0FADF,KAEK,CAHP;AAKD,CAhBM;AA6BP;;;;;;;;;;;AASO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnChF,EADmC,EAEnCiF,IAFmC,EAEvB;AAEZ,MAAMC,OAAO,GAAoB3E,UAAU,CAACP,EAAD,EAAKiF,IAAL,CAA3C,CAFY;;AAIZ,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAAgCA,OAAe,CAAC,OAAD,CAAnD,EAA8D;;AAE3DA,WAAe,CAAC,OAAD,CAAf;AACF;;AACD,SAAOA,OAAP;AACD,CAXM;ACvmBP;;;;;;;;;;;;;;;;;AA2BA;;;;;IAGaC,qB;AAEX,iCACUC,QADV,EAEUC,gBAFV,EAEoE;AAAA;;AAAA;;AAD1D;AACA;AAER,SAAKC,QAAL,GAAgBD,gBAAgB,SAAhB,oBAAgB,WAAhB,GAAgB,MAAhB,mBAAgB,CAAEE,YAAlB,CAA+B;AAAEC,cAAQ,EAAE;AAAZ,KAA/B,CAAhB;;AACA,QAAI,CAAC,KAAKF,QAAV,EAAoB;AAClBD,sBAAgB,SAAhB,oBAAgB,WAAhB,GAAgB,MAAhB,mBAAgB,CAAEvG,GAAlB,GAAwB2G,IAAxB,CAA6B,kBAAQ;AAAA,eAAK,KAAI,CAACH,QAAL,GAAgBA,QAArB;AAAA,OAArC;AACD;AACF;;;;WAED,kBAASI,YAAT,EAA+B;AAAA;;AAC7B,UAAI,CAAC,KAAKJ,QAAV,EAAoB;AAClB,eAAO,IAAIK,OAAJ,CAAiC,UAACC,OAAD,EAAUC,MAAV,EAAgB;;;;;AAKtDtF,oBAAU,CAAC;AACT,gBAAI,MAAI,CAAC+E,QAAT,EAAmB;AACjB,oBAAI,CAACQ,QAAL,CAAcJ,YAAd,EAA4BD,IAA5B,CAAiCG,OAAjC,EAA0CC,MAA1C;AACD,aAFD,MAEO;AACLD,qBAAO,CAAC,IAAD,CAAP;AACD;AACF,WANS,EAMP,CANO,CAAV;AAOD,SAZM,CAAP;AAaD;;AACD,aAAO,KAAKN,QAAL,CAAcQ,QAAd,CAAuBJ,YAAvB,CAAP;AACD;;;WAED,gCAAuBK,QAAvB,EAAsD;;;AACpD,iBAAKV,gBAAL,MAAqB,IAArB,IAAqBW,aAArB,GAAqB,MAArB,GAAqBA,GACjBlH,GADiB,GAElB2G,IAFkB,CAEb,kBAAQ;AAAA,eAAIH,QAAQ,CAACW,gBAAT,CAA0BF,QAA1B,CAAJ;AAAA,OAFK,CAArB;AAGD;;;WAED,iCAAqB;AACnB1G,UAAI,CACF,4DAAoD,KAAK+F,QAAzD,WACE,6EAFA,CAAJ;AAID;;;;;ACxEH;;;;;;;;;;;;;;;;;AAiCA;;;;;IAGac,yB;AAGX,qCACUd,QADV,EAEUe,gBAFV,EAGUC,aAHV,EAG2D;AAAA;;AAAA;;AAFjD;AACA;AACA;AALF,iBAAqC,IAArC;AAON,SAAKC,KAAL,GAAaD,aAAa,CAACb,YAAd,CAA2B;AAAEC,cAAQ,EAAE;AAAZ,KAA3B,CAAb;;AACA,QAAI,CAAC,KAAKa,KAAV,EAAiB;AACfD,mBAAa,CAACE,MAAd,CAAqB,cAAI;AAAA,eAAK,MAAI,CAACD,KAAL,GAAaE,IAAlB;AAAA,OAAzB;AACD;AACF;;;;WAED,kBAASb,YAAT,EAA8B;AAAA;;AAC5B,UAAI,CAAC,KAAKW,KAAV,EAAiB;AACf,eAAO,IAAIV,OAAJ,CAAmC,UAACC,OAAD,EAAUC,MAAV,EAAgB;;;;;AAKxDtF,oBAAU,CAAC;AACT,gBAAI,MAAI,CAAC8F,KAAT,EAAgB;AACd,oBAAI,CAACP,QAAL,CAAcJ,YAAd,EAA4BD,IAA5B,CAAiCG,OAAjC,EAA0CC,MAA1C;AACD,aAFD,MAEO;AACLD,qBAAO,CAAC,IAAD,CAAP;AACD;AACF,WANS,EAMP,CANO,CAAV;AAOD,SAZM,CAAP;AAaD;;AAED,aAAO,KAAKS,KAAL,CAAWP,QAAX,CAAoBJ,YAApB,EAAkCc,KAAlC,CAAwC,eAAK;;;AAGlD,YAAItH,KAAK,IAAIA,KAAK,CAAC+E,IAAN,KAAe,4BAA5B,EAA0D;AACxDvF,aAAG,CAAC,gEAAD,CAAH;AACA,iBAAO,IAAP;AACD,SAHD,MAGO;AACL,iBAAOiH,OAAO,CAACE,MAAR,CAAe3G,KAAf,CAAP;AACD;AACF,OATM,CAAP;AAUD;;;WAED,gCAAuB6G,QAAvB,EAA+D;;;AAG7D,UAAI,KAAKM,KAAT,EAAgB;AACd,aAAKA,KAAL,CAAWI,oBAAX,CAAgCV,QAAhC;AACD,OAFD,MAEO;AACL,aAAKK,aAAL,CACGtH,GADH,GAEG2G,IAFH,CAEQ,cAAI;AAAA,iBAAIc,IAAI,CAACE,oBAAL,CAA0BV,QAA1B,CAAJ;AAAA,SAFZ;AAGD;AACF;;;WAED,mCAA0BA,QAA1B,EAAkE;AAChE,WAAKK,aAAL,CACGtH,GADH,GAEG2G,IAFH,CAEQ,cAAI;AAAA,eAAIc,IAAI,CAACG,uBAAL,CAA6BX,QAA7B,CAAJ;AAAA,OAFZ;AAGD;;;WAED,iCAAqB;AACnB,UAAIY,YAAY,GACd,4DACA,KAAKvB,QADL,GAEA,yDAFA,GAGA,yBAJF;;AAKA,UAAI,gBAAgB,KAAKe,gBAAzB,EAA2C;AACzCQ,oBAAY,IACV,qEACA,8EADA,GAEA,UAHF;AAID,OALD,MAKO,IAAI,oBAAoB,KAAKR,gBAA7B,EAA+C;AACpDQ,oBAAY,IACV,yEACA,8EADA,GAEA,UAHF;AAID,OALM,MAKA;AACLA,oBAAY,IACV,qEACA,4DADA,GAEA,uCAHF;AAID;;AACDtH,UAAI,CAACsH,YAAD,CAAJ;AACD;;;;;AAGH;;;IACaC,qB;AAIX,iCAAoBC,WAApB,EAAuC;AAAA;;AAAnB;AAAuB;;;;WAE3C,kBAASnB,YAAT,EAA8B;AAC5B,aAAOC,OAAO,CAACC,OAAR,CAAgB;AACrBiB,mBAAW,EAAE,KAAKA;AADG,OAAhB,CAAP;AAGD;;;WAED,gCAAuBd,QAAvB,EAA+D;;;AAG7DA,cAAQ,CAAC,KAAKc,WAAN,CAAR;AACD;;;WAED,mCAA0Bd,QAA1B,EAAkE,CAAU;;;WAE5E,iCAAqB,CAAW;;;;;AAnBhC;;;AACOa,8BAAQ,OAAR;AC9HT;;;;;;;;;;;;;;;;;AAiBO,IAAME,gBAAgB,GAAG,GAAzB;AAEA,IAAMC,aAAa,GAAG,GAAtB;AAEA,IAAMC,uBAAuB,GAAG,GAAhC;AAEA,IAAMC,aAAa,GAAG,GAAtB;AAEA,IAAMC,SAAS,GAAG,GAAlB,C,CAEP;AACA;;AACO,IAAMC,eAAe,GAC1B,4EADK;AAGA,IAAMC,kBAAkB,GAAG,IAA3B;AAEA,IAAMC,oBAAoB,GAAG,GAA7B;AAEA,IAAMC,qBAAqB,GAAG,IAA9B;AAEA,IAAMC,SAAS,GAAG,WAAlB;AAEA,IAAMC,YAAY,GAAG,cAArB;ACxCP;;;;;;;;;;;;;;;;;AAwBA;;;;IAGaC,Q;;;;;;;;;AAaX,oBACEC,IADF,EAEkBC,MAFlB,EAGkBC,SAHlB,EAIkBC,aAJlB,EAOgE;AAAA,QAF9CC,SAE8C,uEAFzB,KAEyB;AAAA,QAD9CC,cAC8C,uEADrB,EACqB;AAAA,QAA9CC,6BAA8C,uEAAL,KAAK;;AAAA;;AAL9C;AACA;AACA;AACA;AACA;AACA;AAEhB,SAAKC,KAAL,GAAaP,IAAI,CAACjE,WAAL,EAAb;AACA,SAAKyE,OAAL,GAAe,KAAKD,KAAL,CAAWzE,MAAX,CAAkB,KAAKyE,KAAL,CAAWxI,OAAX,CAAmB,GAAnB,IAA0B,CAA5C,CAAf;AACA,SAAK0I,YAAL,GACG1L,iBAAiB,CAACqC,GAAlB,CAAsB,UAAU4I,IAAhC,KAAoD,KAAKO,KAD5D;AAED;;;;WAED,2BAAe;AACb,aAAO,KAAKE,YAAL,CAAkB3E,MAAlB,CAAyB,CAAzB,EAA4B,CAA5B,MAAmC,IAA1C;AACD;;;WAED,wBAAY;AACV,aACE,KAAK0E,OAAL,KAAiB,gBAAjB,IACA,KAAKA,OAAL,KAAiB,qBAFnB;AAID;;;SAED,eAAQ;AACN,aAAO,KAAKD,KAAZ;AACD,K;SAED,aAASG,OAAT,EAAwB;AACtB,UAAIA,OAAO,KAAK,KAAKD,YAArB,EAAmC;AACjC,aAAKA,YAAL,GAAoBC,OAApB;;AACA,YAAI,KAAKC,eAAL,EAAJ,EAA4B;AAC1B5L,2BAAiB,CAACmC,GAAlB,CAAsB,UAAU,KAAKqJ,KAArC,EAA4C,KAAKE,YAAjD;AACD;AACF;AACF;;;WAED,oBAAQ;AACN,UAAInL,GAAG,GAAG,KAAKsL,WAAL,EAAV;;AACA,UAAI,KAAKP,cAAT,EAAyB;AACvB/K,WAAG,IAAI,MAAM,KAAK+K,cAAX,GAA4B,GAAnC;AACD;;AACD,aAAO/K,GAAP;AACD;;;WAED,uBAAW;AACT,UAAMwC,QAAQ,GAAG,KAAKmI,MAAL,GAAc,UAAd,GAA2B,SAA5C;AACA,UAAMzD,KAAK,GAAG,KAAK8D,6BAAL,iBACH,KAAKJ,SADF,IAEV,EAFJ;AAGA,uBAAUpI,QAAV,SAAqB,KAAKkI,IAA1B,cAAkCxD,KAAlC;AACD;;;;;;AAGH,SAASqE,uBAAT,CAAiCC,QAAjC,EAAmD;AACjD,SACEA,QAAQ,CAACd,IAAT,KAAkBc,QAAQ,CAACL,YAA3B,IACAK,QAAQ,CAACC,YAAT,EADA,IAEAD,QAAQ,CAACR,6BAHX;AAKD;AAED;;;;;;;;;SAOgBU,sBACdF,UACAG,MACAC,QAA+B;AAE/BtK,QAAM,CAAC,OAAOqK,IAAP,KAAgB,QAAjB,EAA2B,4BAA3B,CAAN;AACArK,QAAM,CAAC,OAAOsK,MAAP,KAAkB,QAAnB,EAA6B,8BAA7B,CAAN;AAEA,MAAIC,OAAJ;;AACA,MAAIF,IAAI,KAAKpB,SAAb,EAAwB;AACtBsB,WAAO,GACL,CAACL,QAAQ,CAACb,MAAT,GAAkB,QAAlB,GAA6B,OAA9B,IAAyCa,QAAQ,CAACL,YAAlD,GAAiE,OADnE;AAED,GAHD,MAGO,IAAIQ,IAAI,KAAKnB,YAAb,EAA2B;AAChCqB,WAAO,GACL,CAACL,QAAQ,CAACb,MAAT,GAAkB,UAAlB,GAA+B,SAAhC,IACAa,QAAQ,CAACL,YADT,GAEA,OAHF;AAID,GALM,MAKA;AACL,UAAM,IAAI/I,KAAJ,CAAU,8BAA8BuJ,IAAxC,CAAN;AACD;;AACD,MAAIJ,uBAAuB,CAACC,QAAD,CAA3B,EAAuC;AACrCI,UAAM,CAAC,IAAD,CAAN,GAAeJ,QAAQ,CAACZ,SAAxB;AACD;;AAED,MAAMkB,KAAK,GAAa,EAAxB;AAEA5G,MAAI,CAAC0G,MAAD,EAAS,UAACvN,GAAD,EAAcC,KAAd,EAA2B;AACtCwN,SAAK,CAACpH,IAAN,CAAWrG,GAAG,GAAG,GAAN,GAAYC,KAAvB;AACD,GAFG,CAAJ;AAIA,SAAOuN,OAAO,GAAGC,KAAK,CAAC1F,IAAN,CAAW,GAAX,CAAjB;AACF;AC9IA;;;;;;;;;;;;;;;;;AAmBA;;;;;IAGa2F,e;AAAb;AAAA;;AACU,qBAAqC,EAArC;AAaT;;;;WAXC,0BAAiBjN,IAAjB,EAAiD;AAAA,UAAlBkN,MAAkB,uEAAD,CAAC;;AAC/C,UAAI,CAAC7M,QAAQ,CAAC,KAAK8M,SAAN,EAAiBnN,IAAjB,CAAb,EAAqC;AACnC,aAAKmN,SAAL,CAAenN,IAAf,IAAuB,CAAvB;AACD;;AAED,WAAKmN,SAAL,CAAenN,IAAf,KAAwBkN,MAAxB;AACD;;;WAED,eAAG;AACD,aAAOE,QAAQ,CAAC,KAAKD,SAAN,CAAf;AACD;;;;;ACnCH;;;;;;;;;;;;;;;;;;AAqBA,IAAME,WAAW,GAAqC,EAAtD;AACA,IAAMC,SAAS,GAA6B,EAA5C;;mCAE0CZ,UAAkB;AAC1D,MAAMa,UAAU,GAAGb,QAAQ,CAACxM,QAAT,EAAnB;;AAEA,MAAI,CAACmN,WAAW,CAACE,UAAD,CAAhB,EAA8B;AAC5BF,eAAW,CAACE,UAAD,CAAX,GAA0B,IAAIN,eAAJ,EAA1B;AACD;;AAED,SAAOI,WAAW,CAACE,UAAD,CAAlB;AACD;;SAEeC,gCACdd,UACAe,iBAAwB;AAExB,MAAMF,UAAU,GAAGb,QAAQ,CAACxM,QAAT,EAAnB;;AAEA,MAAI,CAACoN,SAAS,CAACC,UAAD,CAAd,EAA4B;AAC1BD,aAAS,CAACC,UAAD,CAAT,GAAwBE,eAAe,EAAvC;AACD;;AAED,SAAOH,SAAS,CAACC,UAAD,CAAhB;AACF;AC7CA;;;;;;;;;;;;;;;;;AAmBA;;;;;;IAIaG,c;;;;AASX,0BAAoBC,UAApB,EAA+C;AAAA;;AAA3B;AARpB,4BAA8B,EAA9B;AACA,8BAAqB,CAArB;AACA,8BAAqB,CAAC,CAAtB;AACA,mBAA+B,IAA/B;AAKmD;;;;WAEnD,oBAAWC,WAAX,EAAgCC,QAAhC,EAAoD;AAClD,WAAKC,kBAAL,GAA0BF,WAA1B;AACA,WAAKG,OAAL,GAAeF,QAAf;;AACA,UAAI,KAAKC,kBAAL,GAA0B,KAAKE,kBAAnC,EAAuD;AACrD,aAAKD,OAAL;AACA,aAAKA,OAAL,GAAe,IAAf;AACD;AACF;;;;;;;;;WAOD,wBAAeE,UAAf,EAAmCpK,IAAnC,EAAkD;AAAA;;AAChD,WAAKqK,gBAAL,CAAsBD,UAAtB,IAAoCpK,IAApC;;AADgD;AAG9C,YAAMsK,SAAS,GAAG,MAAI,CAACD,gBAAL,CAChB,MAAI,CAACF,kBADW,CAAlB;AAGA,eAAO,MAAI,CAACE,gBAAL,CAAsB,MAAI,CAACF,kBAA3B,CAAP;;AAN8C,qCAOrCnM,CAPqC;AAQ5C,cAAIsM,SAAS,CAACtM,CAAD,CAAb,EAAkB;AAChBgH,0BAAc,CAAC;AACb,oBAAI,CAAC8E,UAAL,CAAgBQ,SAAS,CAACtM,CAAD,CAAzB;AACD,aAFa,CAAd;AAGD;AAZ2C;;AAO9C,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsM,SAAS,CAACrM,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;AAAA,iBAAlCA,CAAkC;AAM1C;;AACD,YAAI,MAAI,CAACmM,kBAAL,KAA4B,MAAI,CAACF,kBAArC,EAAyD;AACvD,cAAI,MAAI,CAACC,OAAT,EAAkB;AAChB,kBAAI,CAACA,OAAL;;AACA,kBAAI,CAACA,OAAL,GAAe,IAAf;AACD;;AACD;AACD;;AACD,cAAI,CAACC,kBAAL;AArB8C;;AAEhD,aAAO,KAAKE,gBAAL,CAAsB,KAAKF,kBAA3B,CAAP,EAAuD;AAAA;;AAAA,8BAiBnD;AAGH;AACF;;;;;ACvEH;;;;;;;;;;;;;;;;AA+CA;;;AACO,IAAMI,6BAA6B,GAAG,OAAtC;AACA,IAAMC,+BAA+B,GAAG,OAAxC;AACA,IAAMC,iCAAiC,GAAG,YAA1C;AACA,IAAMC,8BAA8B,GAAG,SAAvC;AACA,IAAMC,0BAA0B,GAAG,IAAnC;AACA,IAAMC,0BAA0B,GAAG,IAAnC;AACA,IAAMC,8BAA8B,GAAG,KAAvC;AACA,IAAMC,mCAAmC,GAAG,IAA5C;AACA,IAAMC,mCAAmC,GAAG,KAA5C;AACA,IAAMC,oCAAoC,GAAG,IAA7C;AACA,IAAMC,4BAA4B,GAAG,GAArC;AAEA,IAAMC,6CAA6C,GAAG,QAAtD,C,CAEP;AACA;AACA;;AACA,IAAMC,iBAAiB,GAAG,IAA1B;AACA,IAAMC,eAAe,GAAG,EAAxB,C,CAA2B;;AAC3B,IAAMC,gBAAgB,GAAGF,iBAAiB,GAAGC,eAA7C;AAEA;;;;;;AAKA,IAAME,0BAA0B,GAAG,KAAnC;AAEA;;;;AAGA,IAAMC,kBAAkB,GAAG,KAA3B;AAEA;;;;IAGaC,qB;;;;;;;;;;;;AA4BX,iCACSC,MADT,EAES5C,QAFT,EAGU6C,aAHV,EAIUC,aAJV,EAKUC,SALV,EAMSC,kBANT,EAOSC,aAPT,EAO+B;AAAA;;AAAA;;AANtB;AACA;AACC;AACA;AACA;AACD;AACA;AAlCT,qBAAY,CAAZ;AACA,yBAAgB,CAAhB;AAUQ,0BAAiB,KAAjB;AAyBN,SAAKC,IAAL,GAAY1M,UAAU,CAACoM,MAAD,CAAtB;AACA,SAAKO,MAAL,GAAcC,yBAAyB,CAACpD,QAAD,CAAvC;;AACA,SAAKqD,KAAL,GAAa,UAACjD,MAAD,EAAgC;;AAE3C,UAAI,MAAI,CAAC0C,aAAT,EAAwB;AACtB1C,cAAM,CAACtB,qBAAD,CAAN,GAAgC,MAAI,CAACgE,aAArC;AACD;;AACD,aAAO5C,qBAAqB,CAACF,QAAD,EAAWhB,YAAX,EAAyBoB,MAAzB,CAA5B;AACD,KAND;AAOD;;;;;;;;;WAMD,cAAKkD,SAAL,EAAmCC,YAAnC,EAAsE;AAAA;;AACpE,WAAKC,aAAL,GAAqB,CAArB;AACA,WAAKC,aAAL,GAAqBF,YAArB;AACA,WAAKG,eAAL,GAAuB,IAAI1C,cAAJ,CAAmBsC,SAAnB,CAAvB;AACA,WAAKK,SAAL,GAAiB,KAAjB;AAEA,WAAKC,oBAAL,GAA4B7L,UAAU,CAAC;AACrC,cAAI,CAACmL,IAAL,CAAU,8BAAV,EADqC;;;AAGrC,cAAI,CAACW,SAAL;;AACA,cAAI,CAACD,oBAAL,GAA4B,IAA5B,CAJqC;AAMtC,OANqC,EAMnC5L,IAAI,CAACC,KAAL,CAAWyK,kBAAX,CANmC,CAAtC,CANoE;;AAepEnL,yBAAmB,CAAC;AAClB,YAAI,MAAI,CAACoM,SAAT,EAAoB;AAClB;AACD,SAHiB;;;AAMlB,cAAI,CAACG,eAAL,GAAuB,IAAIC,0BAAJ,CACrB,YAAQ;AAAA,6CAAJC,IAAI;AAAJA,gBAAI;AAAA;;AACN,cAAOC,OAAP,GAA0CD,IAA1C;AAAA,cAAgBE,IAAhB,GAA0CF,IAA1C;AAAA,cAAsBG,IAAtB,GAA0CH,IAA1C;AAAA,cAA4BI,IAA5B,GAA0CJ,IAA1C;AAAA,cAAkCK,IAAlC,GAA0CL,IAA1C;;AACA,gBAAI,CAACM,uBAAL,CAA6BN,IAA7B;;AACA,cAAI,CAAC,MAAI,CAACF,eAAV,EAA2B;AACzB,mBADyB,CAClB;AACR;;AAED,cAAI,MAAI,CAACF,oBAAT,EAA+B;AAC7BW,wBAAY,CAAC,MAAI,CAACX,oBAAN,CAAZ;AACA,kBAAI,CAACA,oBAAL,GAA4B,IAA5B;AACD;;AACD,gBAAI,CAACY,cAAL,GAAsB,IAAtB;;AACA,cAAIP,OAAO,KAAKvC,6BAAhB,EAA+C;AAC7C,kBAAI,CAACpN,EAAL,GAAU4P,IAAV;AACA,kBAAI,CAACO,QAAL,GAAgBN,IAAhB;AACD,WAHD,MAGO,IAAIF,OAAO,KAAKtC,+BAAhB,EAAiD;;AAEtD,gBAAIuC,IAAJ,EAAU;;;AAGR,oBAAI,CAACJ,eAAL,CAAqBY,YAArB,GAAoC,KAApC,CAHQ;;;AAOR,oBAAI,CAAChB,eAAL,CAAqBiB,UAArB,CAAgCT,IAAhC,EAAgD;AAC9C,sBAAI,CAACL,SAAL;AACD,eAFD;AAGD,aAVD,MAUO;AACL,oBAAI,CAACA,SAAL;AACD;AACF,WAfM,MAeA;AACL,kBAAM,IAAIjN,KAAJ,CAAU,oCAAoCqN,OAA9C,CAAN;AACD;AACF,SAlCoB,EAmCrB,YAAQ;AAAA,6CAAJD,IAAI;AAAJA,gBAAI;AAAA;;AACN,cAAOY,EAAP,GAAmBZ,IAAnB;AAAA,cAAW7M,IAAX,GAAmB6M,IAAnB;;AACA,gBAAI,CAACM,uBAAL,CAA6BN,IAA7B;;AACA,gBAAI,CAACN,eAAL,CAAqBmB,cAArB,CAAoCD,EAApC,EAAkDzN,IAAlD;AACD,SAvCoB,EAwCrB;AACE,gBAAI,CAAC0M,SAAL;AACD,SA1CoB,EA2CrB,MAAI,CAACR,KA3CgB,CAAvB,CANkB;;;AAsDlB,YAAMyB,SAAS,GAAqC,EAApD;AACAA,iBAAS,CAACpD,6BAAD,CAAT,GAA2C,GAA3C;AACAoD,iBAAS,CAAC9C,8BAAD,CAAT,GAA4ChK,IAAI,CAACC,KAAL,CAC1CD,IAAI,CAAC+M,MAAL,KAAgB,SAD0B,CAA5C;;AAGA,YAAI,MAAI,CAACjB,eAAL,CAAqBkB,wBAAzB,EAAmD;AACjDF,mBAAS,CAAC7C,mCAAD,CAAT,GACE,MAAI,CAAC6B,eAAL,CAAqBkB,wBADvB;AAED;;AACDF,iBAAS,CAACvG,aAAD,CAAT,GAA2BD,gBAA3B;;AACA,YAAI,MAAI,CAAC0E,kBAAT,EAA6B;AAC3B8B,mBAAS,CAACtG,uBAAD,CAAT,GAAqC,MAAI,CAACwE,kBAA1C;AACD;;AACD,YAAI,MAAI,CAACC,aAAT,EAAwB;AACtB6B,mBAAS,CAAClG,kBAAD,CAAT,GAAgC,MAAI,CAACqE,aAArC;AACD;;AACD,YAAI,MAAI,CAACJ,aAAT,EAAwB;AACtBiC,mBAAS,CAACjG,oBAAD,CAAT,GAAkC,MAAI,CAACgE,aAAvC;AACD;;AACD,YAAI,MAAI,CAACC,aAAT,EAAwB;AACtBgC,mBAAS,CAAChG,qBAAD,CAAT,GAAmC,MAAI,CAACgE,aAAxC;AACD;;AACD,YACE,OAAO/L,QAAP,KAAoB,WAApB,IACAA,QAAQ,CAACkO,QADT,IAEAtG,eAAe,CAACxD,IAAhB,CAAqBpE,QAAQ,CAACkO,QAA9B,CAHF,EAIE;AACAH,mBAAS,CAACrG,aAAD,CAAT,GAA2BC,SAA3B;AACD;;AACD,YAAMwG,UAAU,GAAG,MAAI,CAAC7B,KAAL,CAAWyB,SAAX,CAAnB;;AACA,cAAI,CAAC5B,IAAL,CAAU,iCAAiCgC,UAA3C;;AACA,cAAI,CAACpB,eAAL,CAAqBqB,MAArB,CAA4BD,UAA5B,EAAwC;;AAEvC,SAFD;AAGD,OAxFkB,CAAnB;AAyFD;;;;;;;WAKD,iBAAK;AACH,WAAKpB,eAAL,CAAqBsB,aAArB,CAAmC,KAAK9Q,EAAxC,EAA4C,KAAKmQ,QAAjD;AACA,WAAKY,sBAAL,CAA4B,KAAK/Q,EAAjC,EAAqC,KAAKmQ,QAA1C;AACD;;;;;;;;;;;AA0CD,qCAAqB,CAAK;;;;;;;WAKlB,qBAAS;AACf,WAAKd,SAAL,GAAiB,IAAjB;;AAEA,UAAI,KAAKG,eAAT,EAA0B;AACxB,aAAKA,eAAL,CAAqBwB,KAArB;AACA,aAAKxB,eAAL,GAAuB,IAAvB;AACD,OANc;;;AASf,UAAI,KAAKyB,cAAT,EAAyB;AACvB7N,gBAAQ,CAACI,IAAT,CAAc0N,WAAd,CAA0B,KAAKD,cAA/B;AACA,aAAKA,cAAL,GAAsB,IAAtB;AACD;;AAED,UAAI,KAAK3B,oBAAT,EAA+B;AAC7BW,oBAAY,CAAC,KAAKX,oBAAN,CAAZ;AACA,aAAKA,oBAAL,GAA4B,IAA5B;AACD;AACF;;;;;;;WAKO,qBAAS;AACf,UAAI,CAAC,KAAKD,SAAV,EAAqB;AACnB,aAAKT,IAAL,CAAU,4BAAV;AACA,aAAKuC,SAAL;;AAEA,YAAI,KAAKhC,aAAT,EAAwB;AACtB,eAAKA,aAAL,CAAmB,KAAKe,cAAxB;AACA,eAAKf,aAAL,GAAqB,IAArB;AACD;AACF;AACF;;;;;;;;WAMD,iBAAK;AACH,UAAI,CAAC,KAAKE,SAAV,EAAqB;AACnB,aAAKT,IAAL,CAAU,2BAAV;AACA,aAAKuC,SAAL;AACD;AACF;;;;;;;;;WAOD,cAAKtO,IAAL,EAAa;AACX,UAAMuO,OAAO,GAAGxS,SAAS,CAACiE,IAAD,CAAzB;AACA,WAAKwO,SAAL,IAAkBD,OAAO,CAACtQ,MAA1B;AACA,WAAK+N,MAAL,CAAYyC,gBAAZ,CAA6B,YAA7B,EAA2CF,OAAO,CAACtQ,MAAnD,EAHW;;AAMX,UAAMyQ,UAAU,GAAGC,YAAY,CAACJ,OAAD,CAA/B,CANW;;;AAUX,UAAMnM,QAAQ,GAAGH,iBAAiB,CAACyM,UAAD,EAAarD,gBAAb,CAAlC,CAVW;;;AAcX,WAAK,IAAIrN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,QAAQ,CAACnE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,aAAK2O,eAAL,CAAqBiC,cAArB,CACE,KAAKvC,aADP,EAEEjK,QAAQ,CAACnE,MAFX,EAGEmE,QAAQ,CAACpE,CAAD,CAHV;AAKA,aAAKqO,aAAL;AACD;AACF;;;;;;;;;WAOD,gCAAuBlP,EAAvB,EAAmC0R,EAAnC,EAA6C;AAC3C,UAAIvO,SAAS,EAAb,EAAiB;AACf;AACD;;AACD,WAAK8N,cAAL,GAAsB7N,QAAQ,CAACuO,aAAT,CAAuB,QAAvB,CAAtB;AACA,UAAMnB,SAAS,GAA4B,EAA3C;AACAA,eAAS,CAACzC,6CAAD,CAAT,GAA2D,GAA3D;AACAyC,eAAS,CAAChD,0BAAD,CAAT,GAAwCxN,EAAxC;AACAwQ,eAAS,CAAC/C,0BAAD,CAAT,GAAwCiE,EAAxC;AACA,WAAKT,cAAL,CAAoBW,GAApB,GAA0B,KAAK7C,KAAL,CAAWyB,SAAX,CAA1B;AACA,WAAKS,cAAL,CAAoBY,KAApB,CAA0BC,OAA1B,GAAoC,MAApC;AAEA1O,cAAQ,CAACI,IAAT,CAAcuO,WAAd,CAA0B,KAAKd,cAA/B;AACD;;;;;;;WAKO,iCAAwBvB,IAAxB,EAAqC;;AAE3C,UAAMsC,aAAa,GAAGpT,SAAS,CAAC8Q,IAAD,CAAT,CAAgB5O,MAAtC;AACA,WAAKkR,aAAL,IAAsBA,aAAtB;AACA,WAAKnD,MAAL,CAAYyC,gBAAZ,CAA6B,gBAA7B,EAA+CU,aAA/C;AACD;;;WA/ID,sBAAiB;AACf3D,2BAAqB,CAAC4D,WAAtB,GAAoC,IAApC;AACD;;;;;;;WAOD,yBAAoB;AAClB5D,2BAAqB,CAAC6D,cAAtB,GAAuC,IAAvC;AACD,K;;;;WAGD,uBAAkB;AAChB,UAAI/O,SAAS,EAAb,EAAiB;AACf,eAAO,KAAP;AACD,OAFD,MAEO,IAAIkL,qBAAqB,CAAC4D,WAA1B,EAAuC;AAC5C,eAAO,IAAP;AACD,OAFM,MAEA;;;AAGL,eACE,CAAC5D,qBAAqB,CAAC6D,cAAvB,IACA,OAAO9O,QAAP,KAAoB,WADpB,IAEAA,QAAQ,CAACuO,aAAT,IAA0B,IAF1B,IAGA,CAAC/K,8BAA8B,EAH/B,IAIA,CAACG,iBAAiB,EALpB;AAOD;AACF;;;;;AAyHH;;;;;IAGa0I,0B;;;;;;;AAiCX,sCACE0C,SADF,EAEEC,WAFF,EAGSnD,YAHT,EAISF,KAJT,EAIqC;AAAA;;AAD5B;AACA,uBAA4B;;;AAlCrC,+BAAsB,IAAIsD,GAAJ,EAAtB,CAkCqC;;AA/BrC,uBAA8D,EAA9D,CA+BqC;;;;;;AAxBrC,yBAAgB3O,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC+M,MAAL,KAAgB,SAA3B,CAAhB,CAwBqC;;;AApBrC,wBAAe,IAAf;;AAsBE,QAAI,CAACtN,SAAS,EAAd,EAAkB;;;;;AAKhB,WAAKuN,wBAAL,GAAgC3Q,aAAa,EAA7C;AACAP,YAAM,CACJ8N,iCAAiC,GAAG,KAAKoD,wBADrC,CAAN,GAEIyB,SAFJ;AAGA3S,YAAM,CAAC+N,8BAA8B,GAAG,KAAKmD,wBAAvC,CAAN,GACE0B,WADF,CATgB;;AAahB,WAAKE,QAAL,GAAgB7C,0BAA0B,CAAC8C,aAA3B,EAAhB,CAbgB;;AAgBhB,UAAIC,MAAM,GAAG,EAAb,CAhBgB;;;AAmBhB,UACE,KAAKF,QAAL,CAAcV,GAAd,IACA,KAAKU,QAAL,CAAcV,GAAd,CAAkBlL,MAAlB,CAAyB,CAAzB,EAA4B,cAAc5F,MAA1C,MAAsD,aAFxD,EAGE;AACA,YAAM2R,aAAa,GAAGrP,QAAQ,CAACsP,MAA/B;AACAF,cAAM,GAAG,8BAA8BC,aAA9B,GAA8C,aAAvD;AACD;;AACD,UAAME,cAAc,GAAG,iBAAiBH,MAAjB,GAA0B,gBAAjD;;AACA,UAAI;AACF,aAAKF,QAAL,CAAcM,GAAd,CAAkBC,IAAlB;AACA,aAAKP,QAAL,CAAcM,GAAd,CAAkBE,KAAlB,CAAwBH,cAAxB;AACA,aAAKL,QAAL,CAAcM,GAAd,CAAkB5B,KAAlB;AACD,OAJD,CAIE,OAAOtR,CAAP,EAAU;AACVkC,WAAG,CAAC,yBAAD,CAAH;;AACA,YAAIlC,CAAC,CAACoI,KAAN,EAAa;AACXlG,aAAG,CAAClC,CAAC,CAACoI,KAAH,CAAH;AACD;;AACDlG,WAAG,CAAClC,CAAD,CAAH;AACD;AACF,KAtCD,MAsCO;AACL,WAAKyS,SAAL,GAAiBA,SAAjB;AACA,WAAKC,WAAL,GAAmBA,WAAnB;AACD;AACF;;;;;;;;;;;;;AAoDD,qBAAK;AAAA;;;AAEH,WAAKW,KAAL,GAAa,KAAb;;AAEA,UAAI,KAAKT,QAAT,EAAmB;;;;AAIjB,aAAKA,QAAL,CAAcM,GAAd,CAAkBpP,IAAlB,CAAuBwP,SAAvB,GAAmC,EAAnC;AACAvP,kBAAU,CAAC;AACT,cAAI,MAAI,CAAC6O,QAAL,KAAkB,IAAtB,EAA4B;AAC1BlP,oBAAQ,CAACI,IAAT,CAAc0N,WAAd,CAA0B,MAAI,CAACoB,QAA/B;AACA,kBAAI,CAACA,QAAL,GAAgB,IAAhB;AACD;AACF,SALS,EAKP5O,IAAI,CAACC,KAAL,CAAW,CAAX,CALO,CAAV;AAMD,OAfE;;;AAkBH,UAAMsL,YAAY,GAAG,KAAKA,YAA1B;;AACA,UAAIA,YAAJ,EAAkB;AAChB,aAAKA,YAAL,GAAoB,IAApB;AACAA,oBAAY;AACb;AACF;;;;;;;;;WAOD,uBAAcjP,EAAd,EAA0B0R,EAA1B,EAAoC;AAClC,WAAKuB,IAAL,GAAYjT,EAAZ;AACA,WAAKkT,IAAL,GAAYxB,EAAZ;AACA,WAAKqB,KAAL,GAAa,IAAb,CAHkC;;AAMlC,aAAO,KAAKI,WAAL,EAAP,EAA2B,CAAE;AAC9B;;;;;;;;;;;WASO,uBAAW;;;;AAIjB,UACE,KAAKJ,KAAL,IACA,KAAK3C,YADL,IAEA,KAAKgD,mBAAL,CAAyBC,IAAzB,IAAiC,KAAKC,WAAL,CAAiBxS,MAAjB,GAA0B,CAA1B,GAA8B,CAA9B,GAAkC,CAAnE,CAHF,EAIE;;AAEA,aAAKyS,aAAL;AACA,YAAM/C,SAAS,GAAqC,EAApD;AACAA,iBAAS,CAAChD,0BAAD,CAAT,GAAwC,KAAKyF,IAA7C;AACAzC,iBAAS,CAAC/C,0BAAD,CAAT,GAAwC,KAAKyF,IAA7C;AACA1C,iBAAS,CAAC9C,8BAAD,CAAT,GAA4C,KAAK6F,aAAjD;AACA,YAAIC,MAAM,GAAG,KAAKzE,KAAL,CAAWyB,SAAX,CAAb,CAPA;;AASA,YAAIiD,aAAa,GAAG,EAApB;AACA,YAAI5S,CAAC,GAAG,CAAR;;AAEA,eAAO,KAAKyS,WAAL,CAAiBxS,MAAjB,GAA0B,CAAjC,EAAoC;;AAElC,cAAM4S,OAAO,GAAG,KAAKJ,WAAL,CAAiB,CAAjB,CAAhB;;AACA,cACGI,OAAO,CAACC,CAAR,CAAwB7S,MAAxB,GACCmN,eADD,GAECwF,aAAa,CAAC3S,MAFf,IAGDkN,iBAJF,EAKE;;AAEA,gBAAM4F,MAAM,GAAG,KAAKN,WAAL,CAAiBO,KAAjB,EAAf;AACAJ,yBAAa,GACXA,aAAa,GACb,GADA,GAEA7F,mCAFA,GAGA/M,CAHA,GAIA,GAJA,GAKA+S,MAAM,CAACE,GALP,GAMA,GANA,GAOAjG,oCAPA,GAQAhN,CARA,GASA,GATA,GAUA+S,MAAM,CAACG,EAVP,GAWA,GAXA,GAYAjG,4BAZA,GAaAjN,CAbA,GAcA,GAdA,GAeA+S,MAAM,CAACD,CAhBT;AAiBA9S,aAAC;AACF,WA1BD,MA0BO;AACL;AACD;AACF;;AAED2S,cAAM,GAAGA,MAAM,GAAGC,aAAlB;AACA,aAAKO,eAAL,CAAqBR,MAArB,EAA6B,KAAKD,aAAlC;AAEA,eAAO,IAAP;AACD,OAtDD,MAsDO;AACL,eAAO,KAAP;AACD;AACF;;;;;;;;;;WAQD,wBAAeU,MAAf,EAA+BC,SAA/B,EAAkDrR,IAAlD,EAA+D;;AAE7D,WAAKyQ,WAAL,CAAiB1O,IAAjB,CAAsB;AAAEkP,WAAG,EAAEG,MAAP;AAAeF,UAAE,EAAEG,SAAnB;AAA8BP,SAAC,EAAE9Q;AAAjC,OAAtB,EAF6D;;;AAM7D,UAAI,KAAKkQ,KAAT,EAAgB;AACd,aAAKI,WAAL;AACD;AACF;;;;;;;;;WAOO,yBAAgBgB,GAAhB,EAA6BC,MAA7B,EAA2C;AAAA;;;AAEjD,WAAKhB,mBAAL,CAAyBiB,GAAzB,CAA6BD,MAA7B;;AAEA,UAAME,YAAY,GAAG,SAAfA,YAAe;AACnB,cAAI,CAAClB,mBAAL,CAAyBmB,MAAzB,CAAgCH,MAAhC;;AACA,cAAI,CAACjB,WAAL;AACD,OAHD,CAJiD;;;;AAWjD,UAAMqB,gBAAgB,GAAG/Q,UAAU,CACjC6Q,YADiC,EAEjC5Q,IAAI,CAACC,KAAL,CAAWwK,0BAAX,CAFiC,CAAnC;;AAKA,UAAMsG,YAAY,GAAG,SAAfA,YAAe;;AAEnBxE,oBAAY,CAACuE,gBAAD,CAAZ,CAFmB;;AAKnBF,oBAAY;AACb,OAND;;AAQA,WAAKzD,MAAL,CAAYsD,GAAZ,EAAiBM,YAAjB;AACD;;;;;;;;;WAOD,gBAAON,GAAP,EAAoBO,MAApB,EAAsC;AAAA;;AACpC,UAAIvR,SAAS,EAAb,EAAiB;;AAEd,aAAawR,cAAb,CAA4BR,GAA5B,EAAiCO,MAAjC;AACF,OAHD,MAGO;AACLjR,kBAAU,CAAC;AACT,cAAI;;AAEF,gBAAI,CAAC,OAAI,CAAC2M,YAAV,EAAwB;AACtB;AACD;;AACD,gBAAMwE,SAAS,GAAG,OAAI,CAACtC,QAAL,CAAcM,GAAd,CAAkBjB,aAAlB,CAAgC,QAAhC,CAAlB;;AACAiD,qBAAS,CAAC/I,IAAV,GAAiB,iBAAjB;AACA+I,qBAAS,CAACC,KAAV,GAAkB,IAAlB;AACAD,qBAAS,CAAChD,GAAV,GAAgBuC,GAAhB,CARE;;AAUFS,qBAAS,CAACE,MAAV,GAAoBF,SAAiB,CAACG,kBAAlB,GAClB;;AAEE,kBAAMC,MAAM,GAAIJ,SAAiB,CAACvR,UAAlC;;AACA,kBAAI,CAAC2R,MAAD,IAAWA,MAAM,KAAK,QAAtB,IAAkCA,MAAM,KAAK,UAAjD,EAA6D;;AAE3DJ,yBAAS,CAACE,MAAV,GAAoBF,SAAiB,CAACG,kBAAlB,GAAuC,IAA3D;;AACA,oBAAIH,SAAS,CAACK,UAAd,EAA0B;AACxBL,2BAAS,CAACK,UAAV,CAAqB/D,WAArB,CAAiC0D,SAAjC;AACD;;AACDF,sBAAM;AACP;AACF,aAZH;;AAaAE,qBAAS,CAACM,OAAV,GAAoB;AAClBtT,iBAAG,CAAC,sCAAsCuS,GAAvC,CAAH;AACA,qBAAI,CAAC/D,YAAL,GAAoB,KAApB;;AACA,qBAAI,CAACY,KAAL;AACD,aAJD;;AAKA,mBAAI,CAACsB,QAAL,CAAcM,GAAd,CAAkBpP,IAAlB,CAAuBuO,WAAvB,CAAmC6C,SAAnC;AACD,WA7BD,CA6BE,OAAOlV,CAAP,EAAU;AAEX;AACF,SAjCS,EAiCPgE,IAAI,CAACC,KAAL,CAAW,CAAX,CAjCO,CAAV;AAkCD;AACF;;;WAzPO,yBAAoB;AAC1B,UAAMwR,MAAM,GAAG/R,QAAQ,CAACuO,aAAT,CAAuB,QAAvB,CAAf;AACAwD,YAAM,CAACtD,KAAP,CAAaC,OAAb,GAAuB,MAAvB,CAF0B;;AAK1B,UAAI1O,QAAQ,CAACI,IAAb,EAAmB;AACjBJ,gBAAQ,CAACI,IAAT,CAAcuO,WAAd,CAA0BoD,MAA1B;;AACA,YAAI;;;;AAIF,cAAMlR,CAAC,GAAGkR,MAAM,CAACC,aAAP,CAAqBhS,QAA/B;;AACA,cAAI,CAACa,CAAL,EAAQ;;AAENrC,eAAG,CAAC,+BAAD,CAAH;AACD;AACF,SATD,CASE,OAAOlC,CAAP,EAAU;AACV,cAAMgT,MAAM,GAAGtP,QAAQ,CAACsP,MAAxB;AACAyC,gBAAM,CAACvD,GAAP,GACE,kEACAc,MADA,GAEA,0BAHF;AAID;AACF,OAlBD,MAkBO;;;AAGL,cAAM,mGAAN;AACD,OA3ByB;;;AA8B1B,UAAIyC,MAAM,CAACE,eAAX,EAA4B;AAC1BF,cAAM,CAACvC,GAAP,GAAauC,MAAM,CAACE,eAApB,CAD0B,CACU;AACrC,OAFD,MAEO,IAAIF,MAAM,CAACC,aAAX,EAA0B;AAC/BD,cAAM,CAACvC,GAAP,GAAauC,MAAM,CAACC,aAAP,CAAqBhS,QAAlC,CAD+B,CACY;;AAE5C,OAHM,MAGA,IAAK+R,MAAc,CAAC/R,QAApB,EAA8B;;AAEnC+R,cAAM,CAACvC,GAAP,GAAcuC,MAAc,CAAC/R,QAA7B,CAFmC,CAEG;AACvC;;AAED,aAAO+R,MAAP;AACD;;;;;ACzhBH;;;;;;;;;;;;;;;;;;AA0CA,IAAMG,wBAAwB,GAAG,KAAjC;AACA,IAAMC,4BAA4B,GAAG,KAArC;AAEA,IAAIC,aAAa,GAAG,IAApB;;AACA,IAAI,OAAOC,YAAP,KAAwB,WAA5B,EAAyC;AACvCD,eAAa,GAAGC,YAAhB;AACD,CAFD,MAEO,IAAI,OAAOC,SAAP,KAAqB,WAAzB,EAAsC;AAC3CF,eAAa,GAAGE,SAAhB;AACD;AAMD;;;;;IAGaC,mB;;;;;;;;;;;;AA2BX,+BACSrH,MADT,EAEE5C,QAFF,EAGU6C,aAHV,EAIUC,aAJV,EAKUC,SALV,EAMEC,kBANF,EAOEC,aAPF,EAOwB;AAAA;;AANf;AAEC;AACA;AACA;AA/BV,0BAAgC,IAAhC;AACA,kBAA0B,IAA1B;AACA,uBAAc,CAAd;AACA,qBAAY,CAAZ;AACA,yBAAgB,CAAhB;AA+BE,SAAKC,IAAL,GAAY1M,UAAU,CAAC,KAAKoM,MAAN,CAAtB;AACA,SAAKO,MAAL,GAAcC,yBAAyB,CAACpD,QAAD,CAAvC;AACA,SAAKK,OAAL,GAAe4J,mBAAmB,CAACC,cAApB,CACblK,QADa,EAEbgD,kBAFa,EAGbC,aAHa,EAIbH,aAJa,CAAf;AAMA,SAAKxD,SAAL,GAAiBU,QAAQ,CAACV,SAA1B;AACD;;;;;;;;;;;;;;;;;AA2CD,kBAAKgE,SAAL,EAAmCC,YAAnC,EAAsE;AAAA;;AACpE,WAAKA,YAAL,GAAoBA,YAApB;AACA,WAAKD,SAAL,GAAiBA,SAAjB;AAEA,WAAKJ,IAAL,CAAU,6BAA6B,KAAK7C,OAA5C;AAEA,WAAKmE,cAAL,GAAsB,KAAtB,CANoE;;AAQpEvQ,uBAAiB,CAACmC,GAAlB,CAAsB,4BAAtB,EAAoD,IAApD;;AAEA,UAAI;AACF,YAAIqB,SAAS,EAAb,EAAiB;AACf,cAAM0S,MAAM,GAAG,KAAK7K,SAAL,GAAiB,WAAjB,GAA+B,MAA9C,CADe;;AAGf,cAAM8K,OAAO,GAA4B;AACvCC,mBAAO,EAAE;AACP,+CAA0B/L,gBAA1B,cAA8C9L,WAA9C,cAA6D8X,OAAO,CAACC,QAArE,cAAiFJ,MAAjF,CADO;AAEP,kCAAoB,KAAKtH,aAAL,IAAsB;AAFnC;AAD8B,WAAzC,CAHe;;;;;;AAef,cAAI,KAAKE,SAAT,EAAoB;AAClBqH,mBAAO,CAACC,OAAR,CAAgB,eAAhB,qBAA6C,KAAKtH,SAAlD;AACD;;AACD,cAAI,KAAKD,aAAT,EAAwB;AACtBsH,mBAAO,CAACC,OAAR,CAAgB,qBAAhB,IAAyC,KAAKvH,aAA9C;AACD,WApBc;;;AAuBf,cAAM0H,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;AACA,cAAMG,KAAK,GACT,KAAKpK,OAAL,CAAapJ,OAAb,CAAqB,QAArB,MAAmC,CAAnC,GACIuT,GAAG,CAAC,aAAD,CAAH,IAAsBA,GAAG,CAAC,aAAD,CAD7B,GAEIA,GAAG,CAAC,YAAD,CAAH,IAAqBA,GAAG,CAAC,YAAD,CAH9B;;AAKA,cAAIC,KAAJ,EAAW;AACTL,mBAAO,CAAC,OAAD,CAAP,GAAmB;AAAEM,oBAAM,EAAED;AAAV,aAAnB;AACD;;AAED,eAAKE,MAAL,GAAc,IAAIb,aAAJ,CAAkB,KAAKzJ,OAAvB,EAAgC,EAAhC,EAAoC+J,OAApC,CAAd;AACD,SAlCD,MAkCO;AACL,cAAMA,QAAO,GAA4B;AACvCC,mBAAO,EAAE;AACP,kCAAoB,KAAKxH,aAAL,IAAsB,EADnC;AAEP,qCAAuB,KAAKC,aAAL,IAAsB;AAFtC;AAD8B,WAAzC;AAMA,eAAK6H,MAAL,GAAc,IAAIb,aAAJ,CAAkB,KAAKzJ,OAAvB,EAAgC,EAAhC,EAAoC+J,QAApC,CAAd;AACD;AACF,OA5CD,CA4CE,OAAOpW,CAAP,EAAU;AACV,aAAKkP,IAAL,CAAU,gCAAV;;AACA,YAAMxM,MAAK,GAAG1C,CAAC,CAACkB,OAAF,IAAalB,CAAC,CAACmD,IAA7B;;AACA,YAAIT,MAAJ,EAAW;AACT,eAAKwM,IAAL,CAAUxM,MAAV;AACD;;AACD,aAAKmN,SAAL;AACA;AACD;;AAED,WAAK8G,MAAL,CAAYC,MAAZ,GAAqB;AACnB,eAAI,CAAC1H,IAAL,CAAU,sBAAV;;AACA,eAAI,CAACsB,cAAL,GAAsB,IAAtB;AACD,OAHD;;AAKA,WAAKmG,MAAL,CAAYE,OAAZ,GAAsB;AACpB,eAAI,CAAC3H,IAAL,CAAU,wCAAV;;AACA,eAAI,CAACyH,MAAL,GAAc,IAAd;;AACA,eAAI,CAAC9G,SAAL;AACD,OAJD;;AAMA,WAAK8G,MAAL,CAAYG,SAAZ,GAAwB,WAAC;AACvB,eAAI,CAACC,mBAAL,CAAyBC,CAAzB;AACD,OAFD;;AAIA,WAAKL,MAAL,CAAYnB,OAAZ,GAAsB,WAAC;AACrB,eAAI,CAACtG,IAAL,CAAU,uCAAV,EADqB;;;AAGrB,YAAMxM,KAAK,GAAI1C,CAAS,CAACkB,OAAV,IAAsBlB,CAAS,CAACmD,IAA/C;;AACA,YAAIT,KAAJ,EAAW;AACT,iBAAI,CAACwM,IAAL,CAAUxM,KAAV;AACD;;AACD,eAAI,CAACmN,SAAL;AACD,OARD;AASD;;;;;;;WAKD,iBAAK,CAAK;;;WAiDV,iCAAqB;AACnB5P,uBAAiB,CAACoC,MAAlB,CAAyB,4BAAzB;AACD;;;WAEO,sBAAac,IAAb,EAAyB;AAC/B,WAAK8T,MAAL,CAAY/R,IAAZ,CAAiB/B,IAAjB;;AACA,UAAI,KAAK8T,MAAL,CAAY7V,MAAZ,KAAuB,KAAK8V,WAAhC,EAA6C;AAC3C,YAAMC,QAAQ,GAAG,KAAKF,MAAL,CAAYrQ,IAAZ,CAAiB,EAAjB,CAAjB;AACA,aAAKqQ,MAAL,GAAc,IAAd;AACA,YAAMG,QAAQ,GAAG/X,QAAQ,CAAC8X,QAAD,CAAzB,CAH2C;;AAM3C,aAAK7H,SAAL,CAAe8H,QAAf;AACD;AACF;;;;;;;WAKO,8BAAqBC,UAArB,EAAuC;AAC7C,WAAKH,WAAL,GAAmBG,UAAnB;AACA,WAAKJ,MAAL,GAAc,EAAd;AACD;;;;;;;;WAMO,4BAAmB9T,IAAnB,EAA+B;AACrCrB,YAAM,CAAC,KAAKmV,MAAL,KAAgB,IAAjB,EAAuB,gCAAvB,CAAN,CADqC;;;AAIrC,UAAI9T,IAAI,CAAC/B,MAAL,IAAe,CAAnB,EAAsB;AACpB,YAAMiW,UAAU,GAAGjU,MAAM,CAACD,IAAD,CAAzB;;AACA,YAAI,CAACmU,KAAK,CAACD,UAAD,CAAV,EAAwB;AACtB,eAAKE,oBAAL,CAA0BF,UAA1B;AACA,iBAAO,IAAP;AACD;AACF;;AACD,WAAKE,oBAAL,CAA0B,CAA1B;AACA,aAAOpU,IAAP;AACD;;;;;;;;WAMD,6BAAoBqU,IAApB,EAAkD;AAChD,UAAI,KAAKb,MAAL,KAAgB,IAApB,EAA0B;AACxB,eADwB,CACjB;AACR;;AACD,UAAMxT,IAAI,GAAGqU,IAAI,CAAC,MAAD,CAAjB;AACA,WAAKlF,aAAL,IAAsBnP,IAAI,CAAC/B,MAA3B;AACA,WAAK+N,MAAL,CAAYyC,gBAAZ,CAA6B,gBAA7B,EAA+CzO,IAAI,CAAC/B,MAApD;AAEA,WAAKqW,cAAL;;AAEA,UAAI,KAAKR,MAAL,KAAgB,IAApB,EAA0B;;AAExB,aAAKS,YAAL,CAAkBvU,IAAlB;AACD,OAHD,MAGO;;AAEL,YAAMwU,aAAa,GAAG,KAAKC,kBAAL,CAAwBzU,IAAxB,CAAtB;;AACA,YAAIwU,aAAa,KAAK,IAAtB,EAA4B;AAC1B,eAAKD,YAAL,CAAkBC,aAAlB;AACD;AACF;AACF;;;;;;;;WAMD,cAAKxU,IAAL,EAAa;AACX,WAAKsU,cAAL;AAEA,UAAM/F,OAAO,GAAGxS,SAAS,CAACiE,IAAD,CAAzB;AACA,WAAKwO,SAAL,IAAkBD,OAAO,CAACtQ,MAA1B;AACA,WAAK+N,MAAL,CAAYyC,gBAAZ,CAA6B,YAA7B,EAA2CF,OAAO,CAACtQ,MAAnD,EALW;;;AAUX,UAAMmE,QAAQ,GAAGH,iBAAiB,CAACsM,OAAD,EAAUkE,wBAAV,CAAlC,CAVW;;AAaX,UAAIrQ,QAAQ,CAACnE,MAAT,GAAkB,CAAtB,EAAyB;AACvB,aAAKyW,WAAL,CAAiBC,MAAM,CAACvS,QAAQ,CAACnE,MAAV,CAAvB;AACD,OAfU;;;AAkBX,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,QAAQ,CAACnE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,aAAK0W,WAAL,CAAiBtS,QAAQ,CAACpE,CAAD,CAAzB;AACD;AACF;;;WAEO,qBAAS;AACf,WAAKwO,SAAL,GAAiB,IAAjB;;AACA,UAAI,KAAKoI,cAAT,EAAyB;AACvBC,qBAAa,CAAC,KAAKD,cAAN,CAAb;AACA,aAAKA,cAAL,GAAsB,IAAtB;AACD;;AAED,UAAI,KAAKpB,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYrF,KAAZ;AACA,aAAKqF,MAAL,GAAc,IAAd;AACD;AACF;;;WAEO,qBAAS;AACf,UAAI,CAAC,KAAKhH,SAAV,EAAqB;AACnB,aAAKT,IAAL,CAAU,6BAAV;AACA,aAAKuC,SAAL,GAFmB;;AAKnB,YAAI,KAAKlC,YAAT,EAAuB;AACrB,eAAKA,YAAL,CAAkB,KAAKiB,cAAvB;AACA,eAAKjB,YAAL,GAAoB,IAApB;AACD;AACF;AACF;;;;;;;;WAMD,iBAAK;AACH,UAAI,CAAC,KAAKI,SAAV,EAAqB;AACnB,aAAKT,IAAL,CAAU,2BAAV;AACA,aAAKuC,SAAL;AACD;AACF;;;;;;;;WAMD,0BAAc;AAAA;;AACZuG,mBAAa,CAAC,KAAKD,cAAN,CAAb;AACA,WAAKA,cAAL,GAAsBE,WAAW,CAAC;;AAEhC,YAAI,OAAI,CAACtB,MAAT,EAAiB;AACf,iBAAI,CAACkB,WAAL,CAAiB,GAAjB;AACD;;AACD,eAAI,CAACJ,cAAL,GALgC;;AAOjC,OAPgC,EAO9BzT,IAAI,CAACC,KAAL,CAAW4R,4BAAX,CAP8B,CAAjC;AAQD;;;;;;;;;WAOO,qBAAYrV,GAAZ,EAAuB;;;;AAI7B,UAAI;AACF,aAAKmW,MAAL,CAAYuB,IAAZ,CAAiB1X,GAAjB;AACD,OAFD,CAEE,OAAOR,CAAP,EAAU;AACV,aAAKkP,IAAL,CACE,yCADF,EAEElP,CAAC,CAACkB,OAAF,IAAalB,CAAC,CAACmD,IAFjB,EAGE,qBAHF;AAKAY,kBAAU,CAAC,KAAK8L,SAAL,CAAe1N,IAAf,CAAoB,IAApB,CAAD,EAA4B,CAA5B,CAAV;AACD;AACF;;;WAxVO,wBACN6J,QADM,EAENgD,kBAFM,EAGNC,aAHM,EAINH,aAJM,EAIgB;AAEtB,UAAMgC,SAAS,GAA4B,EAA3C;AACAA,eAAS,CAACvG,aAAD,CAAT,GAA2BD,gBAA3B;;AAEA,UACE,CAAC7G,SAAS,EAAV,IACA,OAAOV,QAAP,KAAoB,WADpB,IAEAA,QAAQ,CAACkO,QAFT,IAGAtG,eAAe,CAACxD,IAAhB,CAAqBpE,QAAQ,CAACkO,QAA9B,CAJF,EAKE;AACAH,iBAAS,CAACrG,aAAD,CAAT,GAA2BC,SAA3B;AACD;;AACD,UAAIsE,kBAAJ,EAAwB;AACtB8B,iBAAS,CAACtG,uBAAD,CAAT,GAAqCwE,kBAArC;AACD;;AACD,UAAIC,aAAJ,EAAmB;AACjB6B,iBAAS,CAAClG,kBAAD,CAAT,GAAgCqE,aAAhC;AACD;;AACD,UAAIH,aAAJ,EAAmB;AACjBgC,iBAAS,CAAChG,qBAAD,CAAT,GAAmCgE,aAAnC;AACD;;AAED,aAAO5C,qBAAqB,CAACF,QAAD,EAAWjB,SAAX,EAAsB+F,SAAtB,CAA5B;AACD;;;WAuGD,yBAAoB;AAClBmF,yBAAmB,CAACzD,cAApB,GAAqC,IAArC;AACD;;;WAED,uBAAkB;AAChB,UAAI2F,YAAY,GAAG,KAAnB;;AACA,UAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAS,CAAC9P,SAAlD,EAA6D;AAC3D,YAAM+P,eAAe,GAAG,gCAAxB;AACA,YAAMC,eAAe,GAAGF,SAAS,CAAC9P,SAAV,CAAoBiQ,KAApB,CAA0BF,eAA1B,CAAxB;;AACA,YAAIC,eAAe,IAAIA,eAAe,CAAClX,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,cAAIoX,UAAU,CAACF,eAAe,CAAC,CAAD,CAAhB,CAAV,GAAiC,GAArC,EAA0C;AACxCH,wBAAY,GAAG,IAAf;AACD;AACF;AACF;;AAED,aACE,CAACA,YAAD,IACArC,aAAa,KAAK,IADlB,IAEA,CAACG,mBAAmB,CAACzD,cAHvB;AAKD;;;;;;;WAeD,4BAAuB;;;AAGrB,aACEvS,iBAAiB,CAACwY,iBAAlB,IACAxY,iBAAiB,CAACqC,GAAlB,CAAsB,4BAAtB,MAAwD,IAF1D;AAID;;;;;AApBD;;;;;AAGO2T,mDAA+B,CAA/B;AAEP;;;;AAGOA,qCAAiB,KAAjB;ACnRT;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;IAOayC,gB;;;;AAUX,4BAAY1M,QAAZ,EAA8B;AAAA;;AAC5B,SAAK2M,eAAL,CAAqB3M,QAArB;AACD;;;;WAEO,yBAAgBA,QAAhB,EAAkC;AACxC,UAAM4M,qBAAqB,GACzB3C,mBAAmB,IAAIA,mBAAmB,CAAC,aAAD,CAAnB,EADzB;AAEA,UAAI4C,oBAAoB,GACtBD,qBAAqB,IAAI,CAAC3C,mBAAmB,CAAC6C,gBAApB,EAD5B;;AAGA,UAAI9M,QAAQ,CAACX,aAAb,EAA4B;AAC1B,YAAI,CAACuN,qBAAL,EAA4B;AAC1B/V,cAAI,CACF,iFADE,CAAJ;AAGD;;AAEDgW,4BAAoB,GAAG,IAAvB;AACD;;AAED,UAAIA,oBAAJ,EAA0B;AACxB,aAAKE,WAAL,GAAmB,CAAC9C,mBAAD,CAAnB;AACD,OAFD,MAEO;AACL,YAAM+C,UAAU,GAAI,KAAKD,WAAL,GAAmB,EAAvC;;AADK,mDAEmBL,gBAAgB,CAACO,cAFpC;AAAA;;AAAA;AAEL,8DAAyD;AAAA,gBAA9CC,SAA8C;;AACvD,gBAAIA,SAAS,IAAIA,SAAS,CAAC,aAAD,CAAT,EAAjB,EAA6C;AAC3CF,wBAAU,CAAC9T,IAAX,CAAgBgU,SAAhB;AACD;AACF;AANI;AAAA;AAAA;AAAA;AAAA;AAON;AACF;;;;;;;WAKD,4BAAgB;AACd,UAAI,KAAKH,WAAL,CAAiB3X,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,eAAO,KAAK2X,WAAL,CAAiB,CAAjB,CAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAInW,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF;;;;;;;WAKD,4BAAgB;AACd,UAAI,KAAKmW,WAAL,CAAiB3X,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,eAAO,KAAK2X,WAAL,CAAiB,CAAjB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;SA3DD,eAAyB;AACvB,aAAO,CAACpK,qBAAD,EAAwBsH,mBAAxB,CAAP;AACD;;;;;ACpCH;;;;;;;;;;;;;;;;AAgCA;;;AACA,IAAMkD,eAAe,GAAG,KAAxB,C,CAEA;AACA;;AACA,IAAMC,mCAAmC,GAAG,IAA5C,C,CAEA;AACA;AACA;;AACA,IAAMC,2BAA2B,GAAG,KAAK,IAAzC;AACA,IAAMC,+BAA+B,GAAG,MAAM,IAA9C;AAQA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,UAAU,GAAG,GAAnB;AACA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,IAAI,GAAG,GAAb;AAEA,IAAMC,YAAY,GAAG,GAArB;AAEA;;;;;IAIaC,U;;;;;;;;;;;;;AA6BX,sBACS3Z,EADT,EAEU4Z,SAFV,EAGUC,cAHV,EAIUC,cAJV,EAKUC,UALV,EAMUpN,UANV,EAOUqN,QAPV,EAQU7K,aARV,EASU8K,OATV,EAUStL,aAVT,EAU+B;AAAA;;AATtB;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAtCT,2BAAkB,CAAlB;AACA,+BAAiC,EAAjC;AAWQ,kBAAM;AAAA;AAAN;AA4BN,SAAKC,IAAL,GAAY1M,UAAU,CAAC,OAAO,KAAKlC,EAAZ,GAAiB,GAAlB,CAAtB;AACA,SAAKka,iBAAL,GAAyB,IAAI9B,gBAAJ,CAAqBwB,SAArB,CAAzB;AACA,SAAKhL,IAAL,CAAU,oBAAV;AACA,SAAKuL,MAAL;AACD;;;;;;;;WAKO,kBAAM;AAAA;;AACZ,UAAMC,IAAI,GAAG,KAAKF,iBAAL,CAAuBG,gBAAvB,EAAb;AACA,WAAKC,KAAL,GAAa,IAAIF,IAAJ,CACX,KAAKG,gBAAL,EADW,EAEX,KAAKX,SAFM,EAGX,KAAKC,cAHM,EAIX,KAAKC,cAJM,EAKX,KAAKC,UALM,EAMX,IANW,EAOX,KAAKpL,aAPM,CAAb,CAFY;;;AAcZ,WAAK6L,yBAAL,GAAiCJ,IAAI,CAAC,8BAAD,CAAJ,IAAwC,CAAzE;AAEA,UAAMK,iBAAiB,GAAG,KAAKC,aAAL,CAAmB,KAAKJ,KAAxB,CAA1B;AACA,UAAMK,gBAAgB,GAAG,KAAKC,gBAAL,CAAsB,KAAKN,KAA3B,CAAzB;AACA,WAAKO,GAAL,GAAW,KAAKP,KAAhB;AACA,WAAKQ,GAAL,GAAW,KAAKR,KAAhB;AACA,WAAKS,cAAL,GAAsB,IAAtB;AACA,WAAKC,UAAL,GAAkB,KAAlB;;;;;;;;AAQAvX,gBAAU,CAAC;;AAET,eAAI,CAAC6W,KAAL,IAAc,OAAI,CAACA,KAAL,CAAWzH,IAAX,CAAgB4H,iBAAhB,EAAmCE,gBAAnC,CAAd;AACD,OAHS,EAGPjX,IAAI,CAACC,KAAL,CAAW,CAAX,CAHO,CAAV;AAKA,UAAMsX,gBAAgB,GAAGb,IAAI,CAAC,gBAAD,CAAJ,IAA0B,CAAnD;;AACA,UAAIa,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,aAAKC,eAAL,GAAuBhT,qBAAqB,CAAC;AAC3C,iBAAI,CAACgT,eAAL,GAAuB,IAAvB;;AACA,cAAI,CAAC,OAAI,CAACF,UAAV,EAAsB;AACpB,gBACE,OAAI,CAACV,KAAL,IACA,OAAI,CAACA,KAAL,CAAWtI,aAAX,GAA2BgH,+BAF7B,EAGE;AACA,qBAAI,CAACpK,IAAL,CACE,0DACE,OAAI,CAAC0L,KAAL,CAAWtI,aADb,GAEE,sCAHJ;;AAKA,qBAAI,CAACgJ,UAAL,GAAkB,IAAlB;;AACA,qBAAI,CAACV,KAAL,CAAWa,qBAAX;AACD,aAXD,MAWO,IACL,OAAI,CAACb,KAAL,IACA,OAAI,CAACA,KAAL,CAAWjJ,SAAX,GAAuB0H,2BAFlB,EAGL;AACA,qBAAI,CAACnK,IAAL,CACE,sDACE,OAAI,CAAC0L,KAAL,CAAWjJ,SADb,GAEE,oCAHJ,EADA;;;AAQD,aAXM,MAWA;AACL,qBAAI,CAACzC,IAAL,CAAU,6CAAV;;AACA,qBAAI,CAACoC,KAAL;AACD;AACF,WA7B0C;;AA+B5C,SA/B2C,EA+BzCtN,IAAI,CAACC,KAAL,CAAWsX,gBAAX,CA/ByC,CAA5C;AAgCD;AACF;;;WAEO,4BAAgB;AACtB,aAAO,OAAO,KAAKjb,EAAZ,GAAiB,GAAjB,GAAuB,KAAKob,eAAL,EAA9B;AACD;;;WAEO,0BAAiBhB,IAAjB,EAAqB;AAAA;;AAC3B,aAAO,uBAAa;AAClB,YAAIA,IAAI,KAAK,OAAI,CAACE,KAAlB,EAAyB;AACvB,iBAAI,CAACe,iBAAL,CAAuBC,aAAvB;AACD,SAFD,MAEO,IAAIlB,IAAI,KAAK,OAAI,CAACW,cAAlB,EAAkC;AACvC,iBAAI,CAACnM,IAAL,CAAU,4BAAV;;AACA,iBAAI,CAAC2M,0BAAL;AACD,SAHM,MAGA;AACL,iBAAI,CAAC3M,IAAL,CAAU,2BAAV;AACD;AACF,OATD;AAUD;;;WAEO,uBAAcwL,IAAd,EAA6B;AAAA;;AACnC,aAAO,UAACxZ,OAAD,EAAmB;AACxB,YAAI,OAAI,CAAC4a,MAAL,KAAW;AAAA;AAAf,UAAgD;AAC9C,cAAIpB,IAAI,KAAK,OAAI,CAACU,GAAlB,EAAuB;AACrB,mBAAI,CAACW,yBAAL,CAA+B7a,OAA/B;AACD,WAFD,MAEO,IAAIwZ,IAAI,KAAK,OAAI,CAACW,cAAlB,EAAkC;AACvC,mBAAI,CAACW,2BAAL,CAAiC9a,OAAjC;AACD,WAFM,MAEA;AACL,mBAAI,CAACgO,IAAL,CAAU,2BAAV;AACD;AACF;AACF,OAVD;AAWD;;;;;;;WAKD,qBAAY+M,OAAZ,EAA2B;;AAEzB,UAAMC,GAAG,GAAG;AAAEC,SAAC,EAAE,GAAL;AAAUlI,SAAC,EAAEgI;AAAb,OAAZ;AACA,WAAKG,SAAL,CAAeF,GAAf;AACD;;;WAED,gCAAoB;AAClB,UAAI,KAAKf,GAAL,KAAa,KAAKE,cAAlB,IAAoC,KAAKD,GAAL,KAAa,KAAKC,cAA1D,EAA0E;AACxE,aAAKnM,IAAL,CACE,6CAA6C,KAAKmM,cAAL,CAAoBzM,MADnE;AAGA,aAAKgM,KAAL,GAAa,KAAKS,cAAlB;AACA,aAAKA,cAAL,GAAsB,IAAtB,CALwE;AAOzE;AACF;;;WAEO,6BAAoBgB,WAApB,EAAyD;AAC/D,UAAI9C,YAAY,IAAI8C,WAApB,EAAiC;AAC/B,YAAMC,GAAG,GAAGD,WAAW,CAAC9C,YAAD,CAAvB;;AACA,YAAI+C,GAAG,KAAKzC,UAAZ,EAAwB;AACtB,eAAK0C,0BAAL;AACD,SAFD,MAEO,IAAID,GAAG,KAAK5C,aAAZ,EAA2B;;AAEhC,eAAKxK,IAAL,CAAU,sCAAV;AACA,eAAKmM,cAAL,CAAoB/J,KAApB,GAHgC;;AAKhC,cACE,KAAK6J,GAAL,KAAa,KAAKE,cAAlB,IACA,KAAKD,GAAL,KAAa,KAAKC,cAFpB,EAGE;AACA,iBAAK/J,KAAL;AACD;AACF,SAXM,MAWA,IAAIgL,GAAG,KAAK1C,YAAZ,EAA0B;AAC/B,eAAK1K,IAAL,CAAU,wBAAV;AACA,eAAKsN,2BAAL;AACA,eAAKD,0BAAL;AACD;AACF;AACF;;;WAEO,qCAA4BE,UAA5B,EAAiD;AACvD,UAAMC,KAAK,GAAW7X,UAAU,CAAC,GAAD,EAAM4X,UAAN,CAAhC;AACA,UAAMtZ,IAAI,GAAY0B,UAAU,CAAC,GAAD,EAAM4X,UAAN,CAAhC;;AACA,UAAIC,KAAK,KAAK,GAAd,EAAmB;AACjB,aAAKC,mBAAL,CAAyBxZ,IAAzB;AACD,OAFD,MAEO,IAAIuZ,KAAK,KAAK,GAAd,EAAmB;;AAExB,aAAKE,mBAAL,CAAyB1X,IAAzB,CAA8B/B,IAA9B;AACD,OAHM,MAGA;AACL,cAAM,IAAIP,KAAJ,CAAU,6BAA6B8Z,KAAvC,CAAN;AACD;AACF;;;WAEO,sCAA0B;AAChC,UAAI,KAAKF,2BAAL,IAAoC,CAAxC,EAA2C;AACzC,aAAKtN,IAAL,CAAU,kCAAV;AACA,aAAKoM,UAAL,GAAkB,IAAlB;AACA,aAAKD,cAAL,CAAoBI,qBAApB;AACA,aAAKoB,mBAAL;AACD,OALD,MAKO;;AAEL,aAAK3N,IAAL,CAAU,4BAAV;AACA,aAAKmM,cAAL,CAAoBnD,IAApB,CAAyB;AAAEiE,WAAC,EAAE,GAAL;AAAUlI,WAAC,EAAE;AAAEkI,aAAC,EAAEpC,IAAL;AAAW9F,aAAC,EAAE;AAAd;AAAb,SAAzB;AACD;AACF;;;WAEO,+BAAmB;;AAEzB,WAAKoH,cAAL,CAAoByB,KAApB,GAFyB;;AAIzB,WAAK5N,IAAL,CAAU,iCAAV;AACA,WAAKmM,cAAL,CAAoBnD,IAApB,CAAyB;AAAEiE,SAAC,EAAE,GAAL;AAAUlI,SAAC,EAAE;AAAEkI,WAAC,EAAEtC,UAAL;AAAiB5F,WAAC,EAAE;AAApB;AAAb,OAAzB,EALyB;;;AASzB,WAAK/E,IAAL,CAAU,gCAAV;AACA,WAAK0L,KAAL,CAAW1C,IAAX,CAAgB;AAAEiE,SAAC,EAAE,GAAL;AAAUlI,SAAC,EAAE;AAAEkI,WAAC,EAAErC,gBAAL;AAAuB7F,WAAC,EAAE;AAA1B;AAAb,OAAhB;AACA,WAAKkH,GAAL,GAAW,KAAKE,cAAhB;AAEA,WAAK0B,oBAAL;AACD;;;WAEO,mCAA0BN,UAA1B,EAA8D;;AAEpE,UAAMC,KAAK,GAAW7X,UAAU,CAAC,GAAD,EAAM4X,UAAN,CAAhC;AACA,UAAMtZ,IAAI,GAAY0B,UAAU,CAAC,GAAD,EAAM4X,UAAN,CAAhC;;AACA,UAAIC,KAAK,KAAK,GAAd,EAAmB;AACjB,aAAKM,UAAL,CAAgB7Z,IAAhB;AACD,OAFD,MAEO,IAAIuZ,KAAK,KAAK,GAAd,EAAmB;AACxB,aAAKO,cAAL,CAAoB9Z,IAApB;AACD;AACF;;;WAEO,wBAAejC,OAAf,EAA+B;AACrC,WAAKgc,kBAAL,GADqC;;AAIrC,WAAKjQ,UAAL,CAAgB/L,OAAhB;AACD;;;WAEO,8BAAkB;AACxB,UAAI,CAAC,KAAKoa,UAAV,EAAsB;AACpB,aAAKR,yBAAL;;AACA,YAAI,KAAKA,yBAAL,IAAkC,CAAtC,EAAyC;AACvC,eAAK5L,IAAL,CAAU,gCAAV;AACA,eAAKoM,UAAL,GAAkB,IAAlB;AACA,eAAKV,KAAL,CAAWa,qBAAX;AACD;AACF;AACF;;;WAEO,oBAAWY,WAAX,EAAgD;AACtD,UAAMC,GAAG,GAAWzX,UAAU,CAAC0U,YAAD,EAAe8C,WAAf,CAA9B;;AACA,UAAI7C,YAAY,IAAI6C,WAApB,EAAiC;AAC/B,YAAMc,OAAO,GAAGd,WAAW,CAAC7C,YAAD,CAA3B;;AACA,YAAI8C,GAAG,KAAKtC,YAAZ,EAA0B;AACxB,eAAKoD,YAAL,CACED,OADF;AAQD,SATD,MASO,IAAIb,GAAG,KAAKxC,gBAAZ,EAA8B;AACnC,eAAK5K,IAAL,CAAU,mCAAV;AACA,eAAKkM,GAAL,GAAW,KAAKC,cAAhB;;AACA,eAAK,IAAIla,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKyb,mBAAL,CAAyBxb,MAA7C,EAAqD,EAAED,CAAvD,EAA0D;AACxD,iBAAK8b,cAAL,CAAoB,KAAKL,mBAAL,CAAyBzb,CAAzB,CAApB;AACD;;AACD,eAAKyb,mBAAL,GAA2B,EAA3B;AACA,eAAKG,oBAAL;AACD,SARM,MAQA,IAAIT,GAAG,KAAK7C,gBAAZ,EAA8B;;;AAGnC,eAAK4D,qBAAL,CAA2BF,OAA3B;AACD,SAJM,MAIA,IAAIb,GAAG,KAAK5C,aAAZ,EAA2B;;AAEhC,eAAK4D,QAAL,CAAcH,OAAd;AACD,SAHM,MAGA,IAAIb,GAAG,KAAK3C,aAAZ,EAA2B;AAChCjX,eAAK,CAAC,mBAAmBya,OAApB,CAAL;AACD,SAFM,MAEA,IAAIb,GAAG,KAAK1C,YAAZ,EAA0B;AAC/B,eAAK1K,IAAL,CAAU,sBAAV;AACA,eAAKgO,kBAAL;AACA,eAAKK,6BAAL;AACD,SAJM,MAIA;AACL7a,eAAK,CAAC,qCAAqC4Z,GAAtC,CAAL;AACD;AACF;AACF;;;;;;;WAKO,sBAAakB,SAAb,EAKP;AACC,UAAMC,SAAS,GAAGD,SAAS,CAACnJ,EAA5B;AACA,UAAM3V,OAAO,GAAG8e,SAAS,CAAC3X,CAA1B;AACA,UAAMqF,IAAI,GAAGsS,SAAS,CAACE,CAAvB;AACA,WAAKC,SAAL,GAAiBH,SAAS,CAACvX,CAA3B;AACA,WAAKiU,SAAL,CAAehP,IAAf,GAAsBA,IAAtB,CALD;;AAOC,UAAI,KAAK4Q,MAAL,KAAW;AAAA;AAAf,QAA8C;AAC5C,aAAKlB,KAAL,CAAWkC,KAAX;AACA,aAAKc,wBAAL,CAA8B,KAAKhD,KAAnC,EAA0C6C,SAA1C;;AACA,YAAInT,gBAAgB,KAAK5L,OAAzB,EAAkC;AAChCmE,cAAI,CAAC,oCAAD,CAAJ;AACD,SAL2C;;;AAO5C,aAAKgb,gBAAL;AACD;AACF;;;WAEO,4BAAgB;AACtB,UAAMnD,IAAI,GAAG,KAAKF,iBAAL,CAAuBsD,gBAAvB,EAAb;;AACA,UAAIpD,IAAJ,EAAU;AACR,aAAKqD,aAAL,CAAmBrD,IAAnB;AACD;AACF;;;WAEO,uBAAcA,IAAd,EAAwC;AAAA;;AAC9C,WAAKW,cAAL,GAAsB,IAAIX,IAAJ,CACpB,KAAKG,gBAAL,EADoB,EAEpB,KAAKX,SAFe,EAGpB,KAAKC,cAHe,EAIpB,KAAKC,cAJe,EAKpB,KAAKC,UALe,EAMpB,KAAKsD,SANe,CAAtB,CAD8C;;;AAW9C,WAAKnB,2BAAL,GACE9B,IAAI,CAAC,8BAAD,CAAJ,IAAwC,CAD1C;AAGA,UAAMpL,SAAS,GAAG,KAAK0L,aAAL,CAAmB,KAAKK,cAAxB,CAAlB;AACA,UAAM9L,YAAY,GAAG,KAAK2L,gBAAL,CAAsB,KAAKG,cAA3B,CAArB;AACA,WAAKA,cAAL,CAAoBlI,IAApB,CAAyB7D,SAAzB,EAAoCC,YAApC,EAhB8C;;AAmB9C/G,2BAAqB,CAAC;AACpB,YAAI,OAAI,CAAC6S,cAAT,EAAyB;AACvB,iBAAI,CAACnM,IAAL,CAAU,8BAAV;;AACA,iBAAI,CAACmM,cAAL,CAAoB/J,KAApB;AACD;AACF,OALoB,EAKlBtN,IAAI,CAACC,KAAL,CAAWkV,eAAX,CALkB,CAArB;AAMD;;;WAEO,kBAASjO,IAAT,EAAqB;AAC3B,WAAKgE,IAAL,CAAU,uCAAuChE,IAAjD;AACA,WAAKgP,SAAL,CAAehP,IAAf,GAAsBA,IAAtB,CAF2B;;;AAK3B,UAAI,KAAK4Q,MAAL,KAAW;AAAA;AAAf,QAA6C;AAC3C,aAAKxK,KAAL;AACD,OAFD,MAEO;;AAEL,aAAK0M,iBAAL;AACA,aAAKvD,MAAL;AACD;AACF;;;WAEO,kCAAyBC,IAAzB,EAA0C+C,SAA1C,EAA2D;AAAA;;AACjE,WAAKvO,IAAL,CAAU,kCAAV;AACA,WAAK0L,KAAL,GAAaF,IAAb;AACA,WAAKoB,MAAL,GAAW;AAAA;AAAX;;AAEA,UAAI,KAAKxB,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcmD,SAAd,EAAyB,KAAKE,SAA9B;AACA,aAAKrD,QAAL,GAAgB,IAAhB;AACD,OARgE;;;;AAYjE,UAAI,KAAKQ,yBAAL,KAAmC,CAAvC,EAA0C;AACxC,aAAK5L,IAAL,CAAU,gCAAV;AACA,aAAKoM,UAAL,GAAkB,IAAlB;AACD,OAHD,MAGO;AACL9S,6BAAqB,CAAC;AACpB,iBAAI,CAAC+U,6BAAL;AACD,SAFoB,EAElBvZ,IAAI,CAACC,KAAL,CAAWmV,mCAAX,CAFkB,CAArB;AAGD;AACF;;;WAEO,yCAA6B;;AAEnC,UAAI,CAAC,KAAKkC,UAAN,IAAoB,KAAKQ,MAAL,KAAW;AAAA;AAAnC,QAAiE;AAC/D,aAAK5M,IAAL,CAAU,0BAAV;AACA,aAAKkN,SAAL,CAAe;AAAED,WAAC,EAAE,GAAL;AAAUlI,WAAC,EAAE;AAAEkI,aAAC,EAAEpC,IAAL;AAAW9F,aAAC,EAAE;AAAd;AAAb,SAAf;AACD;AACF;;;WAEO,sCAA0B;AAChC,UAAMyG,IAAI,GAAG,KAAKW,cAAlB;AACA,WAAKA,cAAL,GAAsB,IAAtB;;AACA,UAAI,KAAKF,GAAL,KAAaT,IAAb,IAAqB,KAAKU,GAAL,KAAaV,IAAtC,EAA4C;;AAE1C,aAAKpJ,KAAL;AACD;AACF;;;;;;;;WAMO,2BAAkBsK,aAAlB,EAAwC;AAC9C,WAAKhB,KAAL,GAAa,IAAb,CAD8C;;;AAK9C,UAAI,CAACgB,aAAD,IAAkB,KAAKE,MAAL,KAAW;AAAA;AAAjC,QAAgE;AAC9D,aAAK5M,IAAL,CAAU,6BAAV,EAD8D;;AAG9D,YAAI,KAAKgL,SAAL,CAAerO,eAAf,EAAJ,EAAsC;AACpC5L,2BAAiB,CAACoC,MAAlB,CAAyB,UAAU,KAAK6X,SAAL,CAAehP,IAAlD,EADoC;;AAGpC,eAAKgP,SAAL,CAAevO,YAAf,GAA8B,KAAKuO,SAAL,CAAehP,IAA7C;AACD;AACF,OARD,MAQO,IAAI,KAAK4Q,MAAL,KAAW;AAAA;AAAf,QAA6C;AAClD,aAAK5M,IAAL,CAAU,2BAAV;AACD;;AAED,WAAKoC,KAAL;AACD;;;WAEO,+BAAsB3J,MAAtB,EAAoC;AAC1C,WAAKuH,IAAL,CAAU,wDAAV;;AAEA,UAAI,KAAKqL,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAa5S,MAAb;AACA,aAAK4S,OAAL,GAAe,IAAf;AACD,OANyC;;;;AAU1C,WAAK9K,aAAL,GAAqB,IAArB;AAEA,WAAK6B,KAAL;AACD;;;WAEO,mBAAUnO,IAAV,EAAsB;AAC5B,UAAI,KAAK2Y,MAAL,KAAW;AAAA;AAAf,QAA6C;AAC3C,cAAM,6BAAN;AACD,OAFD,MAEO;AACL,aAAKX,GAAL,CAASjD,IAAT,CAAc/U,IAAd;AACD;AACF;;;;;;;WAKD,iBAAK;AACH,UAAI,KAAK2Y,MAAL,KAAW;AAAA;AAAf,QAAgD;AAC9C,aAAK5M,IAAL,CAAU,8BAAV;AACA,aAAK4M,MAAL,GAAW;AAAA;AAAX;AAEA,aAAKkC,iBAAL;;AAEA,YAAI,KAAKvO,aAAT,EAAwB;AACtB,eAAKA,aAAL;AACA,eAAKA,aAAL,GAAqB,IAArB;AACD;AACF;AACF;;;WAEO,6BAAiB;AACvB,WAAKP,IAAL,CAAU,+BAAV;;AACA,UAAI,KAAK0L,KAAT,EAAgB;AACd,aAAKA,KAAL,CAAWtJ,KAAX;AACA,aAAKsJ,KAAL,GAAa,IAAb;AACD;;AAED,UAAI,KAAKS,cAAT,EAAyB;AACvB,aAAKA,cAAL,CAAoB/J,KAApB;AACA,aAAK+J,cAAL,GAAsB,IAAtB;AACD;;AAED,UAAI,KAAKG,eAAT,EAA0B;AACxBjL,oBAAY,CAAC,KAAKiL,eAAN,CAAZ;AACA,aAAKA,eAAL,GAAuB,IAAvB;AACD;AACF;;;;;ACvjBH;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;IAMsByC,a;;;;;;;WAkBpB,aACEC,UADF,EAEE/a,IAFF,EAGEgb,UAHF,EAIEC,IAJF,EAIe,CACX;;;WAEJ,eACEF,UADF,EAEE/a,IAFF,EAGEgb,UAHF,EAIEC,IAJF,EAIe,CACX;;;;;;;;WAMJ,0BAAiBC,KAAjB,EAA8B,CAAI;;;;;;;;WAMlC,8BAAqBA,KAArB,EAAkC,CAAI;;;WAEtC,yBACEH,UADF,EAEE/a,IAFF,EAGEgb,UAHF,EAG6C,CACzC;;;WAEJ,2BACED,UADF,EAEE/a,IAFF,EAGEgb,UAHF,EAG6C,CACzC;;;WAEJ,4BACED,UADF,EAEEC,UAFF,EAE6C,CACzC;;;WAEJ,qBAAYG,KAAZ,EAA2C,CAAI;;;;;ACtFjD;;;;;;;;;;;;;;;;;AAmBA;;;;;;IAIsBC,Y;AAQpB,wBAAoBC,cAApB,EAA4C;AAAA;;AAAxB;AAPZ,sBAKJ,EALI;AAQN1c,UAAM,CACJR,KAAK,CAACC,OAAN,CAAcid,cAAd,KAAiCA,cAAc,CAACpd,MAAf,GAAwB,CADrD,EAEJ,4BAFI,CAAN;AAID;;;;;;;;WAaS,iBAAQqd,SAAR,EAAgD;AACxD,UAAInd,KAAK,CAACC,OAAN,CAAc,KAAKmd,UAAL,CAAgBD,SAAhB,CAAd,CAAJ,EAA+C;;AAE7C,YAAME,SAAS,sBAAO,KAAKD,UAAL,CAAgBD,SAAhB,CAAP,CAAf;;AAF6C,2CADTlc,OACS;AADTA,iBACS;AAAA;;AAI7C,aAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwd,SAAS,CAACvd,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCwd,mBAAS,CAACxd,CAAD,CAAT,CAAagM,QAAb,CAAsB3L,KAAtB,CAA4Bmd,SAAS,CAACxd,CAAD,CAAT,CAAayd,OAAzC,EAAkDrc,OAAlD;AACD;AACF;AACF;;;WAED,YAAGkc,SAAH,EAAsBtR,QAAtB,EAAsDyR,OAAtD,EAAsE;AACpE,WAAKC,kBAAL,CAAwBJ,SAAxB;AACA,WAAKC,UAAL,CAAgBD,SAAhB,IAA6B,KAAKC,UAAL,CAAgBD,SAAhB,KAA8B,EAA3D;AACA,WAAKC,UAAL,CAAgBD,SAAhB,EAA2BvZ,IAA3B,CAAgC;AAAEiI,gBAAQ,EAARA,QAAF;AAAYyR,eAAO,EAAPA;AAAZ,OAAhC;AAEA,UAAME,SAAS,GAAG,KAAKC,eAAL,CAAqBN,SAArB,CAAlB;;AACA,UAAIK,SAAJ,EAAe;AACb3R,gBAAQ,CAAC3L,KAAT,CAAeod,OAAf,EAAwBE,SAAxB;AACD;AACF;;;WAED,aAAIL,SAAJ,EAAuBtR,QAAvB,EAAuDyR,OAAvD,EAAuE;AACrE,WAAKC,kBAAL,CAAwBJ,SAAxB;AACA,UAAME,SAAS,GAAG,KAAKD,UAAL,CAAgBD,SAAhB,KAA8B,EAAhD;;AACA,WAAK,IAAItd,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwd,SAAS,CAACvd,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YACEwd,SAAS,CAACxd,CAAD,CAAT,CAAagM,QAAb,KAA0BA,QAA1B,KACC,CAACyR,OAAD,IAAYA,OAAO,KAAKD,SAAS,CAACxd,CAAD,CAAT,CAAayd,OADtC,CADF,EAGE;AACAD,mBAAS,CAACK,MAAV,CAAiB7d,CAAjB,EAAoB,CAApB;AACA;AACD;AACF;AACF;;;WAEO,4BAAmBsd,SAAnB,EAAoC;AAC1C3c,YAAM,CACJ,KAAK0c,cAAL,CAAoBS,IAApB,CAAyB,YAAE;AACzB,eAAOC,EAAE,KAAKT,SAAd;AACD,OAFD,CADI,EAIJ,oBAAoBA,SAJhB,CAAN;AAMD;;;;;AC5FH;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;IAOaU,a;;;;;AAOX;AAAA;;AAAA;;AACE,gCAAM,CAAC,QAAD,CAAN;AAPM,sBAAU,IAAV,CAMR;;;;;AAOE,QACE,OAAOrf,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACoE,gBAAd,KAAmC,WADnC,IAEA,CAACkb,eAAe,EAHlB,EAIE;AACAtf,YAAM,CAACoE,gBAAP,CACE,QADF,EAEE;AACE,YAAI,CAAC,QAAKmb,OAAV,EAAmB;AACjB,kBAAKA,OAAL,GAAe,IAAf;;AACA,kBAAKC,OAAL,CAAa,QAAb,EAAuB,IAAvB;AACD;AACF,OAPH,EAQE,KARF;AAWAxf,YAAM,CAACoE,gBAAP,CACE,SADF,EAEE;AACE,YAAI,QAAKmb,OAAT,EAAkB;AAChB,kBAAKA,OAAL,GAAe,KAAf;;AACA,kBAAKC,OAAL,CAAa,QAAb,EAAuB,KAAvB;AACD;AACF,OAPH,EAQE,KARF;AAUD;;AAjCH;AAkCC;;;;WAED,yBAAgBb,SAAhB,EAAiC;AAC/B3c,YAAM,CAAC2c,SAAS,KAAK,QAAf,EAAyB,yBAAyBA,SAAlD,CAAN;AACA,aAAO,CAAC,KAAKY,OAAN,CAAP;AACD;;;WAED,2BAAe;AACb,aAAO,KAAKA,OAAZ;AACD;;;WA/CD,uBAAkB;AAChB,aAAO,IAAIF,aAAJ,EAAP;AACD;;;;EALgCZ,Y;AC5BnC;;;;;;;;;;;;;;;;;AAqBA;;;AACA,IAAMgB,cAAc,GAAG,EAAvB;AAEA;;AACA,IAAMC,qBAAqB,GAAG,GAA9B;AAEA;;;;;;IAMaC,I;;;;;AAQX,gBAAYC,YAAZ,EAA6CC,QAA7C,EAA8D;AAAA;;AAC5D,QAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AACvB,WAAKC,OAAL,GAAgBF,YAAuB,CAACG,KAAxB,CAA8B,GAA9B,CAAhB,CADuB;;AAIvB,UAAIC,MAAM,GAAG,CAAb;;AACA,WAAK,IAAI3e,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKye,OAAL,CAAaxe,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAI,KAAKye,OAAL,CAAaze,CAAb,EAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,eAAKwe,OAAL,CAAaE,MAAb,IAAuB,KAAKF,OAAL,CAAaze,CAAb,CAAvB;AACA2e,gBAAM;AACP;AACF;;AACD,WAAKF,OAAL,CAAaxe,MAAb,GAAsB0e,MAAtB;AAEA,WAAKC,SAAL,GAAiB,CAAjB;AACD,KAdD,MAcO;AACL,WAAKH,OAAL,GAAeF,YAAf;AACA,WAAKK,SAAL,GAAiBJ,QAAjB;AACD;AACF;;;;WAED,oBAAQ;AACN,UAAIzB,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAI/c,CAAC,GAAG,KAAK4e,SAAlB,EAA6B5e,CAAC,GAAG,KAAKye,OAAL,CAAaxe,MAA9C,EAAsDD,CAAC,EAAvD,EAA2D;AACzD,YAAI,KAAKye,OAAL,CAAaze,CAAb,MAAoB,EAAxB,EAA4B;AAC1B+c,oBAAU,IAAI,MAAM,KAAK0B,OAAL,CAAaze,CAAb,CAApB;AACD;AACF;;AAED,aAAO+c,UAAU,IAAI,GAArB;AACD;;;;;;SAGa8B,eAAY;AAC1B,SAAO,IAAIP,IAAJ,CAAS,EAAT,CAAP;AACD;;SAEeQ,aAAaC,MAAU;AACrC,MAAIA,IAAI,CAACH,SAAL,IAAkBG,IAAI,CAACN,OAAL,CAAaxe,MAAnC,EAA2C;AACzC,WAAO,IAAP;AACD;;AAED,SAAO8e,IAAI,CAACN,OAAL,CAAaM,IAAI,CAACH,SAAlB,CAAP;AACD;AAED;;;;;SAGgBI,cAAcD,MAAU;AACtC,SAAOA,IAAI,CAACN,OAAL,CAAaxe,MAAb,GAAsB8e,IAAI,CAACH,SAAlC;AACD;;SAEeK,aAAaF,MAAU;AACrC,MAAIP,QAAQ,GAAGO,IAAI,CAACH,SAApB;;AACA,MAAIJ,QAAQ,GAAGO,IAAI,CAACN,OAAL,CAAaxe,MAA5B,EAAoC;AAClCue,YAAQ;AACT;;AACD,SAAO,IAAIF,IAAJ,CAASS,IAAI,CAACN,OAAd,EAAuBD,QAAvB,CAAP;AACD;;SAEeU,YAAYH,MAAU;AACpC,MAAIA,IAAI,CAACH,SAAL,GAAiBG,IAAI,CAACN,OAAL,CAAaxe,MAAlC,EAA0C;AACxC,WAAO8e,IAAI,CAACN,OAAL,CAAaM,IAAI,CAACN,OAAL,CAAaxe,MAAb,GAAsB,CAAnC,CAAP;AACD;;AAED,SAAO,IAAP;AACD;;SAEekf,uBAAuBJ,MAAU;AAC/C,MAAIhC,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAI/c,CAAC,GAAG+e,IAAI,CAACH,SAAlB,EAA6B5e,CAAC,GAAG+e,IAAI,CAACN,OAAL,CAAaxe,MAA9C,EAAsDD,CAAC,EAAvD,EAA2D;AACzD,QAAI+e,IAAI,CAACN,OAAL,CAAaze,CAAb,MAAoB,EAAxB,EAA4B;AAC1B+c,gBAAU,IAAI,MAAMqC,kBAAkB,CAACzI,MAAM,CAACoI,IAAI,CAACN,OAAL,CAAaze,CAAb,CAAD,CAAP,CAAtC;AACD;AACF;;AAED,SAAO+c,UAAU,IAAI,GAArB;AACD;AAED;;;;;;SAIgBsC,UAAUN,MAA6B;AAAA,MAAjBO,KAAiB,uEAAD,CAAC;AACrD,SAAOP,IAAI,CAACN,OAAL,CAAac,KAAb,CAAmBR,IAAI,CAACH,SAAL,GAAiBU,KAApC,CAAP;AACD;;SAEeE,WAAWT,MAAU;AACnC,MAAIA,IAAI,CAACH,SAAL,IAAkBG,IAAI,CAACN,OAAL,CAAaxe,MAAnC,EAA2C;AACzC,WAAO,IAAP;AACD;;AAED,MAAMwf,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIzf,CAAC,GAAG+e,IAAI,CAACH,SAAlB,EAA6B5e,CAAC,GAAG+e,IAAI,CAACN,OAAL,CAAaxe,MAAb,GAAsB,CAAvD,EAA0DD,CAAC,EAA3D,EAA+D;AAC7Dyf,UAAM,CAAC1b,IAAP,CAAYgb,IAAI,CAACN,OAAL,CAAaze,CAAb,CAAZ;AACD;;AAED,SAAO,IAAIse,IAAJ,CAASmB,MAAT,EAAiB,CAAjB,CAAP;AACD;;SAEeC,UAAUX,MAAYY,cAA2B;AAC/D,MAAMF,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIzf,CAAC,GAAG+e,IAAI,CAACH,SAAlB,EAA6B5e,CAAC,GAAG+e,IAAI,CAACN,OAAL,CAAaxe,MAA9C,EAAsDD,CAAC,EAAvD,EAA2D;AACzDyf,UAAM,CAAC1b,IAAP,CAAYgb,IAAI,CAACN,OAAL,CAAaze,CAAb,CAAZ;AACD;;AAED,MAAI2f,YAAY,YAAYrB,IAA5B,EAAkC;AAChC,SAAK,IAAIte,EAAC,GAAG2f,YAAY,CAACf,SAA1B,EAAqC5e,EAAC,GAAG2f,YAAY,CAAClB,OAAb,CAAqBxe,MAA9D,EAAsED,EAAC,EAAvE,EAA2E;AACzEyf,YAAM,CAAC1b,IAAP,CAAY4b,YAAY,CAAClB,OAAb,CAAqBze,EAArB,CAAZ;AACD;AACF,GAJD,MAIO;AACL,QAAM4f,WAAW,GAAGD,YAAY,CAACjB,KAAb,CAAmB,GAAnB,CAApB;;AACA,SAAK,IAAI1e,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG4f,WAAW,CAAC3f,MAAhC,EAAwCD,GAAC,EAAzC,EAA6C;AAC3C,UAAI4f,WAAW,CAAC5f,GAAD,CAAX,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7Bwf,cAAM,CAAC1b,IAAP,CAAY6b,WAAW,CAAC5f,GAAD,CAAvB;AACD;AACF;AACF;;AAED,SAAO,IAAIse,IAAJ,CAASmB,MAAT,EAAiB,CAAjB,CAAP;AACD;AAED;;;;;SAGgBI,YAAYd,MAAU;AACpC,SAAOA,IAAI,CAACH,SAAL,IAAkBG,IAAI,CAACN,OAAL,CAAaxe,MAAtC;AACD;AAED;;;;;SAGgB6f,gBAAgBC,WAAiBC,WAAe;AAC9D,MAAMC,KAAK,GAAGnB,YAAY,CAACiB,SAAD,CAA1B;AAAA,MACEG,KAAK,GAAGpB,YAAY,CAACkB,SAAD,CADtB;;AAEA,MAAIC,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAOD,SAAP;AACD,GAFD,MAEO,IAAIC,KAAK,KAAKC,KAAd,EAAqB;AAC1B,WAAOJ,eAAe,CAACb,YAAY,CAACc,SAAD,CAAb,EAA0Bd,YAAY,CAACe,SAAD,CAAtC,CAAtB;AACD,GAFM,MAEA;AACL,UAAM,IAAIve,KAAJ,CACJ,gCACEue,SADF,GAEE,kBAFF,GAGE,aAHF,GAIED,SAJF,GAKE,GANE,CAAN;AAQD;AACF;AAED;;;;;SAGgBI,YAAYC,MAAYC,OAAW;AACjD,MAAMC,QAAQ,GAAGjB,SAAS,CAACe,IAAD,EAAO,CAAP,CAA1B;AACA,MAAMG,SAAS,GAAGlB,SAAS,CAACgB,KAAD,EAAQ,CAAR,CAA3B;;AACA,OAAK,IAAIrgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsgB,QAAQ,CAACrgB,MAAb,IAAuBD,CAAC,GAAGugB,SAAS,CAACtgB,MAArD,EAA6DD,CAAC,EAA9D,EAAkE;AAChE,QAAMwgB,GAAG,GAAGrd,WAAW,CAACmd,QAAQ,CAACtgB,CAAD,CAAT,EAAcugB,SAAS,CAACvgB,CAAD,CAAvB,CAAvB;;AACA,QAAIwgB,GAAG,KAAK,CAAZ,EAAe;AACb,aAAOA,GAAP;AACD;AACF;;AACD,MAAIF,QAAQ,CAACrgB,MAAT,KAAoBsgB,SAAS,CAACtgB,MAAlC,EAA0C;AACxC,WAAO,CAAP;AACD;;AACD,SAAOqgB,QAAQ,CAACrgB,MAAT,GAAkBsgB,SAAS,CAACtgB,MAA5B,GAAqC,CAAC,CAAtC,GAA0C,CAAjD;AACD;AAED;;;;;SAGgBwgB,WAAW1B,MAAY2B,OAAW;AAChD,MAAI1B,aAAa,CAACD,IAAD,CAAb,KAAwBC,aAAa,CAAC0B,KAAD,CAAzC,EAAkD;AAChD,WAAO,KAAP;AACD;;AAED,OACE,IAAI1gB,CAAC,GAAG+e,IAAI,CAACH,SAAb,EAAwB+B,CAAC,GAAGD,KAAK,CAAC9B,SADpC,EAEE5e,CAAC,IAAI+e,IAAI,CAACN,OAAL,CAAaxe,MAFpB,EAGED,CAAC,IAAI2gB,CAAC,EAHR,EAIE;AACA,QAAI5B,IAAI,CAACN,OAAL,CAAaze,CAAb,MAAoB0gB,KAAK,CAACjC,OAAN,CAAckC,CAAd,CAAxB,EAA0C;AACxC,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAED;;;;;SAGgBC,aAAa7B,MAAY2B,OAAW;AAClD,MAAI1gB,CAAC,GAAG+e,IAAI,CAACH,SAAb;AACA,MAAI+B,CAAC,GAAGD,KAAK,CAAC9B,SAAd;;AACA,MAAII,aAAa,CAACD,IAAD,CAAb,GAAsBC,aAAa,CAAC0B,KAAD,CAAvC,EAAgD;AAC9C,WAAO,KAAP;AACD;;AACD,SAAO1gB,CAAC,GAAG+e,IAAI,CAACN,OAAL,CAAaxe,MAAxB,EAAgC;AAC9B,QAAI8e,IAAI,CAACN,OAAL,CAAaze,CAAb,MAAoB0gB,KAAK,CAACjC,OAAN,CAAckC,CAAd,CAAxB,EAA0C;AACxC,aAAO,KAAP;AACD;;AACD,MAAE3gB,CAAF;AACA,MAAE2gB,CAAF;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;IAUaE,c;;;;;AASX,wBAAY9B,IAAZ,EAA+B+B,YAA/B,EAAmD;AAAA;;AAApB;AAC7B,OAAKC,MAAL,GAAc1B,SAAS,CAACN,IAAD,EAAO,CAAP,CAAvB;;;AAEA,OAAKiC,WAAL,GAAmBne,IAAI,CAACoe,GAAL,CAAS,CAAT,EAAY,KAAKF,MAAL,CAAY9gB,MAAxB,CAAnB;;AAEA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK+gB,MAAL,CAAY9gB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,SAAKghB,WAAL,IAAoBE,YAAY,CAAC,KAAKH,MAAL,CAAY/gB,CAAZ,CAAD,CAAhC;AACD;;AACDmhB,0BAAwB,CAAC,IAAD,CAAxB;AACD,C;;SAGaC,mBACdC,gBACAC,OAAa;;AAGb,MAAID,cAAc,CAACN,MAAf,CAAsB9gB,MAAtB,GAA+B,CAAnC,EAAsC;AACpCohB,kBAAc,CAACL,WAAf,IAA8B,CAA9B;AACD;;AACDK,gBAAc,CAACN,MAAf,CAAsBhd,IAAtB,CAA2Bud,KAA3B;AACAD,gBAAc,CAACL,WAAf,IAA8BE,YAAY,CAACI,KAAD,CAA1C;AACAH,0BAAwB,CAACE,cAAD,CAAxB;AACD;;SAEeE,kBAAkBF,gBAA8B;AAC9D,MAAMG,IAAI,GAAGH,cAAc,CAACN,MAAf,CAAsBU,GAAtB,EAAb;AACAJ,gBAAc,CAACL,WAAf,IAA8BE,YAAY,CAACM,IAAD,CAA1C,CAF8D;;AAI9D,MAAIH,cAAc,CAACN,MAAf,CAAsB9gB,MAAtB,GAA+B,CAAnC,EAAsC;AACpCohB,kBAAc,CAACL,WAAf,IAA8B,CAA9B;AACD;AACF;;AAED,SAASG,wBAAT,CAAkCE,cAAlC,EAAgE;AAC9D,MAAIA,cAAc,CAACL,WAAf,GAA6B3C,qBAAjC,EAAwD;AACtD,UAAM,IAAI5c,KAAJ,CACJ4f,cAAc,CAACP,YAAf,GACE,6BADF,GAEEzC,qBAFF,GAGE,UAHF,GAIEgD,cAAc,CAACL,WAJjB,GAKE,IANE,CAAN;AAQD;;AACD,MAAIK,cAAc,CAACN,MAAf,CAAsB9gB,MAAtB,GAA+Bme,cAAnC,EAAmD;AACjD,UAAM,IAAI3c,KAAJ,CACJ4f,cAAc,CAACP,YAAf,GACE,gEADF,GAEE1C,cAFF,GAGE,+BAHF,GAIEsD,2BAA2B,CAACL,cAAD,CALzB,CAAN;AAOD;AACF;AAED;;;;;SAGgBK,4BACdL,gBAA8B;AAE9B,MAAIA,cAAc,CAACN,MAAf,CAAsB9gB,MAAtB,KAAiC,CAArC,EAAwC;AACtC,WAAO,EAAP;AACD;;AACD,SAAO,kBAAkBohB,cAAc,CAACN,MAAf,CAAsBtb,IAAtB,CAA2B,GAA3B,CAAlB,GAAoD,GAA3D;AACF;AC/UA;;;;;;;;;;;;;;;;;;IAuBakc,iB;;;;;AAOX;AAAA;;AAAA;;AACE,iCAAM,CAAC,SAAD,CAAN;AACA,QAAIC,MAAJ;AACA,QAAIC,gBAAJ;;AACA,QACE,OAAOtf,QAAP,KAAoB,WAApB,IACA,OAAOA,QAAQ,CAACQ,gBAAhB,KAAqC,WAFvC,EAGE;AACA,UAAI,OAAOR,QAAQ,CAAC,QAAD,CAAf,KAA8B,WAAlC,EAA+C;;AAE7Csf,wBAAgB,GAAG,kBAAnB;AACAD,cAAM,GAAG,QAAT;AACD,OAJD,MAIO,IAAI,OAAOrf,QAAQ,CAAC,WAAD,CAAf,KAAiC,WAArC,EAAkD;AACvDsf,wBAAgB,GAAG,qBAAnB;AACAD,cAAM,GAAG,WAAT;AACD,OAHM,MAGA,IAAI,OAAOrf,QAAQ,CAAC,UAAD,CAAf,KAAgC,WAApC,EAAiD;AACtDsf,wBAAgB,GAAG,oBAAnB;AACAD,cAAM,GAAG,UAAT;AACD,OAHM,MAGA,IAAI,OAAOrf,QAAQ,CAAC,cAAD,CAAf,KAAoC,WAAxC,EAAqD;AAC1Dsf,wBAAgB,GAAG,wBAAnB;AACAD,cAAM,GAAG,cAAT;AACD;AACF,KAtBH;;;;;;AA4BE,YAAKE,QAAL,GAAgB,IAAhB;;AAEA,QAAID,gBAAJ,EAAsB;AACpBtf,cAAQ,CAACQ,gBAAT,CACE8e,gBADF,EAEE;AACE,YAAME,OAAO,GAAG,CAACxf,QAAQ,CAACqf,MAAD,CAAzB;;AACA,YAAIG,OAAO,KAAK,QAAKD,QAArB,EAA+B;AAC7B,kBAAKA,QAAL,GAAgBC,OAAhB;;AACA,kBAAK5D,OAAL,CAAa,SAAb,EAAwB4D,OAAxB;AACD;AACF,OARH,EASE,KATF;AAWD;;AA1CH;AA2CC;;;;WAED,yBAAgBzE,SAAhB,EAAiC;AAC/B3c,YAAM,CAAC2c,SAAS,KAAK,SAAf,EAA0B,yBAAyBA,SAAnD,CAAN;AACA,aAAO,CAAC,KAAKwE,QAAN,CAAP;AACD;;;WApDD,uBAAkB;AAChB,aAAO,IAAIH,iBAAJ,EAAP;AACD;;;;EALoCvE,Y;ACvBvC;;;;;;;;;;;;;;;;;;AA4CA,IAAM4E,mBAAmB,GAAG,IAA5B;AACA,IAAMC,2BAA2B,GAAG,KAAK,CAAL,GAAS,IAA7C,C,CAAkD;;AAClD,IAAMC,mBAAmB,GAAG,IAAI,IAAhC;AACA,IAAMC,8BAA8B,GAAG,KAAK,IAA5C,C,CAAiD;;AACjD,IAAMC,0BAA0B,GAAG,GAAnC;AACA,IAAMC,6BAA6B,GAAG,KAAtC,C,CAA4C;;AAC5C,IAAMC,4BAA4B,GAAG,aAArC,C,CAEA;;AACA,IAAMC,uBAAuB,GAAG,CAAhC;AA8BA;;;;;;;IAMaC,oB;;;;;;;;;;AAwDX,gCACUzJ,SADV,EAEUC,cAFV,EAGUyJ,aAHV,EASUC,gBATV,EAUUC,mBAVV,EAWUC,kBAXV,EAYUC,sBAZV,EAaUC,aAbV,EAauC;AAAA;;AAAA;;AAErC;AAdQ;AACA;AACA;AAMA;AACA;AACA;AACA;AACA,0CAA6B;;AAnEvC,iBAAKN,oBAAoB,CAACO,2BAArB,EAAL;AACQ,mBAAO1hB,UAAU,CAAC,OAAO,QAAKlC,EAAZ,GAAiB,GAAlB,CAAjB;AAEA,gCAAmD,EAAnD;AACS,sBAGb,IAAI6jB,GAAJ,EAHa;AAIT,+BAAqC,EAArC;AACA,+BAAqC,EAArC;AACA,mCAAuB,CAAvB;AACA,mCAAuB,CAAvB;AACA,wCAAmD,EAAnD;AACA,yBAAa,KAAb;AACA,8BAAkBhB,mBAAlB;AACA,iCAAqBC,2BAArB;AACA,qCAAuD,IAAvD;AACR,4BAA+B,IAA/B;AAEQ,wCAA2C,IAA3C;AAEA,uBAAoB,KAApB,CA8C+B;;AA3C/B,6BAAwD,EAAxD;AACA,6BAAiB,CAAjB;AAEA,wBAGG,IAHH;AAKA,yBAA4B,IAA5B;AACA,6BAAgC,IAAhC;AACA,iCAAqB,KAArB;AACA,qCAAyB,CAAzB;AACA,yCAA6B,CAA7B;AAEA,+BAAmB,IAAnB;AACA,yCAA4C,IAA5C;AACA,6CAAgD,IAAhD;;AA+BN,QAAIa,aAAa,IAAI,CAACxgB,SAAS,EAA/B,EAAmC;AACjC,YAAM,IAAIb,KAAJ,CACJ,gFADI,CAAN;AAGD;;AAEDkgB,qBAAiB,CAACsB,WAAlB,GAAgCC,EAAhC,CAAmC,SAAnC,EAA8C,QAAKC,UAAnD;;AAEA,QAAIpK,SAAS,CAAChP,IAAV,CAAejI,OAAf,CAAuB,SAAvB,MAAsC,CAAC,CAA3C,EAA8C;AAC5Ckc,mBAAa,CAACiF,WAAd,GAA4BC,EAA5B,CAA+B,QAA/B,EAAyC,QAAKE,SAA9C;AACD;;AAdoC;AAetC;;;;WAES,qBACRC,MADQ,EAER1gB,IAFQ,EAGR2gB,UAHQ,EAGyB;AAEjC,UAAMC,SAAS,GAAG,EAAE,KAAKC,cAAzB;AAEA,UAAMzI,GAAG,GAAG;AAAE0I,SAAC,EAAEF,SAAL;AAAgBngB,SAAC,EAAEigB,MAAnB;AAA2BhgB,SAAC,EAAEV;AAA9B,OAAZ;AACA,WAAKoL,IAAL,CAAUhQ,SAAS,CAACgd,GAAD,CAAnB;AACApa,YAAM,CACJ,KAAK+iB,UADD,EAEJ,wDAFI,CAAN;AAIA,WAAKC,SAAL,CAAeC,WAAf,CAA2B7I,GAA3B;;AACA,UAAIuI,UAAJ,EAAgB;AACd,aAAKO,cAAL,CAAoBN,SAApB,IAAiCD,UAAjC;AACD;AACF;;;WAED,aAAI/c,KAAJ,EAAuB;AAAA;;AACrB,WAAKud,eAAL;AAEA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,UAAMC,OAAO,GAAG;AACdC,SAAC,EAAE3d,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EADW;AAEd8lB,SAAC,EAAE5d,KAAK,CAAC6d;AAFK,OAAhB;AAIA,UAAMC,cAAc,GAAG;AACrBhB,cAAM,EAAE,GADa;AAErBY,eAAO,EAAPA,OAFqB;AAGrBjH,kBAAU,EAAE,oBAACjd,OAAD,EAAkC;AAC5C,cAAMic,OAAO,GAAGjc,OAAO,CAAC,GAAD,CAAvB;;AACA,cAAIA,OAAO,CAAC,GAAD,CAAP,KAAiB,IAArB,EAA2B;AACzB,mBAAI,CAAC0iB,aAAL,CACEwB,OAAO,CAAC,GAAD,CADT,EAEEjI,OAFF;;AAGc,iBAHd;;gBAAA;;AAMA+H,oBAAQ,CAAC9b,OAAT,CAAiB+T,OAAjB;AACD,WARD,MAQO;AACL+H,oBAAQ,CAAC7b,MAAT,CAAgB8T,OAAhB;AACD;AACF;AAhBoB,OAAvB;AAkBA,WAAKsI,gBAAL,CAAsBvgB,IAAtB,CAA2BsgB,cAA3B;AACA,WAAKE,oBAAL;AACA,UAAMC,KAAK,GAAG,KAAKF,gBAAL,CAAsBrkB,MAAtB,GAA+B,CAA7C;;AAEA,UAAI,CAAC,KAAKyjB,UAAV,EAAsB;AACpB9gB,kBAAU,CAAC;AACT,cAAMzB,GAAG,GAAG,OAAI,CAACmjB,gBAAL,CAAsBE,KAAtB,CAAZ;;AACA,cAAIrjB,GAAG,KAAKsjB,SAAR,IAAqBJ,cAAc,KAAKljB,GAA5C,EAAiD;AAC/C;AACD;;AACD,iBAAO,OAAI,CAACmjB,gBAAL,CAAsBE,KAAtB,CAAP;AACA,iBAAI,CAACD,oBAAL;;AACA,cAAI,OAAI,CAACA,oBAAL,KAA8B,CAAlC,EAAqC;AACnC,mBAAI,CAACD,gBAAL,GAAwB,EAAxB;AACD;;AACD,iBAAI,CAACvW,IAAL,CAAU,SAASyW,KAAT,GAAiB,0BAA3B;;AACAT,kBAAQ,CAAC7b,MAAT,CAAgB,IAAIzG,KAAJ,CAAU,oBAAV,CAAhB;AACD,SAZS,EAYPygB,mBAZO,CAAV;AAaD;;AAED,UAAI,KAAKwB,UAAT,EAAqB;AACnB,aAAKgB,QAAL,CAAcF,KAAd;AACD;;AAED,aAAOT,QAAQ,CAACY,OAAhB;AACD;;;WAED,gBACEpe,KADF,EAEEqe,aAFF,EAGEC,GAHF,EAIE7H,UAJF,EAI6C;AAE3C,WAAK8G,eAAL;AAEA,UAAMgB,OAAO,GAAGve,KAAK,CAACwe,gBAAtB;;AACA,UAAMhI,UAAU,GAAGxW,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EAAnB;;AACA,WAAK0P,IAAL,CAAU,uBAAuBgP,UAAvB,GAAoC,GAApC,GAA0C+H,OAApD;;AACA,UAAI,CAAC,KAAKE,OAAL,CAAaC,GAAb,CAAiBlI,UAAjB,CAAL,EAAmC;AACjC,aAAKiI,OAAL,CAAa/jB,GAAb,CAAiB8b,UAAjB,EAA6B,IAAIiG,GAAJ,EAA7B;AACD;;AACDriB,YAAM,CACJ4F,KAAK,CAAC2e,YAAN,CAAmBC,SAAnB,MAAkC,CAAC5e,KAAK,CAAC2e,YAAN,CAAmBE,YAAnB,EAD/B,EAEJ,oDAFI,CAAN;AAIAzkB,YAAM,CACJ,CAAC,KAAKqkB,OAAL,CAAa7jB,GAAb,CAAiB4b,UAAjB,EAA8BkI,GAA9B,CAAkCH,OAAlC,CADG,EAEJ,8CAFI,CAAN;AAIA,UAAMO,UAAU,GAAe;AAC7BrI,kBAAU,EAAVA,UAD6B;AAE7BsI,cAAM,EAAEV,aAFqB;AAG7Bre,aAAK,EAALA,KAH6B;AAI7Bse,WAAG,EAAHA;AAJ6B,OAA/B;AAMA,WAAKG,OAAL,CAAa7jB,GAAb,CAAiB4b,UAAjB,EAA8B9b,GAA9B,CAAkC6jB,OAAlC,EAA2CO,UAA3C;;AAEA,UAAI,KAAK3B,UAAT,EAAqB;AACnB,aAAK6B,WAAL,CAAiBF,UAAjB;AACD;AACF;;;WAEO,kBAASb,KAAT,EAAsB;AAAA;;AAC5B,UAAMrjB,GAAG,GAAG,KAAKmjB,gBAAL,CAAsBE,KAAtB,CAAZ;AACA,WAAKZ,WAAL,CAAiB,GAAjB,EAAsBziB,GAAG,CAAC8iB,OAA1B,EAAmC,UAAClkB,OAAD,EAAkC;AACnE,eAAO,OAAI,CAACukB,gBAAL,CAAsBE,KAAtB,CAAP;AACA,eAAI,CAACD,oBAAL;;AACA,YAAI,OAAI,CAACA,oBAAL,KAA8B,CAAlC,EAAqC;AACnC,iBAAI,CAACD,gBAAL,GAAwB,EAAxB;AACD;;AACD,YAAInjB,GAAG,CAAC6b,UAAR,EAAoB;AAClB7b,aAAG,CAAC6b,UAAJ,CAAejd,OAAf;AACD;AACF,OATD;AAUD;;;WAEO,qBAAYslB,UAAZ,EAAkC;AAAA;;AACxC,UAAM9e,KAAK,GAAG8e,UAAU,CAAC9e,KAAzB;;AACA,UAAMwW,UAAU,GAAGxW,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EAAnB;;AACA,UAAMymB,OAAO,GAAGve,KAAK,CAACwe,gBAAtB;AACA,WAAKhX,IAAL,CAAU,eAAegP,UAAf,GAA4B,OAA5B,GAAsC+H,OAAhD;AACA,UAAMU,GAAG,GAA6B;AAAA;AAAWtB,SAAC,EAAEnH;AAAd,OAAtC;AAEA,UAAMsG,MAAM,GAAG,GAAf,CAPwC;;AAUxC,UAAIgC,UAAU,CAACR,GAAf,EAAoB;AAClBW,WAAG,CAAC,GAAD,CAAH,GAAWjf,KAAK,CAAC6d,YAAjB;AACAoB,WAAG,CAAC,GAAD,CAAH,GAAWH,UAAU,CAACR,GAAtB;AACD;;AAEDW,SAAG;AAAA;AAAU,SAAV,CAAH,GAAoBH,UAAU,CAACC,MAAX,EAApB;AAEA,WAAK1B,WAAL,CAAiBP,MAAjB,EAAyBmC,GAAzB,EAA8B,UAACzlB,OAAD,EAAkC;AAC9D,YAAMic,OAAO,GAAYjc,OAAO;AAAA;AAAU,WAAV,CAAhC;AACA,YAAM0lB,MAAM,GAAG1lB,OAAO;AAAA;AAAY,WAAZ,CAAtB,CAF8D;;AAK9DyiB,4BAAoB,CAACkD,qBAArB,CAA2C1J,OAA3C,EAAoDzV,KAApD;;AAEA,YAAMof,iBAAiB,GACrB,OAAI,CAACX,OAAL,CAAa7jB,GAAb,CAAiB4b,UAAjB,KACA,OAAI,CAACiI,OAAL,CAAa7jB,GAAb,CAAiB4b,UAAjB,EAA8B5b,GAA9B,CAAkC2jB,OAAlC,CAFF,CAP8D;;;AAW9D,YAAIa,iBAAiB,KAAKN,UAA1B,EAAsC;AACpC,iBAAI,CAACtX,IAAL,CAAU,iBAAV,EAA6BhO,OAA7B;;AAEA,cAAI0lB,MAAM,KAAK,IAAf,EAAqB;AACnB,mBAAI,CAACG,aAAL,CAAmB7I,UAAnB,EAA+B+H,OAA/B;AACD;;AAED,cAAIO,UAAU,CAACrI,UAAf,EAA2B;AACzBqI,sBAAU,CAACrI,UAAX,CAAsByI,MAAtB,EAA8BzJ,OAA9B;AACD;AACF;AACF,OAtBD;AAuBD;;;WAmBD,0BAAiBkB,KAAjB,EAA8B;AAC5B,WAAKhE,UAAL,GAAkBgE,KAAlB;AACA,WAAKnP,IAAL,CAAU,sBAAV;;AACA,UAAI,KAAKmL,UAAT,EAAqB;AACnB,aAAK2M,OAAL;AACD,OAFD,MAEO;;;AAGL,YAAI,KAAKnC,UAAT,EAAqB;AACnB,eAAKE,WAAL,CAAiB,QAAjB,EAA2B,EAA3B,EAA+B,aAAQ,CAAvC;AACD;AACF;;AAED,WAAKkC,sCAAL,CAA4C5I,KAA5C;AACD;;;WAEO,gDAAuC6I,UAAvC,EAAyD;;;AAG/D,UAAMC,gBAAgB,GAAGD,UAAU,IAAIA,UAAU,CAAC9lB,MAAX,KAAsB,EAA7D;;AACA,UAAI+lB,gBAAgB,IAAIC,OAAO,CAACF,UAAD,CAA/B,EAA6C;AAC3C,aAAKhY,IAAL,CACE,+DADF;AAGA,aAAKmY,kBAAL,GAA0B/D,8BAA1B;AACD;AACF;;;WAED,8BAAqBjF,KAArB,EAAyC;AACvC,WAAKjE,cAAL,GAAsBiE,KAAtB;AACA,WAAKnP,IAAL,CAAU,2BAAV;;AACA,UAAI,KAAKkL,cAAT,EAAyB;AACvB,aAAKkN,WAAL;AACD,OAFD,MAEO;;;;AAIL,YAAI,KAAKzC,UAAT,EAAqB;AACnB,eAAKE,WAAL,CAAiB,UAAjB,EAA6B,EAA7B,EAAiC,aAAQ,CAAzC;AACD;AACF;AACF;;;;;;;;WAMD,mBAAO;AAAA;;AACL,UAAI,KAAKF,UAAL,IAAmB,KAAKxK,UAA5B,EAAwC;AACtC,YAAMgE,KAAK,GAAG,KAAKhE,UAAnB;AACA,YAAMkN,UAAU,GAAGC,aAAa,CAACnJ,KAAD,CAAb,GAAuB,MAAvB,GAAgC,OAAnD;AACA,YAAMoJ,WAAW,GAA6B;AAAEC,cAAI,EAAErJ;AAAR,SAA9C;;AACA,YAAI,KAAK4F,aAAL,KAAuB,IAA3B,EAAiC;AAC/BwD,qBAAW,CAAC,QAAD,CAAX,GAAwB,IAAxB;AACD,SAFD,MAEO,IAAI,OAAO,KAAKxD,aAAZ,KAA8B,QAAlC,EAA4C;AACjDwD,qBAAW,CAAC,SAAD,CAAX,GAAyB,KAAKxD,aAA9B;AACD;;AACD,aAAKc,WAAL,CACEwC,UADF,EAEEE,WAFF,EAGE,UAACE,GAAD,EAA8B;AAC5B,cAAMf,MAAM,GAAGe,GAAG;AAAA;AAAY,aAAZ,CAAlB;AACA,cAAMxkB,IAAI,GAAIwkB,GAAG;AAAA;AAAU,aAAV,CAAH,IAAgC,OAA9C;;AAEA,cAAI,OAAI,CAACtN,UAAL,KAAoBgE,KAAxB,EAA+B;AAC7B,gBAAIuI,MAAM,KAAK,IAAf,EAAqB;AACnB,qBAAI,CAACgB,sBAAL,GAA8B,CAA9B;AACD,aAFD,MAEO;;AAEL,qBAAI,CAACC,cAAL,CAAoBjB,MAApB,EAA4BzjB,IAA5B;AACD;AACF;AACF,SAfH;AAiBD;AACF;;;;;;;;;WAOD,uBAAW;AAAA;;AACT,UAAI,KAAK0hB,UAAL,IAAmB,KAAKzK,cAA5B,EAA4C;AAC1C,aAAK2K,WAAL,CACE,UADF,EAEE;AAAE,mBAAS,KAAK3K;AAAhB,SAFF,EAGE,UAACuN,GAAD,EAA8B;AAC5B,cAAMf,MAAM,GAAGe,GAAG;AAAA;AAAY,aAAZ,CAAlB;AACA,cAAMxkB,IAAI,GAAIwkB,GAAG;AAAA;AAAU,aAAV,CAAH,IAAgC,OAA9C;;AACA,cAAIf,MAAM,KAAK,IAAf,EAAqB;AACnB,mBAAI,CAACkB,0BAAL,GAAkC,CAAlC;AACD,WAFD,MAEO;AACL,mBAAI,CAACC,kBAAL,CAAwBnB,MAAxB,EAAgCzjB,IAAhC;AACD;AACF,SAXH;AAaD;AACF;;;;;;;WAKD,kBAASuE,KAAT,EAA8Bse,GAA9B,EAAgD;AAC9C,UAAM9H,UAAU,GAAGxW,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EAAnB;;AACA,UAAMymB,OAAO,GAAGve,KAAK,CAACwe,gBAAtB;AAEA,WAAKhX,IAAL,CAAU,yBAAyBgP,UAAzB,GAAsC,GAAtC,GAA4C+H,OAAtD;AAEAnkB,YAAM,CACJ4F,KAAK,CAAC2e,YAAN,CAAmBC,SAAnB,MAAkC,CAAC5e,KAAK,CAAC2e,YAAN,CAAmBE,YAAnB,EAD/B,EAEJ,sDAFI,CAAN;AAIA,UAAMyB,MAAM,GAAG,KAAKjB,aAAL,CAAmB7I,UAAnB,EAA+B+H,OAA/B,CAAf;;AACA,UAAI+B,MAAM,IAAI,KAAKnD,UAAnB,EAA+B;AAC7B,aAAKoD,aAAL,CAAmB/J,UAAnB,EAA+B+H,OAA/B,EAAwCve,KAAK,CAAC6d,YAA9C,EAA4DS,GAA5D;AACD;AACF;;;WAEO,uBACN9H,UADM,EAEN+H,OAFM,EAGNiC,QAHM,EAINlC,GAJM,EAIY;AAElB,WAAK9W,IAAL,CAAU,iBAAiBgP,UAAjB,GAA8B,OAA9B,GAAwC+H,OAAlD;AAEA,UAAMU,GAAG,GAA6B;AAAA;AAAWtB,SAAC,EAAEnH;AAAd,OAAtC;AACA,UAAMsG,MAAM,GAAG,GAAf,CALkB;;AAOlB,UAAIwB,GAAJ,EAAS;AACPW,WAAG,CAAC,GAAD,CAAH,GAAWuB,QAAX;AACAvB,WAAG,CAAC,GAAD,CAAH,GAAWX,GAAX;AACD;;AAED,WAAKjB,WAAL,CAAiBP,MAAjB,EAAyBmC,GAAzB;AACD;;;WAED,yBACEzI,UADF,EAEE/a,IAFF,EAGEgb,UAHF,EAG6C;AAE3C,WAAK8G,eAAL;;AAEA,UAAI,KAAKJ,UAAT,EAAqB;AACnB,aAAKsD,iBAAL,CAAuB,GAAvB,EAA4BjK,UAA5B,EAAwC/a,IAAxC,EAA8Cgb,UAA9C;AACD,OAFD,MAEO;AACL,aAAKiK,yBAAL,CAA+BljB,IAA/B,CAAoC;AAClCgZ,oBAAU,EAAVA,UADkC;AAElCsG,gBAAM,EAAE,GAF0B;AAGlCrhB,cAAI,EAAJA,IAHkC;AAIlCgb,oBAAU,EAAVA;AAJkC,SAApC;AAMD;AACF;;;WAED,2BACED,UADF,EAEE/a,IAFF,EAGEgb,UAHF,EAG6C;AAE3C,WAAK8G,eAAL;;AAEA,UAAI,KAAKJ,UAAT,EAAqB;AACnB,aAAKsD,iBAAL,CAAuB,IAAvB,EAA6BjK,UAA7B,EAAyC/a,IAAzC,EAA+Cgb,UAA/C;AACD,OAFD,MAEO;AACL,aAAKiK,yBAAL,CAA+BljB,IAA/B,CAAoC;AAClCgZ,oBAAU,EAAVA,UADkC;AAElCsG,gBAAM,EAAE,IAF0B;AAGlCrhB,cAAI,EAAJA,IAHkC;AAIlCgb,oBAAU,EAAVA;AAJkC,SAApC;AAMD;AACF;;;WAED,4BACED,UADF,EAEEC,UAFF,EAE6C;AAE3C,WAAK8G,eAAL;;AAEA,UAAI,KAAKJ,UAAT,EAAqB;AACnB,aAAKsD,iBAAL,CAAuB,IAAvB,EAA6BjK,UAA7B,EAAyC,IAAzC,EAA+CC,UAA/C;AACD,OAFD,MAEO;AACL,aAAKiK,yBAAL,CAA+BljB,IAA/B,CAAoC;AAClCgZ,oBAAU,EAAVA,UADkC;AAElCsG,gBAAM,EAAE,IAF0B;AAGlCrhB,cAAI,EAAE,IAH4B;AAIlCgb,oBAAU,EAAVA;AAJkC,SAApC;AAMD;AACF;;;WAEO,2BACNqG,MADM,EAENtG,UAFM,EAGN/a,IAHM,EAINgb,UAJM,EAIoC;AAE1C,UAAMiH,OAAO,GAAG;AAAA;AAAWC,SAAC,EAAEnH,UAAd;;AAAwB;AAAWjK,SAAC,EAAE9Q;AAAtC,OAAhB;AACA,WAAK+L,IAAL,CAAU,kBAAkBsV,MAA5B,EAAoCY,OAApC;AACA,WAAKL,WAAL,CAAiBP,MAAjB,EAAyBY,OAAzB,EAAkC,UAACiD,QAAD,EAAmC;AACnE,YAAIlK,UAAJ,EAAgB;AACdpa,oBAAU,CAAC;AACToa,sBAAU,CACRkK,QAAQ;AAAA;AAAY,eAAZ,CADA,EAERA,QAAQ;AAAA;AAAY,eAAZ,CAFA,CAAV;AAID,WALS,EAKPrkB,IAAI,CAACC,KAAL,CAAW,CAAX,CALO,CAAV;AAMD;AACF,OATD;AAUD;;;WAED,aACEia,UADF,EAEE/a,IAFF,EAGEgb,UAHF,EAIEC,IAJF,EAIe;AAEb,WAAKkK,WAAL,CAAiB,GAAjB,EAAsBpK,UAAtB,EAAkC/a,IAAlC,EAAwCgb,UAAxC,EAAoDC,IAApD;AACD;;;WAED,eACEF,UADF,EAEE/a,IAFF,EAGEgb,UAHF,EAIEC,IAJF,EAIe;AAEb,WAAKkK,WAAL,CAAiB,GAAjB,EAAsBpK,UAAtB,EAAkC/a,IAAlC,EAAwCgb,UAAxC,EAAoDC,IAApD;AACD;;;WAED,qBACEoG,MADF,EAEEtG,UAFF,EAGE/a,IAHF,EAIEgb,UAJF,EAKEC,IALF,EAKe;AAEb,WAAK6G,eAAL;AAEA,UAAMG,OAAO,GAA6B;;SAC9B,EAAElH,UAD4B;;;SAE9B,EAAE/a;AAF4B,OAA1C;;AAKA,UAAIib,IAAI,KAAKwH,SAAb,EAAwB;AACtBR,eAAO;AAAA;AAAU,WAAV,CAAP,GAAwBhH,IAAxB;AACD,OAXY;;;AAcb,WAAKmK,gBAAL,CAAsBrjB,IAAtB,CAA2B;AACzBsf,cAAM,EAANA,MADyB;AAEzBY,eAAO,EAAPA,OAFyB;AAGzBjH,kBAAU,EAAVA;AAHyB,OAA3B;AAMA,WAAKqK,oBAAL;AACA,UAAM7C,KAAK,GAAG,KAAK4C,gBAAL,CAAsBnnB,MAAtB,GAA+B,CAA7C;;AAEA,UAAI,KAAKyjB,UAAT,EAAqB;AACnB,aAAK4D,QAAL,CAAc9C,KAAd;AACD,OAFD,MAEO;AACL,aAAKzW,IAAL,CAAU,oBAAoBgP,UAA9B;AACD;AACF;;;WAEO,kBAASyH,KAAT,EAAsB;AAAA;;AAC5B,UAAMnB,MAAM,GAAG,KAAK+D,gBAAL,CAAsB5C,KAAtB,EAA6BnB,MAA5C;AACA,UAAMY,OAAO,GAAG,KAAKmD,gBAAL,CAAsB5C,KAAtB,EAA6BP,OAA7C;AACA,UAAMjH,UAAU,GAAG,KAAKoK,gBAAL,CAAsB5C,KAAtB,EAA6BxH,UAAhD;AACA,WAAKoK,gBAAL,CAAsB5C,KAAtB,EAA6B+C,MAA7B,GAAsC,KAAK7D,UAA3C;AAEA,WAAKE,WAAL,CAAiBP,MAAjB,EAAyBY,OAAzB,EAAkC,UAAClkB,OAAD,EAAkC;AAClE,eAAI,CAACgO,IAAL,CAAUsV,MAAM,GAAG,WAAnB,EAAgCtjB,OAAhC;;AAEA,eAAO,OAAI,CAACqnB,gBAAL,CAAsB5C,KAAtB,CAAP;AACA,eAAI,CAAC6C,oBAAL,GAJkE;;AAOlE,YAAI,OAAI,CAACA,oBAAL,KAA8B,CAAlC,EAAqC;AACnC,iBAAI,CAACD,gBAAL,GAAwB,EAAxB;AACD;;AAED,YAAIpK,UAAJ,EAAgB;AACdA,oBAAU,CACRjd,OAAO;AAAA;AAAY,aAAZ,CADC,EAERA,OAAO;AAAA;AAAY,aAAZ,CAFC,CAAV;AAID;AACF,OAjBD;AAkBD;;;WAED,qBAAYod,KAAZ,EAA2C;AAAA;;;AAEzC,UAAI,KAAKuG,UAAT,EAAqB;AACnB,YAAMO,OAAO,GAAG;AAAA;AAAe5f,WAAC,EAAE8Y;AAAlB,SAAhB;AACA,aAAKpP,IAAL,CAAU,aAAV,EAAyBkW,OAAzB;AAEA,aAAKL,WAAL;AAAgB;AAAW,WAA3B,EAAgCK,OAAhC,EAAyC,gBAAM;AAC7C,cAAMwB,MAAM,GAAG+B,MAAM;AAAA;AAAY,aAAZ,CAArB;;AACA,cAAI/B,MAAM,KAAK,IAAf,EAAqB;AACnB,gBAAMgC,WAAW,GAAGD,MAAM;AAAA;AAAY,eAAZ,CAA1B;;AACA,mBAAI,CAACzZ,IAAL,CAAU,aAAV,EAAyB,0BAA0B0Z,WAAnD;AACD;AACF,SAND;AAOD;AACF;;;WAEO,wBAAe1nB,OAAf,EAAgD;AACtD,UAAI,OAAOA,OAAX,EAAoB;;AAElB,aAAKgO,IAAL,CAAU,kBAAkBhQ,SAAS,CAACgC,OAAD,CAArC;AACA,YAAM2nB,MAAM,GAAG3nB,OAAO,CAAC,GAAD,CAAtB;AACA,YAAMujB,UAAU,GAAG,KAAKO,cAAL,CAAoB6D,MAApB,CAAnB;;AACA,YAAIpE,UAAJ,EAAgB;AACd,iBAAO,KAAKO,cAAL,CAAoB6D,MAApB,CAAP;AACApE,oBAAU,CAACvjB,OAAO;AAAA;AAAU,aAAV,CAAR,CAAV;AACD;AACF,OATD,MASO,IAAI,WAAWA,OAAf,EAAwB;AAC7B,cAAM,uCAAuCA,OAAO,CAAC,OAAD,CAApD;AACD,OAFM,MAEA,IAAI,OAAOA,OAAX,EAAoB;;AAEzB,aAAK4nB,WAAL,CAAiB5nB,OAAO,CAAC,GAAD,CAAxB,EAAyCA,OAAO,CAAC,GAAD,CAAhD;AACD;AACF;;;WAEO,qBAAYsjB,MAAZ,EAA4B1gB,IAA5B,EAA0D;AAChE,WAAKoL,IAAL,CAAU,qBAAV,EAAiCsV,MAAjC,EAAyC1gB,IAAzC;;AACA,UAAI0gB,MAAM,KAAK,GAAf,EAAoB;AAClB,aAAKZ,aAAL,CACE9f,IAAI;AAAA;AAAU,WAAV,CADN,EAEEA,IAAI;AAAA;AAAU,WAAV,CAFN;;AAGc,aAHd,EAIEA,IAAI,CAAC,GAAD,CAJN;AAMD,OAPD,MAOO,IAAI0gB,MAAM,KAAK,GAAf,EAAoB;AACzB,aAAKZ,aAAL,CACE9f,IAAI;AAAA;AAAU,WAAV,CADN,EAEEA,IAAI;AAAA;AAAU,WAAV,CAFN;;AAGe,YAHf,EAIEA,IAAI,CAAC,GAAD,CAJN;AAMD,OAPM,MAOA,IAAI0gB,MAAM,KAAK,GAAf,EAAoB;AACzB,aAAKuE,gBAAL,CACEjlB,IAAI;AAAA;AAAU,WAAV,CADN,EAEEA,IAAI;AAAA;AAAW,WAAX,CAFN;AAID,OALM,MAKA,IAAI0gB,MAAM,KAAK,IAAf,EAAqB;AAC1B,aAAKqD,cAAL,CACE/jB,IAAI;AAAA;AAAiB,WAAjB,CADN,EAEEA,IAAI;AAAA;AAAmB,WAAnB,CAFN;AAID,OALM,MAKA,IAAI0gB,MAAM,KAAK,KAAf,EAAsB;AAC3B,aAAKuD,kBAAL,CACEjkB,IAAI;AAAA;AAAiB,WAAjB,CADN,EAEEA,IAAI;AAAA;AAAmB,WAAnB,CAFN;AAID,OALM,MAKA,IAAI0gB,MAAM,KAAK,IAAf,EAAqB;AAC1B,aAAKwE,sBAAL,CAA4BllB,IAA5B;AACD,OAFM,MAEA;AACLpB,aAAK,CACH,+CACExD,SAAS,CAACslB,MAAD,CADX,GAEE,oCAHC,CAAL;AAKD;AACF;;;WAEO,kBAAS/G,SAAT,EAA4BE,SAA5B,EAA6C;AACnD,WAAKzO,IAAL,CAAU,kBAAV;AACA,WAAK2V,UAAL,GAAkB,IAAlB;AACA,WAAKoE,8BAAL,GAAsC,IAAIC,IAAJ,GAAWC,OAAX,EAAtC;AACA,WAAKC,gBAAL,CAAsB3L,SAAtB;AACA,WAAKxO,aAAL,GAAqB0O,SAArB;;AACA,UAAI,KAAK0L,gBAAT,EAA2B;AACzB,aAAKC,iBAAL;AACD;;AACD,WAAKC,aAAL;AACA,WAAKF,gBAAL,GAAwB,KAAxB;AACA,WAAKxF,gBAAL,CAAsB,IAAtB;AACD;;;WAEO,0BAAiBnb,OAAjB,EAAgC;AAAA;;AACtC5G,YAAM,CACJ,CAAC,KAAKgjB,SADF,EAEJ,wDAFI,CAAN;;AAKA,UAAI,KAAK0E,yBAAT,EAAoC;AAClCjZ,oBAAY,CAAC,KAAKiZ,yBAAN,CAAZ;AACD,OARqC;;;;AAatC,WAAKA,yBAAL,GAAiCzlB,UAAU,CAAC;AAC1C,eAAI,CAACylB,yBAAL,GAAiC,IAAjC;;AACA,eAAI,CAACC,oBAAL,GAF0C;;AAI3C,OAJ0C,EAIxCzlB,IAAI,CAACC,KAAL,CAAWyE,OAAX,CAJwC,CAA3C;AAKD;;;WAEO,2BAAe;AACrB,UAAI,CAAC,KAAKoc,SAAN,IAAmB,KAAKuE,gBAA5B,EAA8C;AAC5C,aAAKK,gBAAL,CAAsB,CAAtB;AACD;AACF;;;WAEO,oBAAWxG,OAAX,EAA2B;;AAEjC,UACEA,OAAO,IACP,CAAC,KAAKD,QADN,IAEA,KAAK0G,eAAL,KAAyB,KAAKtC,kBAHhC,EAIE;AACA,aAAKnY,IAAL,CAAU,yCAAV;AACA,aAAKya,eAAL,GAAuBxG,mBAAvB;;AAEA,YAAI,CAAC,KAAK2B,SAAV,EAAqB;AACnB,eAAK4E,gBAAL,CAAsB,CAAtB;AACD;AACF;;AACD,WAAKzG,QAAL,GAAgBC,OAAhB;AACD;;;WAEO,mBAAU0G,MAAV,EAAyB;AAC/B,UAAIA,MAAJ,EAAY;AACV,aAAK1a,IAAL,CAAU,sBAAV;AACA,aAAKya,eAAL,GAAuBxG,mBAAvB;;AACA,YAAI,CAAC,KAAK2B,SAAV,EAAqB;AACnB,eAAK4E,gBAAL,CAAsB,CAAtB;AACD;AACF,OAND,MAMO;AACL,aAAKxa,IAAL,CAAU,4CAAV;;AACA,YAAI,KAAK4V,SAAT,EAAoB;AAClB,eAAKA,SAAL,CAAexT,KAAf;AACD;AACF;AACF;;;WAEO,iCAAqB;AAC3B,WAAKpC,IAAL,CAAU,0BAAV;AACA,WAAK2V,UAAL,GAAkB,KAAlB;AACA,WAAKC,SAAL,GAAiB,IAAjB,CAH2B;;AAM3B,WAAK+E,uBAAL,GAN2B;;AAS3B,WAAK7E,cAAL,GAAsB,EAAtB;;AAEA,UAAI,KAAK8E,gBAAL,EAAJ,EAA6B;AAC3B,YAAI,CAAC,KAAK7G,QAAV,EAAoB;AAClB,eAAK/T,IAAL,CAAU,4CAAV;AACA,eAAKya,eAAL,GAAuB,KAAKtC,kBAA5B;AACA,eAAK0C,0BAAL,GAAkC,IAAIb,IAAJ,GAAWC,OAAX,EAAlC;AACD,SAJD,MAIO,IAAI,KAAKF,8BAAT,EAAyC;;AAE9C,cAAMe,6BAA6B,GACjC,IAAId,IAAJ,GAAWC,OAAX,KAAuB,KAAKF,8BAD9B;;AAEA,cAAIe,6BAA6B,GAAGxG,6BAApC,EAAmE;AACjE,iBAAKmG,eAAL,GAAuBxG,mBAAvB;AACD;;AACD,eAAK8F,8BAAL,GAAsC,IAAtC;AACD;;AAED,YAAMgB,2BAA2B,GAC/B,IAAIf,IAAJ,GAAWC,OAAX,KAAuB,KAAKY,0BAD9B;AAEA,YAAIG,cAAc,GAAGlmB,IAAI,CAACoe,GAAL,CACnB,CADmB,EAEnB,KAAKuH,eAAL,GAAuBM,2BAFJ,CAArB;AAIAC,sBAAc,GAAGlmB,IAAI,CAAC+M,MAAL,KAAgBmZ,cAAjC;AAEA,aAAKhb,IAAL,CAAU,4BAA4Bgb,cAA5B,GAA6C,IAAvD;AACA,aAAKR,gBAAL,CAAsBQ,cAAtB,EAxB2B;;AA2B3B,aAAKP,eAAL,GAAuB3lB,IAAI,CAACuC,GAAL,CACrB,KAAK8gB,kBADgB,EAErB,KAAKsC,eAAL,GAAuBpG,0BAFF,CAAvB;AAID;;AACD,WAAKM,gBAAL,CAAsB,KAAtB;AACD;;;;2FAEO;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBACF,KAAKiG,gBAAL,EADE;AAAA;AAAA;AAAA;;AAEJ,qBAAK5a,IAAL,CAAU,6BAAV;AACA,qBAAK6a,0BAAL,GAAkC,IAAIb,IAAJ,GAAWC,OAAX,EAAlC;AACA,qBAAKF,8BAAL,GAAsC,IAAtC;AACMkB,6BALF,GAKkB,KAAKlN,cAAL,CAAoB9a,IAApB,CAAyB,IAAzB,CALlB;AAMEioB,uBANF,GAMY,KAAK9P,QAAL,CAAcnY,IAAd,CAAmB,IAAnB,CANZ;AAOEoN,6BAPF,GAOiB,KAAK8a,qBAAL,CAA2BloB,IAA3B,CAAgC,IAAhC,CAPjB;AAQEyM,sBARF,GAQW,KAAKtO,EAAL,GAAU,GAAV,GAAgBqjB,oBAAoB,CAAC2G,iBAArB,EAR3B;AASErb,6BATF,GASkB,KAAKA,aATvB;AAUAsb,wBAVA,GAUW,KAVX;AAWAC,0BAXA,GAWgC,IAXhC;;AAYEC,uBAZF,GAYY,SAAVA,OAAU;AACd,sBAAID,UAAJ,EAAgB;AACdA,8BAAU,CAAClZ,KAAX;AACD,mBAFD,MAEO;AACLiZ,4BAAQ,GAAG,IAAX;;AACAhb,iCAAY;AACb;AACF,iBAnBG;;AAoBEmb,6BApBF,GAoBkB,SAAhBA,aAAgB,CAAUxO,GAAV,EAAqB;AACzCpa,wBAAM,CACJ0oB,UADI,EAEJ,wDAFI,CAAN;AAIAA,4BAAU,CAACzF,WAAX,CAAuB7I,GAAvB;AACD,iBA1BG;;AA4BJ,qBAAK4I,SAAL,GAAiB;AACfxT,uBAAK,EAAEmZ,OADQ;AAEf1F,6BAAW,EAAE2F;AAFE,iBAAjB;AAKMxhB,4BAjCF,GAiCiB,KAAKyhB,kBAjCtB;AAkCJ,qBAAKA,kBAAL,GAA0B,KAA1B;AAlCI;AAAA;AAAA,uBAuCuCxhB,OAAO,CAACyhB,GAAR,CAAY,CACnD,KAAK7G,kBAAL,CAAwBza,QAAxB,CAAiCJ,YAAjC,CADmD,EAEnD,KAAK8a,sBAAL,CAA4B1a,QAA5B,CAAqCJ,YAArC,CAFmD,CAAZ,CAvCvC;;AAAA;AAAA;AAAA;AAuCK6F,yBAvCL;AAuCgBD,6BAvChB;;AA4CF,oBAAI,CAACyb,QAAL,EAAe;AACbroB,qBAAG,CAAC,4CAAD,CAAH;AACA,uBAAKmY,UAAL,GAAkBtL,SAAS,IAAIA,SAAS,CAAC1E,WAAzC;AACA,uBAAK+P,cAAL,GAAsBtL,aAAa,IAAIA,aAAa,CAACuP,KAArD;AACAmM,4BAAU,GAAG,IAAIvQ,UAAJ,CACXrL,MADW,EAEX,KAAKsL,SAFM,EAGX,KAAKC,cAHM,EAIX,KAAKC,cAJM,EAKX,KAAKC,UALM,EAMX8P,aANW,EAOXC,OAPW,EAQX7a,aARW;;AASG,kCAAM;AAClB1M,wBAAI,CAAC8E,MAAM,GAAG,IAAT,GAAgB,OAAI,CAACuS,SAAL,CAAe1a,QAAf,EAAhB,GAA4C,GAA7C,CAAJ;;AACA,2BAAI,CAACqrB,SAAL,CAAepH,4BAAf;AACD,mBAZU,EAaXxU,aAbW,CAAb;AAeD,iBAnBD,MAmBO;AACL/M,qBAAG,CAAC,uCAAD,CAAH;AACD;;AAjEC;AAAA;;AAAA;AAAA;AAAA;AAmEF,qBAAKgN,IAAL,CAAU,qCAAV;;AACA,oBAAI,CAACqb,QAAL,EAAe;AACb,sBAAI,KAAKrQ,SAAL,CAAe5O,SAAnB,EAA8B;;;;AAI5BzI,wBAAI,aAAJ;AACD;;AACD4nB,yBAAO;AACR;;AA5EC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAiFR,mBAAU9iB,MAAV,EAAwB;AACtBzF,SAAG,CAAC,yCAAyCyF,MAA1C,CAAH;AACA,WAAKmjB,iBAAL,CAAuBnjB,MAAvB,IAAiC,IAAjC;;AACA,UAAI,KAAKmd,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAexT,KAAf;AACD,OAFD,MAEO;AACL,YAAI,KAAKkY,yBAAT,EAAoC;AAClCjZ,sBAAY,CAAC,KAAKiZ,yBAAN,CAAZ;AACA,eAAKA,yBAAL,GAAiC,IAAjC;AACD;;AACD,YAAI,KAAK3E,UAAT,EAAqB;AACnB,eAAKwF,qBAAL;AACD;AACF;AACF;;;WAED,gBAAO1iB,MAAP,EAAqB;AACnBzF,SAAG,CAAC,qCAAqCyF,MAAtC,CAAH;AACA,aAAO,KAAKmjB,iBAAL,CAAuBnjB,MAAvB,CAAP;;AACA,UAAIojB,OAAO,CAAC,KAAKD,iBAAN,CAAX,EAAqC;AACnC,aAAKnB,eAAL,GAAuBxG,mBAAvB;;AACA,YAAI,CAAC,KAAK2B,SAAV,EAAqB;AACnB,eAAK4E,gBAAL,CAAsB,CAAtB;AACD;AACF;AACF;;;WAEO,0BAAiBjM,SAAjB,EAAkC;AACxC,UAAMuN,KAAK,GAAGvN,SAAS,GAAG,IAAIyL,IAAJ,GAAWC,OAAX,EAA1B;AACA,WAAKrF,mBAAL,CAAyB;AAAEmH,wBAAgB,EAAED;AAApB,OAAzB;AACD;;;WAEO,mCAAuB;AAC7B,WAAK,IAAI7pB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKonB,gBAAL,CAAsBnnB,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,YAAM+pB,GAAG,GAAG,KAAK3C,gBAAL,CAAsBpnB,CAAtB,CAAZ;;AACA,YAAI+pB,GAAG;AAAA;AAAa,eAAOA,GAAG,CAAC9F,OAA3B,IAAsC8F,GAAG,CAACxC,MAA9C,EAAsD;AACpD,cAAIwC,GAAG,CAAC/M,UAAR,EAAoB;AAClB+M,eAAG,CAAC/M,UAAJ,CAAe,YAAf;AACD;;AAED,iBAAO,KAAKoK,gBAAL,CAAsBpnB,CAAtB,CAAP;AACA,eAAKqnB,oBAAL;AACD;AACF,OAX4B;;;AAc7B,UAAI,KAAKA,oBAAL,KAA8B,CAAlC,EAAqC;AACnC,aAAKD,gBAAL,GAAwB,EAAxB;AACD;AACF;;;WAEO,0BAAiBrK,UAAjB,EAAqCxW,KAArC,EAAsD;;AAE5D,UAAIue,OAAJ;;AACA,UAAI,CAACve,KAAL,EAAY;AACVue,eAAO,GAAG,SAAV;AACD,OAFD,MAEO;AACLA,eAAO,GAAGve,KAAK,CAACyjB,GAAN,CAAU,WAAC;AAAA,iBAAIpmB,iBAAiB,CAACugB,CAAD,CAArB;AAAA,SAAX,EAAqC1e,IAArC,CAA0C,GAA1C,CAAV;AACD;;AACD,UAAMohB,MAAM,GAAG,KAAKjB,aAAL,CAAmB7I,UAAnB,EAA+B+H,OAA/B,CAAf;;AACA,UAAI+B,MAAM,IAAIA,MAAM,CAAC7J,UAArB,EAAiC;AAC/B6J,cAAM,CAAC7J,UAAP,CAAkB,mBAAlB;AACD;AACF;;;WAEO,uBAAcD,UAAd,EAAkC+H,OAAlC,EAAiD;AACvD,UAAMmF,oBAAoB,GAAG,IAAI3L,IAAJ,CAASvB,UAAT,EAAqB1e,QAArB,EAA7B,CADuD,CACM;;AAC7D,UAAIwoB,MAAJ;;AACA,UAAI,KAAK7B,OAAL,CAAaC,GAAb,CAAiBgF,oBAAjB,CAAJ,EAA4C;AAC1C,YAAMD,IAAG,GAAG,KAAKhF,OAAL,CAAa7jB,GAAb,CAAiB8oB,oBAAjB,CAAZ;;AACApD,cAAM,GAAGmD,IAAG,CAAC7oB,GAAJ,CAAQ2jB,OAAR,CAAT;;AACAkF,YAAG,CAACtW,MAAJ,CAAWoR,OAAX;;AACA,YAAIkF,IAAG,CAACxX,IAAJ,KAAa,CAAjB,EAAoB;AAClB,eAAKwS,OAAL,CAAatR,MAAb,CAAoBuW,oBAApB;AACD;AACF,OAPD,MAOO;;AAELpD,cAAM,GAAGpC,SAAT;AACD;;AACD,aAAOoC,MAAP;AACD;;;WAEO,wBAAeqD,UAAf,EAAmCC,WAAnC,EAAsD;AAC5DppB,SAAG,CAAC,yBAAyBmpB,UAAzB,GAAsC,GAAtC,GAA4CC,WAA7C,CAAH;AACA,WAAKjR,UAAL,GAAkB,IAAlB;AACA,WAAKsQ,kBAAL,GAA0B,IAA1B;AACA,WAAK7F,SAAL,CAAexT,KAAf;;AACA,UAAI+Z,UAAU,KAAK,eAAf,IAAkCA,UAAU,KAAK,mBAArD,EAA0E;;;;AAIxE,aAAKzD,sBAAL;;AACA,YAAI,KAAKA,sBAAL,IAA+BlE,uBAAnC,EAA4D;;AAE1D,eAAKiG,eAAL,GAAuBrG,8BAAvB,CAF0D;;;AAM1D,eAAKS,kBAAL,CAAwBwH,qBAAxB;AACD;AACF;AACF;;;WAEO,4BAAmBF,UAAnB,EAAuCC,WAAvC,EAA0D;AAChEppB,SAAG,CAAC,8BAA8BmpB,UAA9B,GAA2C,GAA3C,GAAiDC,WAAlD,CAAH;AACA,WAAKlR,cAAL,GAAsB,IAAtB;AACA,WAAKuQ,kBAAL,GAA0B,IAA1B,CAHgE;;;AAMhE,UAAIU,UAAU,KAAK,eAAf,IAAkCA,UAAU,KAAK,mBAArD,EAA0E;;;;AAIxE,aAAKvD,0BAAL;;AACA,YAAI,KAAKA,0BAAL,IAAmCpE,uBAAvC,EAAgE;AAC9D,eAAKM,sBAAL,CAA4BuH,qBAA5B;AACD;AACF;AACF;;;WAEO,gCAAuBznB,IAAvB,EAAqD;AAC3D,UAAI,KAAK0nB,sBAAT,EAAiC;AAC/B,aAAKA,sBAAL,CAA4B1nB,IAA5B;AACD,OAFD,MAEO;AACL,YAAI,SAASA,IAAb,EAAmB;AACjB2nB,iBAAO,CAACvpB,GAAR,CACE,eAAgB4B,IAAI,CAAC,KAAD,CAAJ,CAAuB4nB,OAAvB,CAA+B,IAA/B,EAAqC,cAArC,CADlB;AAGD;AACF;AACF;;;WAEO,yBAAa;;AAEnB,WAAK1E,OAAL;AACA,WAAKM,WAAL,GAHmB;;;AAAA,kDAOG,KAAKnB,OAAL,CAAawF,MAAb,EAPH;AAAA;;AAAA;AAOnB,+DAA6C;AAAA,cAAlCC,OAAkC;;AAAA,sDAClBA,OAAO,CAACD,MAAR,EADkB;AAAA;;AAAA;AAC3C,mEAA2C;AAAA,kBAAhCnF,UAAgC;AACzC,mBAAKE,WAAL,CAAiBF,UAAjB;AACD;AAH0C;AAAA;AAAA;AAAA;AAAA;AAI5C;AAXkB;AAAA;AAAA;AAAA;AAAA;;AAanB,WAAK,IAAIrlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKonB,gBAAL,CAAsBnnB,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,YAAI,KAAKonB,gBAAL,CAAsBpnB,CAAtB,CAAJ,EAA8B;AAC5B,eAAKsnB,QAAL,CAActnB,CAAd;AACD;AACF;;AAED,aAAO,KAAKinB,yBAAL,CAA+BhnB,MAAtC,EAA8C;AAC5C,YAAMgkB,OAAO,GAAG,KAAKgD,yBAAL,CAA+BjU,KAA/B,EAAhB;AACA,aAAKgU,iBAAL,CACE/C,OAAO,CAACZ,MADV,EAEEY,OAAO,CAAClH,UAFV,EAGEkH,OAAO,CAACjiB,IAHV,EAIEiiB,OAAO,CAACjH,UAJV;AAMD;;AAED,WAAK,IAAIhd,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,KAAKskB,gBAAL,CAAsBrkB,MAA1C,EAAkDD,GAAC,EAAnD,EAAuD;AACrD,YAAI,KAAKskB,gBAAL,CAAsBtkB,GAAtB,CAAJ,EAA8B;AAC5B,eAAK0kB,QAAL,CAAc1kB,GAAd;AACD;AACF;AACF;;;;;;;WAKO,6BAAiB;AACvB,UAAMmd,KAAK,GAA4B,EAAvC;AAEA,UAAIuN,UAAU,GAAG,IAAjB;;AACA,UAAIpoB,SAAS,EAAb,EAAiB;AACf,YAAI,KAAKyW,SAAL,CAAe5O,SAAnB,EAA8B;AAC5BugB,oBAAU,GAAG,YAAb;AACD,SAFD,MAEO;AACLA,oBAAU,GAAG,MAAb;AACD;AACF;;AAEDvN,WAAK,CAAC,SAASuN,UAAT,GAAsB,GAAtB,GAA4BrtB,WAAW,CAACktB,OAAZ,CAAoB,KAApB,EAA2B,GAA3B,CAA7B,CAAL,GAAqE,CAArE;;AAEA,UAAItM,eAAe,EAAnB,EAAuB;AACrBd,aAAK,CAAC,mBAAD,CAAL,GAA6B,CAA7B;AACD,OAFD,MAEO,IAAIwN,aAAa,EAAjB,EAAqB;AAC1BxN,aAAK,CAAC,uBAAD,CAAL,GAAiC,CAAjC;AACD;;AACD,WAAKyN,WAAL,CAAiBzN,KAAjB;AACD;;;WAEO,4BAAgB;AACtB,UAAMsL,MAAM,GAAGzK,aAAa,CAACiF,WAAd,GAA4B4H,eAA5B,EAAf;AACA,aAAOjB,OAAO,CAAC,KAAKD,iBAAN,CAAP,IAAmClB,MAA1C;AACD;;;WA7wBO,+BAA6BzM,OAA7B,EAA+CzV,KAA/C,EAAkE;AACxE,UAAIyV,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAA9B,IAA0Cxd,QAAQ,CAACwd,OAAD,EAAU,GAAV,CAAtD,EAAsE;;AAEpE,YAAM8O,QAAQ,GAAGC,OAAO,CAAC/O,OAAD,EAAiB,GAAjB,CAAxB;;AACA,YAAI7b,KAAK,CAACC,OAAN,CAAc0qB,QAAd,KAA2B,CAACA,QAAQ,CAAChpB,OAAT,CAAiB,UAAjB,CAAhC,EAA8D;AAC5D,cAAMkpB,SAAS,GACb,kBAAkBzkB,KAAK,CAAC2e,YAAN,CAAmB+F,QAAnB,GAA8B5sB,QAA9B,EAAlB,GAA6D,GAD/D;;AAEA,cAAM6sB,SAAS,GAAG3kB,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EAAlB;;AACAqD,cAAI,CACF,oHAC6CspB,SAD7C,sBAEKE,SAFL,oDADE,CAAJ;AAKD;AACF;AACF;;;;EAxQuCpO,a;;AA4CzB0F,mDAA8B,CAA9B;AAEf;;;;AAGeA,yCAAoB,CAApB;AC1IjB;;;;;;;;;;;;;;;;;IAiJa2I,S;AACX,qBAAmBhtB,IAAnB,EAAwCitB,IAAxC,EAAkD;AAAA;;AAA/B;AAAqB;AAAc;;;;WAEtD,cAAYjtB,IAAZ,EAA0BitB,IAA1B,EAAoC;AAClC,aAAO,IAAID,SAAJ,CAAchtB,IAAd,EAAoBitB,IAApB,CAAP;AACD;;;;;ACtJH;;;;;;;;;;;;;;;;;;IAqBsBC,K;;;;;;;;;;;;AASpB,0BAAU;AACR,aAAO,KAAKC,OAAL,CAAatqB,IAAb,CAAkB,IAAlB,CAAP;AACD;;;;;;;;;;;WASD,6BAAoBuqB,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,UAAMC,UAAU,GAAG,IAAIN,SAAJ,CAAcloB,QAAd,EAAwBsoB,OAAxB,CAAnB;AACA,UAAMG,UAAU,GAAG,IAAIP,SAAJ,CAAcloB,QAAd,EAAwBuoB,OAAxB,CAAnB;AACA,aAAO,KAAKF,OAAL,CAAaG,UAAb,EAAyBC,UAAzB,MAAyC,CAAhD;AACD;;;;;;;;WAMD,mBAAO;;AAEL,aAAQP,SAAiB,CAACQ,GAA1B;AACD;;;;;ACtDH;;;;;;;;;;;;;;;;;;AAyBA,IAAIC,YAAJ;;IAEaC,Q;;;;;;;;;;;;;WAQX,iBAAQzoB,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,aAAOF,WAAW,CAACC,CAAC,CAACjF,IAAH,EAASkF,CAAC,CAAClF,IAAX,CAAlB;AACD;;;WACD,qBAAYitB,IAAZ,EAAsB;;;AAGpB,YAAMU,cAAc,CAAC,iDAAD,CAApB;AACD;;;WACD,6BAAoBP,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,aAAO,KAAP,CAD8C,CACjC;AACd;;;WACD,mBAAO;;AAEL,aAAQL,SAAiB,CAACQ,GAA1B;AACD;;;WACD,mBAAO;;;AAGL,aAAO,IAAIR,SAAJ,CAAcjoB,QAAd,EAAwB0oB,YAAxB,CAAP;AACD;;;WAED,kBAASG,UAAT,EAA6B5tB,IAA7B,EAAyC;AACvCwC,YAAM,CACJ,OAAOorB,UAAP,KAAsB,QADlB,EAEJ,8CAFI,CAAN,CADuC;;AAMvC,aAAO,IAAIZ,SAAJ,CAAcY,UAAd,EAA0BH,YAA1B,CAAP;AACD;;;;;;;WAKD,oBAAQ;AACN,aAAO,MAAP;AACD;;;SA1CD,eAAuB;AACrB,aAAOA,YAAP;AACD,K;SAED,aAAwBI,GAAxB,EAA2B;AACzBJ,kBAAY,GAAGI,GAAf;AACD;;;;EAP2BX,K;;AA8CvB,IAAMY,SAAS,GAAG,IAAIJ,QAAJ,EAAlB;ACzEP;;;;;;;;;;;;;;;;;AAuCA;;;;IAGaK,iB;;;;;AAOX,6BACEd,IADF,EAEEe,QAFF,EAGEC,UAHF,EAIUC,UAJV,EAK6D;AAAA,QAAnDC,gBAAmD,uEAAJ,IAAI;;AAAA;;AADnD;AACA;AAXF,sBAA0D,EAA1D;AAaN,QAAI9L,GAAG,GAAG,CAAV;;AACA,WAAO,CAAC4K,IAAI,CAACxB,OAAL,EAAR,EAAwB;AACtBwB,UAAI,GAAGA,IAAP;AACA5K,SAAG,GAAG2L,QAAQ,GAAGC,UAAU,CAAChB,IAAI,CAAC1tB,GAAN,EAAWyuB,QAAX,CAAb,GAAoC,CAAlD,CAFsB;;AAItB,UAAIE,UAAJ,EAAgB;AACd7L,WAAG,IAAI,CAAC,CAAR;AACD;;AAED,UAAIA,GAAG,GAAG,CAAV,EAAa;;AAEX,YAAI,KAAK6L,UAAT,EAAqB;AACnBjB,cAAI,GAAGA,IAAI,CAAChL,IAAZ;AACD,SAFD,MAEO;AACLgL,cAAI,GAAGA,IAAI,CAAC/K,KAAZ;AACD;AACF,OAPD,MAOO,IAAIG,GAAG,KAAK,CAAZ,EAAe;;AAEpB,aAAK+L,UAAL,CAAgBxoB,IAAhB,CAAqBqnB,IAArB;AACA;AACD,OAJM,MAIA;;AAEL,aAAKmB,UAAL,CAAgBxoB,IAAhB,CAAqBqnB,IAArB;;AACA,YAAI,KAAKiB,UAAT,EAAqB;AACnBjB,cAAI,GAAGA,IAAI,CAAC/K,KAAZ;AACD,SAFD,MAEO;AACL+K,cAAI,GAAGA,IAAI,CAAChL,IAAZ;AACD;AACF;AACF;AACF;;;;WAED,mBAAO;AACL,UAAI,KAAKmM,UAAL,CAAgBtsB,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,eAAO,IAAP;AACD;;AAED,UAAImrB,IAAI,GAAG,KAAKmB,UAAL,CAAgB9K,GAAhB,EAAX;AACA,UAAI+F,MAAJ;;AACA,UAAI,KAAK8E,gBAAT,EAA2B;AACzB9E,cAAM,GAAG,KAAK8E,gBAAL,CAAsBlB,IAAI,CAAC1tB,GAA3B,EAAgC0tB,IAAI,CAACztB,KAArC,CAAT;AACD,OAFD,MAEO;AACL6pB,cAAM,GAAG;AAAE9pB,aAAG,EAAE0tB,IAAI,CAAC1tB,GAAZ;AAAiBC,eAAK,EAAEytB,IAAI,CAACztB;AAA7B,SAAT;AACD;;AAED,UAAI,KAAK0uB,UAAT,EAAqB;AACnBjB,YAAI,GAAGA,IAAI,CAAChL,IAAZ;;AACA,eAAO,CAACgL,IAAI,CAACxB,OAAL,EAAR,EAAwB;AACtB,eAAK2C,UAAL,CAAgBxoB,IAAhB,CAAqBqnB,IAArB;AACAA,cAAI,GAAGA,IAAI,CAAC/K,KAAZ;AACD;AACF,OAND,MAMO;AACL+K,YAAI,GAAGA,IAAI,CAAC/K,KAAZ;;AACA,eAAO,CAAC+K,IAAI,CAACxB,OAAL,EAAR,EAAwB;AACtB,eAAK2C,UAAL,CAAgBxoB,IAAhB,CAAqBqnB,IAArB;AACAA,cAAI,GAAGA,IAAI,CAAChL,IAAZ;AACD;AACF;;AAED,aAAOoH,MAAP;AACD;;;WAED,mBAAO;AACL,aAAO,KAAK+E,UAAL,CAAgBtsB,MAAhB,GAAyB,CAAhC;AACD;;;WAED,gBAAI;AACF,UAAI,KAAKssB,UAAL,CAAgBtsB,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,eAAO,IAAP;AACD;;AAED,UAAMmrB,IAAI,GAAG,KAAKmB,UAAL,CAAgB,KAAKA,UAAL,CAAgBtsB,MAAhB,GAAyB,CAAzC,CAAb;;AACA,UAAI,KAAKqsB,gBAAT,EAA2B;AACzB,eAAO,KAAKA,gBAAL,CAAsBlB,IAAI,CAAC1tB,GAA3B,EAAgC0tB,IAAI,CAACztB,KAArC,CAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAED,aAAG,EAAE0tB,IAAI,CAAC1tB,GAAZ;AAAiBC,eAAK,EAAEytB,IAAI,CAACztB;AAA7B,SAAP;AACD;AACF;;;;;AAGH;;;;;IAGa6uB,Q;;;;;;;;AAYX,oBACS9uB,GADT,EAESC,KAFT,EAGE8uB,KAHF,EAIErM,IAJF,EAKEC,KALF,EAKqD;AAAA;;AAJ5C;AACA;AAKP,SAAKoM,KAAL,GAAaA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwBD,QAAQ,CAACE,GAA9C;AACA,SAAKtM,IAAL,GACEA,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAuBuM,SAAS,CAACC,UADnC;AAEA,SAAKvM,KAAL,GACEA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAyBsM,SAAS,CAACC,UADrC;AAED;;;;;;;;;;;;;;;WAeD,cACElvB,GADF,EAEEC,KAFF,EAGE8uB,KAHF,EAIErM,IAJF,EAKEC,KALF,EAKoD;AAElD,aAAO,IAAImM,QAAJ,CACL9uB,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAKA,GADpB,EAELC,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KAFxB,EAGL8uB,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KAHxB,EAILrM,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB,KAAKA,IAJtB,EAKLC,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KALxB,CAAP;AAOD;;;;;;;WAKD,iBAAK;AACH,aAAO,KAAKD,IAAL,CAAUyM,KAAV,KAAoB,CAApB,GAAwB,KAAKxM,KAAL,CAAWwM,KAAX,EAA/B;AACD;;;;;;;WAKD,mBAAO;AACL,aAAO,KAAP;AACD;;;;;;;;;;;;;WAWD,0BAAiBxJ,MAAjB,EAAgD;AAC9C,aACE,KAAKjD,IAAL,CAAU0M,gBAAV,CAA2BzJ,MAA3B,KACA,CAAC,CAACA,MAAM,CAAC,KAAK3lB,GAAN,EAAW,KAAKC,KAAhB,CADR,IAEA,KAAK0iB,KAAL,CAAWyM,gBAAX,CAA4BzJ,MAA5B,CAHF;AAKD;;;;;;;;;;;;WAUD,0BAAiBA,MAAjB,EAA6C;AAC3C,aACE,KAAKhD,KAAL,CAAW0M,gBAAX,CAA4B1J,MAA5B,KACAA,MAAM,CAAC,KAAK3lB,GAAN,EAAW,KAAKC,KAAhB,CADN,IAEA,KAAKyiB,IAAL,CAAU2M,gBAAV,CAA2B1J,MAA3B,CAHF;AAKD;;;;;;;WAKO,gBAAI;AACV,UAAI,KAAKjD,IAAL,CAAUwJ,OAAV,EAAJ,EAAyB;AACvB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAQ,KAAKxJ,IAAL,CAA6B4M,IAA7B,EAAR;AACD;AACF;;;;;;;WAKD,kBAAM;AACJ,aAAO,KAAKA,IAAL,GAAYtvB,GAAnB;AACD;;;;;;;WAKD,kBAAM;AACJ,UAAI,KAAK2iB,KAAL,CAAWuJ,OAAX,EAAJ,EAA0B;AACxB,eAAO,KAAKlsB,GAAZ;AACD,OAFD,MAEO;AACL,eAAO,KAAK2iB,KAAL,CAAW4M,MAAX,EAAP;AACD;AACF;;;;;;;;;;WAQD,gBAAOvvB,GAAP,EAAeC,KAAf,EAAyByuB,UAAzB,EAAkD;AAChD,UAAIc,CAAC,GAAmB,IAAxB;AACA,UAAM1M,GAAG,GAAG4L,UAAU,CAAC1uB,GAAD,EAAMwvB,CAAC,CAACxvB,GAAR,CAAtB;;AACA,UAAI8iB,GAAG,GAAG,CAAV,EAAa;AACX0M,SAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBD,CAAC,CAAC9M,IAAF,CAAOgN,MAAP,CAAc1vB,GAAd,EAAmBC,KAAnB,EAA0ByuB,UAA1B,CAAzB,EAAgE,IAAhE,CAAJ;AACD,OAFD,MAEO,IAAI5L,GAAG,KAAK,CAAZ,EAAe;AACpB0M,SAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAaxvB,KAAb,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,CAAJ;AACD,OAFM,MAEA;AACLuvB,SAAC,GAAGA,CAAC,CAACC,IAAF,CACF,IADE,EAEF,IAFE,EAGF,IAHE,EAIF,IAJE,EAKFD,CAAC,CAAC7M,KAAF,CAAQ+M,MAAR,CAAe1vB,GAAf,EAAoBC,KAApB,EAA2ByuB,UAA3B,CALE,CAAJ;AAOD;;AACD,aAAOc,CAAC,CAACG,MAAF,EAAP;AACD;;;;;;;WAKO,sBAAU;AAChB,UAAI,KAAKjN,IAAL,CAAUwJ,OAAV,EAAJ,EAAyB;AACvB,eAAO+C,SAAS,CAACC,UAAjB;AACD;;AACD,UAAIM,CAAC,GAAmB,IAAxB;;AACA,UAAI,CAACA,CAAC,CAAC9M,IAAF,CAAOkN,MAAP,EAAD,IAAoB,CAACJ,CAAC,CAAC9M,IAAF,CAAOA,IAAP,CAAYkN,MAAZ,EAAzB,EAA+C;AAC7CJ,SAAC,GAAGA,CAAC,CAACK,YAAF,EAAJ;AACD;;AACDL,OAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAA0BD,CAAC,CAAC9M,IAAF,CAA0BoN,UAA1B,EAA1B,EAAkE,IAAlE,CAAJ;AACA,aAAON,CAAC,CAACG,MAAF,EAAP;AACD;;;;;;;;;WAOD,gBACE3vB,GADF,EAEE0uB,UAFF,EAE2B;AAEzB,UAAIc,CAAJ,EAAOO,QAAP;AACAP,OAAC,GAAG,IAAJ;;AACA,UAAId,UAAU,CAAC1uB,GAAD,EAAMwvB,CAAC,CAACxvB,GAAR,CAAV,GAAyB,CAA7B,EAAgC;AAC9B,YAAI,CAACwvB,CAAC,CAAC9M,IAAF,CAAOwJ,OAAP,EAAD,IAAqB,CAACsD,CAAC,CAAC9M,IAAF,CAAOkN,MAAP,EAAtB,IAAyC,CAACJ,CAAC,CAAC9M,IAAF,CAAOA,IAAP,CAAYkN,MAAZ,EAA9C,EAAoE;AAClEJ,WAAC,GAAGA,CAAC,CAACK,YAAF,EAAJ;AACD;;AACDL,SAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBD,CAAC,CAAC9M,IAAF,CAAOlf,MAAP,CAAcxD,GAAd,EAAmB0uB,UAAnB,CAAzB,EAAyD,IAAzD,CAAJ;AACD,OALD,MAKO;AACL,YAAIc,CAAC,CAAC9M,IAAF,CAAOkN,MAAP,EAAJ,EAAqB;AACnBJ,WAAC,GAAGA,CAAC,CAACQ,YAAF,EAAJ;AACD;;AACD,YAAI,CAACR,CAAC,CAAC7M,KAAF,CAAQuJ,OAAR,EAAD,IAAsB,CAACsD,CAAC,CAAC7M,KAAF,CAAQiN,MAAR,EAAvB,IAA2C,CAACJ,CAAC,CAAC7M,KAAF,CAAQD,IAAR,CAAakN,MAAb,EAAhD,EAAuE;AACrEJ,WAAC,GAAGA,CAAC,CAACS,aAAF,EAAJ;AACD;;AACD,YAAIvB,UAAU,CAAC1uB,GAAD,EAAMwvB,CAAC,CAACxvB,GAAR,CAAV,KAA2B,CAA/B,EAAkC;AAChC,cAAIwvB,CAAC,CAAC7M,KAAF,CAAQuJ,OAAR,EAAJ,EAAuB;AACrB,mBAAO+C,SAAS,CAACC,UAAjB;AACD,WAFD,MAEO;AACLa,oBAAQ,GAAIP,CAAC,CAAC7M,KAAF,CAA2B2M,IAA3B,EAAZ;AACAE,aAAC,GAAGA,CAAC,CAACC,IAAF,CACFM,QAAQ,CAAC/vB,GADP,EAEF+vB,QAAQ,CAAC9vB,KAFP,EAGF,IAHE,EAIF,IAJE,EAKDuvB,CAAC,CAAC7M,KAAF,CAA2BmN,UAA3B,EALC,CAAJ;AAOD;AACF;;AACDN,SAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+BD,CAAC,CAAC7M,KAAF,CAAQnf,MAAR,CAAexD,GAAf,EAAoB0uB,UAApB,CAA/B,CAAJ;AACD;;AACD,aAAOc,CAAC,CAACG,MAAF,EAAP;AACD;;;;;;;WAKD,kBAAM;AACJ,aAAO,KAAKZ,KAAZ;AACD;;;;;;;WAKO,kBAAM;AACZ,UAAIS,CAAC,GAAmB,IAAxB;;AACA,UAAIA,CAAC,CAAC7M,KAAF,CAAQiN,MAAR,MAAoB,CAACJ,CAAC,CAAC9M,IAAF,CAAOkN,MAAP,EAAzB,EAA0C;AACxCJ,SAAC,GAAGA,CAAC,CAACU,WAAF,EAAJ;AACD;;AACD,UAAIV,CAAC,CAAC9M,IAAF,CAAOkN,MAAP,MAAmBJ,CAAC,CAAC9M,IAAF,CAAOA,IAAP,CAAYkN,MAAZ,EAAvB,EAA6C;AAC3CJ,SAAC,GAAGA,CAAC,CAACQ,YAAF,EAAJ;AACD;;AACD,UAAIR,CAAC,CAAC9M,IAAF,CAAOkN,MAAP,MAAmBJ,CAAC,CAAC7M,KAAF,CAAQiN,MAAR,EAAvB,EAAyC;AACvCJ,SAAC,GAAGA,CAAC,CAACW,UAAF,EAAJ;AACD;;AACD,aAAOX,CAAP;AACD;;;;;;;WAKO,wBAAY;AAClB,UAAIA,CAAC,GAAG,KAAKW,UAAL,EAAR;;AACA,UAAIX,CAAC,CAAC7M,KAAF,CAAQD,IAAR,CAAakN,MAAb,EAAJ,EAA2B;AACzBJ,SAAC,GAAGA,CAAC,CAACC,IAAF,CACF,IADE,EAEF,IAFE,EAGF,IAHE,EAIF,IAJE,EAKDD,CAAC,CAAC7M,KAAF,CAA2BqN,YAA3B,EALC,CAAJ;AAOAR,SAAC,GAAGA,CAAC,CAACU,WAAF,EAAJ;AACAV,SAAC,GAAGA,CAAC,CAACW,UAAF,EAAJ;AACD;;AACD,aAAOX,CAAP;AACD;;;;;;;WAKO,yBAAa;AACnB,UAAIA,CAAC,GAAG,KAAKW,UAAL,EAAR;;AACA,UAAIX,CAAC,CAAC9M,IAAF,CAAOA,IAAP,CAAYkN,MAAZ,EAAJ,EAA0B;AACxBJ,SAAC,GAAGA,CAAC,CAACQ,YAAF,EAAJ;AACAR,SAAC,GAAGA,CAAC,CAACW,UAAF,EAAJ;AACD;;AACD,aAAOX,CAAP;AACD;;;;;;;WAKO,uBAAW;AACjB,UAAMY,EAAE,GAAG,KAAKX,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsBX,QAAQ,CAACE,GAA/B,EAAoC,IAApC,EAA0C,KAAKrM,KAAL,CAAWD,IAArD,CAAX;AACA,aAAO,KAAKC,KAAL,CAAW8M,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,KAAKV,KAAjC,EAAwCqB,EAAxC,EAA4C,IAA5C,CAAP;AACD;;;;;;;WAKO,wBAAY;AAClB,UAAMC,EAAE,GAAG,KAAKZ,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsBX,QAAQ,CAACE,GAA/B,EAAoC,KAAKtM,IAAL,CAAUC,KAA9C,EAAqD,IAArD,CAAX;AACA,aAAO,KAAKD,IAAL,CAAU+M,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,KAAKV,KAAhC,EAAuC,IAAvC,EAA6CsB,EAA7C,CAAP;AACD;;;;;;;WAKO,sBAAU;AAChB,UAAM3N,IAAI,GAAG,KAAKA,IAAL,CAAU+M,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAAC,KAAK/M,IAAL,CAAUqM,KAAtC,EAA6C,IAA7C,EAAmD,IAAnD,CAAb;AACA,UAAMpM,KAAK,GAAG,KAAKA,KAAL,CAAW8M,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,CAAC,KAAK9M,KAAL,CAAWoM,KAAxC,EAA+C,IAA/C,EAAqD,IAArD,CAAd;AACA,aAAO,KAAKU,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsB,CAAC,KAAKV,KAA5B,EAAmCrM,IAAnC,EAAyCC,KAAzC,CAAP;AACD;;;;;;;;;WAOO,0BAAc;AACpB,UAAM2N,UAAU,GAAG,KAAKC,MAAL,EAAnB;AACA,aAAOprB,IAAI,CAACsC,GAAL,CAAS,GAAT,EAAc6oB,UAAd,KAA6B,KAAKnB,KAAL,KAAe,CAAnD;AACD;;;WAED,kBAAM;AACJ,UAAI,KAAKS,MAAL,MAAiB,KAAKlN,IAAL,CAAUkN,MAAV,EAArB,EAAyC;AACvC,cAAM,IAAI7rB,KAAJ,CACJ,4BAA4B,KAAK/D,GAAjC,GAAuC,GAAvC,GAA6C,KAAKC,KAAlD,GAA0D,GADtD,CAAN;AAGD;;AACD,UAAI,KAAK0iB,KAAL,CAAWiN,MAAX,EAAJ,EAAyB;AACvB,cAAM,IAAI7rB,KAAJ,CACJ,qBAAqB,KAAK/D,GAA1B,GAAgC,GAAhC,GAAsC,KAAKC,KAA3C,GAAmD,UAD/C,CAAN;AAGD;;AACD,UAAMqwB,UAAU,GAAG,KAAK5N,IAAL,CAAU6N,MAAV,EAAnB;;AACA,UAAID,UAAU,KAAK,KAAK3N,KAAL,CAAW4N,MAAX,EAAnB,EAAwC;AACtC,cAAM,IAAIxsB,KAAJ,CAAU,qBAAV,CAAN;AACD,OAFD,MAEO;AACL,eAAOusB,UAAU,IAAI,KAAKV,MAAL,KAAgB,CAAhB,GAAoB,CAAxB,CAAjB;AACD;AACF;;;;;;AAtSMd,eAAM,IAAN;AACAA,iBAAQ,KAAR;AAwST;;;;IAGa0B,a;;;;;;;;;;;;;AAYX,kBACExwB,GADF,EAEEC,KAFF,EAGE8uB,KAHF,EAIErM,IAJF,EAKEC,KALF,EAKoD;AAElD,aAAO,IAAP;AACD;;;;;;;;;;;;WAUD,gBAAO3iB,GAAP,EAAeC,KAAf,EAAyByuB,UAAzB,EAAkD;AAChD,aAAO,IAAII,QAAJ,CAAa9uB,GAAb,EAAkBC,KAAlB,EAAyB,IAAzB,CAAP;AACD;;;;;;;;;;;WASD,gBAAOD,GAAP,EAAe0uB,UAAf,EAAwC;AACtC,aAAO,IAAP;AACD;;;;;;;WAKD,iBAAK;AACH,aAAO,CAAP;AACD;;;;;;;WAKD,mBAAO;AACL,aAAO,IAAP;AACD;;;;;;;;;;;;WAUD,0BAAiB/I,MAAjB,EAAgD;AAC9C,aAAO,KAAP;AACD;;;;;;;;;;;;WAUD,0BAAiBA,MAAjB,EAA6C;AAC3C,aAAO,KAAP;AACD;;;WAED,kBAAM;AACJ,aAAO,IAAP;AACD;;;WAED,kBAAM;AACJ,aAAO,IAAP;AACD;;;WAED,kBAAM;AACJ,aAAO,CAAP;AACD;;;;;;;WAKD,kBAAM;AACJ,aAAO,KAAP;AACD;;;;;AAGH;;;;;;IAIasJ,S;;;;;AAUX,qBACUwB,WADV,EAIuE;AAAA,QAF7DC,KAE6D,uEAA3CzB,SAAS,CAACC,UAAiC;;AAAA;;AAH7D;AACA;AAGN;;;;;;;;;;;;;WAUJ,gBAAOlvB,GAAP,EAAeC,KAAf,EAAuB;AACrB,aAAO,IAAIgvB,SAAJ,CACL,KAAKwB,WADA,EAEL,KAAKC,KAAL,CACGhB,MADH,CACU1vB,GADV,EACeC,KADf,EACsB,KAAKwwB,WAD3B,EAEGhB,IAFH,CAEQ,IAFR,EAEc,IAFd,EAEoBX,QAAQ,CAAC6B,KAF7B,EAEoC,IAFpC,EAE0C,IAF1C,CAFK,CAAP;AAMD;;;;;;;;;;WAQD,gBAAO3wB,GAAP,EAAa;AACX,aAAO,IAAIivB,SAAJ,CACL,KAAKwB,WADA,EAEL,KAAKC,KAAL,CACGltB,MADH,CACUxD,GADV,EACe,KAAKywB,WADpB,EAEGhB,IAFH,CAEQ,IAFR,EAEc,IAFd,EAEoBX,QAAQ,CAAC6B,KAF7B,EAEoC,IAFpC,EAE0C,IAF1C,CAFK,CAAP;AAMD;;;;;;;;;;;WASD,aAAI3wB,GAAJ,EAAU;AACR,UAAI8iB,GAAJ;AACA,UAAI4K,IAAI,GAAG,KAAKgD,KAAhB;;AACA,aAAO,CAAChD,IAAI,CAACxB,OAAL,EAAR,EAAwB;AACtBpJ,WAAG,GAAG,KAAK2N,WAAL,CAAiBzwB,GAAjB,EAAsB0tB,IAAI,CAAC1tB,GAA3B,CAAN;;AACA,YAAI8iB,GAAG,KAAK,CAAZ,EAAe;AACb,iBAAO4K,IAAI,CAACztB,KAAZ;AACD,SAFD,MAEO,IAAI6iB,GAAG,GAAG,CAAV,EAAa;AAClB4K,cAAI,GAAGA,IAAI,CAAChL,IAAZ;AACD,SAFM,MAEA,IAAII,GAAG,GAAG,CAAV,EAAa;AAClB4K,cAAI,GAAGA,IAAI,CAAC/K,KAAZ;AACD;AACF;;AACD,aAAO,IAAP;AACD;;;;;;;;;WAOD,2BAAkB3iB,GAAlB,EAAwB;AACtB,UAAI8iB,GAAJ;AAAA,UACE4K,IAAI,GAAG,KAAKgD,KADd;AAAA,UAEEE,WAAW,GAAG,IAFhB;;AAGA,aAAO,CAAClD,IAAI,CAACxB,OAAL,EAAR,EAAwB;AACtBpJ,WAAG,GAAG,KAAK2N,WAAL,CAAiBzwB,GAAjB,EAAsB0tB,IAAI,CAAC1tB,GAA3B,CAAN;;AACA,YAAI8iB,GAAG,KAAK,CAAZ,EAAe;AACb,cAAI,CAAC4K,IAAI,CAAChL,IAAL,CAAUwJ,OAAV,EAAL,EAA0B;AACxBwB,gBAAI,GAAGA,IAAI,CAAChL,IAAZ;;AACA,mBAAO,CAACgL,IAAI,CAAC/K,KAAL,CAAWuJ,OAAX,EAAR,EAA8B;AAC5BwB,kBAAI,GAAGA,IAAI,CAAC/K,KAAZ;AACD;;AACD,mBAAO+K,IAAI,CAAC1tB,GAAZ;AACD,WAND,MAMO,IAAI4wB,WAAJ,EAAiB;AACtB,mBAAOA,WAAW,CAAC5wB,GAAnB;AACD,WAFM,MAEA;AACL,mBAAO,IAAP,CADK,CACO;AACb;AACF,SAZD,MAYO,IAAI8iB,GAAG,GAAG,CAAV,EAAa;AAClB4K,cAAI,GAAGA,IAAI,CAAChL,IAAZ;AACD,SAFM,MAEA,IAAII,GAAG,GAAG,CAAV,EAAa;AAClB8N,qBAAW,GAAGlD,IAAd;AACAA,cAAI,GAAGA,IAAI,CAAC/K,KAAZ;AACD;AACF;;AAED,YAAM,IAAI5e,KAAJ,CACJ,uEADI,CAAN;AAGD;;;;;;;WAKD,mBAAO;AACL,aAAO,KAAK2sB,KAAL,CAAWxE,OAAX,EAAP;AACD;;;;;;;WAKD,iBAAK;AACH,aAAO,KAAKwE,KAAL,CAAWvB,KAAX,EAAP;AACD;;;;;;;WAKD,kBAAM;AACJ,aAAO,KAAKuB,KAAL,CAAWG,MAAX,EAAP;AACD;;;;;;;WAKD,kBAAM;AACJ,aAAO,KAAKH,KAAL,CAAWnB,MAAX,EAAP;AACD;;;;;;;;;;;;;WAWD,0BAAiB5J,MAAjB,EAAgD;AAC9C,aAAO,KAAK+K,KAAL,CAAWtB,gBAAX,CAA4BzJ,MAA5B,CAAP;AACD;;;;;;;;;;;;WAUD,0BAAiBA,MAAjB,EAA6C;AAC3C,aAAO,KAAK+K,KAAL,CAAWrB,gBAAX,CAA4B1J,MAA5B,CAAP;AACD;;;;;;;;WAMD,qBACEmL,eADF,EACqC;AAEnC,aAAO,IAAItC,iBAAJ,CACL,KAAKkC,KADA,EAEL,IAFK,EAGL,KAAKD,WAHA,EAIL,KAJK,EAKLK,eALK,CAAP;AAOD;;;WAED,yBACE9wB,GADF,EAEE8wB,eAFF,EAEqC;AAEnC,aAAO,IAAItC,iBAAJ,CACL,KAAKkC,KADA,EAEL1wB,GAFK,EAGL,KAAKywB,WAHA,EAIL,KAJK,EAKLK,eALK,CAAP;AAOD;;;WAED,gCACE9wB,GADF,EAEE8wB,eAFF,EAEqC;AAEnC,aAAO,IAAItC,iBAAJ,CACL,KAAKkC,KADA,EAEL1wB,GAFK,EAGL,KAAKywB,WAHA,EAIL,IAJK,EAKLK,eALK,CAAP;AAOD;;;WAED,4BACEA,eADF,EACqC;AAEnC,aAAO,IAAItC,iBAAJ,CACL,KAAKkC,KADA,EAEL,IAFK,EAGL,KAAKD,WAHA,EAIL,IAJK,EAKLK,eALK,CAAP;AAOD;;;;;AApND;;;;;AAGO7B,uBAAa,IAAIuB,aAAJ,EAAb;AChkBT;;;;;;;;;;;;;;;;;SAqBgBO,qBAAqBrO,MAAiBC,OAAgB;AACpE,SAAOld,WAAW,CAACid,IAAI,CAACjiB,IAAN,EAAYkiB,KAAK,CAACliB,IAAlB,CAAlB;AACD;;SAEeuwB,gBAAgBtO,MAAcC,OAAa;AACzD,SAAOld,WAAW,CAACid,IAAD,EAAOC,KAAP,CAAlB;AACF;AC3BA;;;;;;;;;;;;;;;;;;AAwBA,IAAIsO,UAAJ;;sBAE2B3C,KAAS;AAClC2C,YAAQ,GAAG3C,GAAX2C;AACD;;AAEM,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUC,QAAV,EAAmC;AACjE,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAO,YAAYpqB,qBAAqB,CAACoqB,QAAD,CAAxC;AACD,GAFD,MAEO;AACL,WAAO,YAAYA,QAAnB;AACD;AACF,CANM;AAQP;;;;;AAGO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUC,YAAV,EAA4B;AAC9D,MAAIA,YAAY,CAACC,UAAb,EAAJ,EAA+B;AAC7B,QAAMhD,GAAG,GAAG+C,YAAY,CAAC/C,GAAb,EAAZ;AACArrB,UAAM,CACJ,OAAOqrB,GAAP,KAAe,QAAf,IACE,OAAOA,GAAP,KAAe,QADjB,IAEG,OAAOA,GAAP,KAAe,QAAf,IAA2BxtB,QAAQ,CAACwtB,GAAD,EAAmB,KAAnB,CAHlC,EAIJ,sCAJI,CAAN;AAMD,GARD,MAQO;AACLrrB,UAAM,CACJouB,YAAY,KAAKJ,UAAjB,IAA6BI,YAAY,CAACnF,OAAb,EADzB,EAEJ,8BAFI,CAAN;AAID,GAd6D;;;AAgB9DjpB,QAAM,CACJouB,YAAY,KAAKJ,UAAjB,IAA6BI,YAAY,CAACE,WAAb,GAA2BrF,OAA3B,EADzB,EAEJ,oDAFI,CAAN;AAID,CApBM;ACzCP;;;;;;;;;;;;;;;;;;AAkCA,IAAIsF,yBAAJ;AAEA;;;;;;;IAKaC,Q;;;;;;AAsBX,oBACmBC,MADnB,EAE6E;AAAA,QAAnEC,aAAmE,uEAA7CF,QAAQ,CAACD,yBAAT,CAAmCtC,UAAU;;AAAA;;AAD1D;AACT;AATF,qBAA2B,IAA3B;AAWNjsB,UAAM,CACJ,KAAKyuB,MAAL,KAAgB3K,SAAhB,IAA6B,KAAK2K,MAAL,KAAgB,IADzC,EAEJ,0DAFI,CAAN;AAKAN,wBAAoB,CAAC,KAAKO,aAAN,CAApB;AACD;;;;;;AAGD,0BAAU;AACR,aAAO,IAAP;AACD;;;;;WAGD,uBAAW;AACT,aAAO,KAAKA,aAAZ;AACD;;;;;WAGD,wBAAeC,eAAf,EAAoC;AAClC,aAAO,IAAIH,QAAJ,CAAa,KAAKC,MAAlB,EAA0BE,eAA1B,CAAP;AACD;;;;;WAGD,2BAAkBC,SAAlB,EAAmC;;AAEjC,UAAIA,SAAS,KAAK,WAAlB,EAA+B;AAC7B,eAAO,KAAKF,aAAZ;AACD,OAFD,MAEO;AACL,eAAOF,QAAQ,CAACD,yBAAT,CAAmCtC,UAA1C;AACD;AACF;;;;;WAGD,kBAAS7N,IAAT,EAAmB;AACjB,UAAIc,WAAW,CAACd,IAAD,CAAf,EAAuB;AACrB,eAAO,IAAP;AACD,OAFD,MAEO,IAAID,YAAY,CAACC,IAAD,CAAZ,KAAuB,WAA3B,EAAwC;AAC7C,eAAO,KAAKsQ,aAAZ;AACD,OAFM,MAEA;AACL,eAAOF,QAAQ,CAACD,yBAAT,CAAmCtC,UAA1C;AACD;AACF;;;WACD,oBAAQ;AACN,aAAO,KAAP;AACD;;;;;WAGD,iCAAwB2C,SAAxB,EAA2CC,SAA3C,EAA0D;AACxD,aAAO,IAAP;AACD;;;;;WAGD,8BAAqBD,SAArB,EAAwCE,YAAxC,EAA0D;AACxD,UAAIF,SAAS,KAAK,WAAlB,EAA+B;AAC7B,eAAO,KAAKG,cAAL,CAAoBD,YAApB,CAAP;AACD,OAFD,MAEO,IAAIA,YAAY,CAAC7F,OAAb,MAA0B2F,SAAS,KAAK,WAA5C,EAAyD;AAC9D,eAAO,IAAP;AACD,OAFM,MAEA;AACL,eAAOJ,QAAQ,CAACD,yBAAT,CAAmCtC,UAAnC,CAA8C+C,oBAA9C,CACLJ,SADK,EAELE,YAFK,EAGLC,cAHK,CAGU,KAAKL,aAHf,CAAP;AAID;AACF;;;;;WAGD,qBAAYtQ,IAAZ,EAAwB0Q,YAAxB,EAA0C;AACxC,UAAMG,KAAK,GAAG9Q,YAAY,CAACC,IAAD,CAA1B;;AACA,UAAI6Q,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAOH,YAAP;AACD,OAFD,MAEO,IAAIA,YAAY,CAAC7F,OAAb,MAA0BgG,KAAK,KAAK,WAAxC,EAAqD;AAC1D,eAAO,IAAP;AACD,OAFM,MAEA;AACLjvB,cAAM,CACJivB,KAAK,KAAK,WAAV,IAAyB5Q,aAAa,CAACD,IAAD,CAAb,KAAwB,CAD7C,EAEJ,4CAFI,CAAN;AAKA,eAAO,KAAK4Q,oBAAL,CACLC,KADK,EAELT,QAAQ,CAACD,yBAAT,CAAmCtC,UAAnC,CAA8CiD,WAA9C,CACE5Q,YAAY,CAACF,IAAD,CADd,EAEE0Q,YAFF,CAFK,CAAP;AAOD;AACF;;;;;WAGD,mBAAO;AACL,aAAO,KAAP;AACD;;;;;WAGD,uBAAW;AACT,aAAO,CAAP;AACD;;;;;WAGD,sBAAajL,KAAb,EAA2BnB,MAA3B,EAA+D;AAC7D,aAAO,KAAP;AACD;;;WACD,aAAIyM,YAAJ,EAA0B;AACxB,UAAIA,YAAY,IAAI,CAAC,KAAKb,WAAL,GAAmBrF,OAAnB,EAArB,EAAmD;AACjD,eAAO;AACL,oBAAU,KAAKmG,QAAL,EADL;AAEL,uBAAa,KAAKd,WAAL,GAAmBjD,GAAnB;AAFR,SAAP;AAID,OALD,MAKO;AACL,eAAO,KAAK+D,QAAL,EAAP;AACD;AACF;;;;;WAGD,gBAAI;AACF,UAAI,KAAKC,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,YAAIC,MAAM,GAAG,EAAb;;AACA,YAAI,CAAC,KAAKZ,aAAL,CAAmBzF,OAAnB,EAAL,EAAmC;AACjCqG,gBAAM,IACJ,cACArB,gBAAgB,CAAC,KAAKS,aAAL,CAAmBrD,GAAnB,EAAD,CADhB,GAEA,GAHF;AAID;;AAED,YAAMhhB,IAAI,GAAG,OAAO,KAAKokB,MAAzB;AACAa,cAAM,IAAIjlB,IAAI,GAAG,GAAjB;;AACA,YAAIA,IAAI,KAAK,QAAb,EAAuB;AACrBilB,gBAAM,IAAIxrB,qBAAqB,CAAC,KAAK2qB,MAAN,CAA/B;AACD,SAFD,MAEO;AACLa,gBAAM,IAAI,KAAKb,MAAf;AACD;;AACD,aAAKY,SAAL,GAAiB5wB,IAAI,CAAC6wB,MAAD,CAArB;AACD;;AACD,aAAO,KAAKD,SAAZ;AACD;;;;;;;;WAMD,oBAAQ;AACN,aAAO,KAAKZ,MAAZ;AACD;;;WACD,mBAAU1O,KAAV,EAAqB;AACnB,UAAIA,KAAK,KAAKyO,QAAQ,CAACD,yBAAT,CAAmCtC,UAAjD,EAA6D;AAC3D,eAAO,CAAP;AACD,OAFD,MAEO,IAAIlM,KAAK,YAAYyO,QAAQ,CAACD,yBAA9B,EAAyD;AAC9D,eAAO,CAAC,CAAR;AACD,OAFM,MAEA;AACLvuB,cAAM,CAAC+f,KAAK,CAACsO,UAAN,EAAD,EAAqB,mBAArB,CAAN;AACA,eAAO,KAAKkB,kBAAL,CAAwBxP,KAAxB,CAAP;AACD;AACF;;;;;;;WAKO,4BAAmByP,SAAnB,EAAsC;AAC5C,UAAMC,aAAa,GAAG,OAAOD,SAAS,CAACf,MAAvC;AACA,UAAMiB,YAAY,GAAG,OAAO,KAAKjB,MAAjC;AACA,UAAMkB,UAAU,GAAGnB,QAAQ,CAACoB,gBAAT,CAA0BzuB,OAA1B,CAAkCsuB,aAAlC,CAAnB;AACA,UAAMI,SAAS,GAAGrB,QAAQ,CAACoB,gBAAT,CAA0BzuB,OAA1B,CAAkCuuB,YAAlC,CAAlB;AACA1vB,YAAM,CAAC2vB,UAAU,IAAI,CAAf,EAAkB,wBAAwBF,aAA1C,CAAN;AACAzvB,YAAM,CAAC6vB,SAAS,IAAI,CAAd,EAAiB,wBAAwBH,YAAzC,CAAN;;AACA,UAAIC,UAAU,KAAKE,SAAnB,EAA8B;;AAE5B,YAAIH,YAAY,KAAK,QAArB,EAA+B;;AAE7B,iBAAO,CAAP;AACD,SAHD,MAGO;;AAEL,cAAI,KAAKjB,MAAL,GAAce,SAAS,CAACf,MAA5B,EAAoC;AAClC,mBAAO,CAAC,CAAR;AACD,WAFD,MAEO,IAAI,KAAKA,MAAL,KAAgBe,SAAS,CAACf,MAA9B,EAAsC;AAC3C,mBAAO,CAAP;AACD,WAFM,MAEA;AACL,mBAAO,CAAP;AACD;AACF;AACF,OAfD,MAeO;AACL,eAAOoB,SAAS,GAAGF,UAAnB;AACD;AACF;;;WACD,qBAAS;AACP,aAAO,IAAP;AACD;;;WACD,qBAAS;AACP,aAAO,IAAP;AACD;;;WACD,gBAAO5P,KAAP,EAAkB;AAChB,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO,IAAP;AACD,OAFD,MAEO,IAAIA,KAAK,CAACsO,UAAN,EAAJ,EAAwB;AAC7B,YAAMmB,SAAS,GAAGzP,KAAlB;AACA,eACE,KAAK0O,MAAL,KAAgBe,SAAS,CAACf,MAA1B,IACA,KAAKC,aAAL,CAAmBoB,MAAnB,CAA0BN,SAAS,CAACd,aAApC,CAFF;AAID,OANM,MAMA;AACL,eAAO,KAAP;AACD;AACF;;;SA/ND,eAAoC;AAClC,aAAOH,yBAAP;AACD,K;SAND,aAAqClD,GAArC,EAAiE;AAC/DkD,+BAAyB,GAAGlD,GAA5B;AACD;;;;;AAMD;;;;;;AAIOmD,4BAAmB,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,EAAgC,QAAhC,CAAnB;ACtDT;;;;;;;;;;;;;;;;;AAuBA,IAAIuB,cAAJ;AACA,IAAI/B,UAAJ;;yBAEgC3C,KAAyB;AACvD0E,gBAAY,GAAG1E,GAAf0E;AACD;;SAEeC,WAAW3E,KAAS;AAClC2C,YAAQ,GAAG3C,GAAX2C;AACD;;IAEYiC,a;;;;;;;;;;;;;WACX,iBAAQxtB,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,UAAMwtB,SAAS,GAAGztB,CAAC,CAACgoB,IAAF,CAAO6D,WAAP,EAAlB;AACA,UAAM6B,SAAS,GAAGztB,CAAC,CAAC+nB,IAAF,CAAO6D,WAAP,EAAlB;AACA,UAAM8B,QAAQ,GAAGF,SAAS,CAACG,SAAV,CAAoBF,SAApB,CAAjB;;AACA,UAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAClB,eAAO5tB,WAAW,CAACC,CAAC,CAACjF,IAAH,EAASkF,CAAC,CAAClF,IAAX,CAAlB;AACD,OAFD,MAEO;AACL,eAAO4yB,QAAP;AACD;AACF;;;WACD,qBAAY3F,IAAZ,EAAsB;AACpB,aAAO,CAACA,IAAI,CAAC6D,WAAL,GAAmBrF,OAAnB,EAAR;AACD;;;WACD,6BAAoB2B,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,aAAO,CAACD,OAAO,CAAC0D,WAAR,GAAsBwB,MAAtB,CAA6BjF,OAAO,CAACyD,WAAR,EAA7B,CAAR;AACD;;;WACD,mBAAO;;AAEL,aAAQ9D,SAAiB,CAACQ,GAA1B;AACD;;;WACD,mBAAO;AACL,aAAO,IAAIR,SAAJ,CAAcjoB,QAAd,EAAwB,IAAIisB,QAAJ,CAAa,iBAAb,EAAgCR,UAAhC,CAAxB,CAAP;AACD;;;WAED,kBAAS5C,UAAT,EAA8B5tB,IAA9B,EAA0C;AACxC,UAAM4wB,YAAY,GAAG2B,cAAY,CAAC3E,UAAD,CAAjC;AACA,aAAO,IAAIZ,SAAJ,CAAchtB,IAAd,EAAoB,IAAIgxB,QAAJ,CAAa,iBAAb,EAAgCJ,YAAhC,CAApB,CAAP;AACD;;;;;;;WAKD,oBAAQ;AACN,aAAO,WAAP;AACD;;;;EAnCgC1D,K;;AAsC5B,IAAM4F,cAAc,GAAG,IAAIL,aAAJ,EAAvB;ACxEP;;;;;;;;;;;;;;;;;AAqBA,IAAMM,KAAK,GAAGruB,IAAI,CAAC9B,GAAL,CAAS,CAAT,CAAd;;IAEMowB,S;AAKJ,qBAAYlxB,MAAZ,EAA0B;AAAA;;AACxB,QAAMmxB,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD;AAAA;AAEfzrB,gBAAQ,CAAE/C,IAAI,CAAC9B,GAAL,CAASswB,GAAT,IAAgBH,KAAlB,EAAiC,EAAjC;AAFO;AAAA,KAAjB;;AAGA,QAAMI,OAAO,GAAG,SAAVA,OAAU,CAAC/rB,IAAD;AAAA,aAAkBK,QAAQ,CAACzF,KAAK,CAACoF,IAAI,GAAG,CAAR,CAAL,CAAgBE,IAAhB,CAAqB,GAArB,CAAD,EAA4B,CAA5B,CAA1B;AAAA,KAAhB;;AACA,SAAKonB,KAAL,GAAauE,QAAQ,CAACnxB,MAAM,GAAG,CAAV,CAArB;AACA,SAAKsxB,QAAL,GAAgB,KAAK1E,KAAL,GAAa,CAA7B;AACA,QAAM2E,IAAI,GAAGF,OAAO,CAAC,KAAKzE,KAAN,CAApB;AACA,SAAK4E,KAAL,GAAcxxB,MAAM,GAAG,CAAV,GAAeuxB,IAA5B;AACD;;;;WAED,wBAAY;;AAEV,UAAMhK,MAAM,GAAG,EAAE,KAAKiK,KAAL,GAAc,OAAO,KAAKF,QAA5B,CAAf;AACA,WAAKA,QAAL;AACA,aAAO/J,MAAP;AACD;;;;;AAGH;;;;;;;;;;;;;;;AAaO,IAAMkK,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,SAD2B,EAE3BnR,GAF2B,EAG3BoR,KAH2B,EAI3BC,SAJ2B,EAIO;AAElCF,WAAS,CAAC3tB,IAAV,CAAewc,GAAf;;AAEA,MAAMsR,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,GADwB,EAExBC,IAFwB,EAEZ;AAEZ,QAAM/xB,MAAM,GAAG+xB,IAAI,GAAGD,GAAtB;AACA,QAAIE,SAAJ;AACA,QAAIv0B,GAAJ;;AACA,QAAIuC,MAAM,KAAK,CAAf,EAAkB;AAChB,aAAO,IAAP;AACD,KAFD,MAEO,IAAIA,MAAM,KAAK,CAAf,EAAkB;AACvBgyB,eAAS,GAAGN,SAAS,CAACI,GAAD,CAArB;AACAr0B,SAAG,GAAGk0B,KAAK,GAAGA,KAAK,CAACK,SAAD,CAAR,GAAuBA,SAAlC;AACA,aAAO,IAAIzF,QAAJ,CACL9uB,GADK,EAELu0B,SAAS,CAAC7G,IAFL,EAGLoB,QAAQ,CAAC6B,KAHJ,EAIL,IAJK,EAKL,IALK,CAAP;AAOD,KAVM,MAUA;;AAEL,UAAM6D,MAAM,GAAGtsB,QAAQ,CAAE3F,MAAM,GAAG,CAAX,EAAsB,EAAtB,CAAR,GAAoC8xB,GAAnD;AACA,UAAM3R,IAAI,GAAG0R,iBAAiB,CAACC,GAAD,EAAMG,MAAN,CAA9B;AACA,UAAM7R,KAAK,GAAGyR,iBAAiB,CAACI,MAAM,GAAG,CAAV,EAAaF,IAAb,CAA/B;AACAC,eAAS,GAAGN,SAAS,CAACO,MAAD,CAArB;AACAx0B,SAAG,GAAGk0B,KAAK,GAAGA,KAAK,CAACK,SAAD,CAAR,GAAuBA,SAAlC;AACA,aAAO,IAAIzF,QAAJ,CACL9uB,GADK,EAELu0B,SAAS,CAAC7G,IAFL,EAGLoB,QAAQ,CAAC6B,KAHJ,EAILjO,IAJK,EAKLC,KALK,CAAP;AAOD;AACF,GAlCD;;AAoCA,MAAM8R,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUC,MAAV,EAA2B;AAClD,QAAIhH,IAAI,GAAmB,IAA3B;AACA,QAAIiH,IAAI,GAAG,IAAX;AACA,QAAI7N,KAAK,GAAGmN,SAAS,CAAC1xB,MAAtB;;AAEA,QAAMqyB,YAAY,GAAG,SAAfA,YAAe,CAAUC,SAAV,EAA6B9F,KAA7B,EAA2C;AAC9D,UAAMsF,GAAG,GAAGvN,KAAK,GAAG+N,SAApB;AACA,UAAMP,IAAI,GAAGxN,KAAb;AACAA,WAAK,IAAI+N,SAAT;AACA,UAAMC,SAAS,GAAGV,iBAAiB,CAACC,GAAG,GAAG,CAAP,EAAUC,IAAV,CAAnC;AACA,UAAMC,SAAS,GAAGN,SAAS,CAACI,GAAD,CAA3B;AACA,UAAMr0B,GAAG,GAAMk0B,KAAK,GAAGA,KAAK,CAACK,SAAD,CAAR,GAAuBA,SAA3C;AACAQ,mBAAa,CACX,IAAIjG,QAAJ,CACE9uB,GADF,EAEEu0B,SAAS,CAAC7G,IAFZ,EAGEqB,KAHF,EAIE,IAJF,EAKE+F,SALF,CADW,CAAb;AASD,KAhBD;;AAkBA,QAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,OAAV,EAAiC;AACrD,UAAItH,IAAJ,EAAU;AACRA,YAAI,CAAChL,IAAL,GAAYsS,OAAZ;AACAtH,YAAI,GAAGsH,OAAP;AACD,OAHD,MAGO;AACLL,YAAI,GAAGK,OAAP;AACAtH,YAAI,GAAGsH,OAAP;AACD;AACF,KARD;;AAUA,SAAK,IAAI1yB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoyB,MAAM,CAACvF,KAA3B,EAAkC,EAAE7sB,CAApC,EAAuC;AACrC,UAAM2yB,KAAK,GAAGP,MAAM,CAACQ,YAAP,EAAd,CADqC;;AAGrC,UAAML,SAAS,GAAG1vB,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAYitB,MAAM,CAACvF,KAAP,IAAgB7sB,CAAC,GAAG,CAApB,CAAZ,CAAlB;;AACA,UAAI2yB,KAAJ,EAAW;AACTL,oBAAY,CAACC,SAAD,EAAY/F,QAAQ,CAAC6B,KAArB,CAAZ;AACD,OAFD,MAEO;;AAELiE,oBAAY,CAACC,SAAD,EAAY/F,QAAQ,CAAC6B,KAArB,CAAZ;AACAiE,oBAAY,CAACC,SAAD,EAAY/F,QAAQ,CAACE,GAArB,CAAZ;AACD;AACF;;AACD,WAAO2F,IAAP;AACD,GA9CD;;AAgDA,MAAMD,MAAM,GAAG,IAAIjB,SAAJ,CAAcQ,SAAS,CAAC1xB,MAAxB,CAAf;AACA,MAAMoyB,IAAI,GAAGF,gBAAgB,CAACC,MAAD,CAA7B,CAzFkC;;AA2FlC,SAAO,IAAIzF,SAAJ,CAAoBkF,SAAS,IAAKrR,GAAlC,EAA+C6R,IAA/C,CAAP;AACD,CAhGM;AC5DP;;;;;;;;;;;;;;;;;;AA2BA,IAAIQ,gBAAJ;;AAEA,IAAMC,cAAc,GAAG,EAAvB;;IAEaC,Q;AAkBX,oBACUC,QADV,EAIUC,SAJV,EAI2C;AAAA;;AAHjC;AAGA;AACN;;;;;;;;WAEJ,aAAIC,QAAJ,EAAoB;AAClB,UAAMC,SAAS,GAAGpI,OAAO,CAAC,KAAKiI,QAAN,EAAgBE,QAAhB,CAAzB;;AACA,UAAI,CAACC,SAAL,EAAgB;AACd,cAAM,IAAI1xB,KAAJ,CAAU,0BAA0ByxB,QAApC,CAAN;AACD;;AAED,UAAIC,SAAS,YAAYxG,SAAzB,EAAoC;AAClC,eAAOwG,SAAP;AACD,OAFD,MAEO;;;AAGL,eAAO,IAAP;AACD;AACF;;;WAED,kBAASC,eAAT,EAA+B;AAC7B,aAAO50B,QAAQ,CAAC,KAAKy0B,SAAN,EAAiBG,eAAe,CAAC/0B,QAAhB,EAAjB,CAAf;AACD;;;WAED,kBACE+0B,eADF,EAEEC,gBAFF,EAE2C;AAEzC1yB,YAAM,CACJyyB,eAAe,KAAKnH,SADhB,EAEJ,qEAFI,CAAN;AAIA,UAAM0F,SAAS,GAAG,EAAlB;AACA,UAAI2B,eAAe,GAAG,KAAtB;AACA,UAAMC,IAAI,GAAGF,gBAAgB,CAACG,WAAjB,CAA6BrI,SAAS,CAACsI,IAAvC,CAAb;AACA,UAAIC,IAAI,GAAGH,IAAI,CAACI,OAAL,EAAX;;AACA,aAAOD,IAAP,EAAa;AACXJ,uBAAe,GACbA,eAAe,IAAIF,eAAe,CAACQ,WAAhB,CAA4BF,IAAI,CAACtI,IAAjC,CADrB;AAEAuG,iBAAS,CAAC5tB,IAAV,CAAe2vB,IAAf;AACAA,YAAI,GAAGH,IAAI,CAACI,OAAL,EAAP;AACD;;AACD,UAAIE,QAAJ;;AACA,UAAIP,eAAJ,EAAqB;AACnBO,gBAAQ,GAAGnC,aAAa,CAACC,SAAD,EAAYyB,eAAe,CAACU,UAAhB,EAAZ,CAAxB;AACD,OAFD,MAEO;AACLD,gBAAQ,GAAGf,cAAX;AACD;;AACD,UAAMiB,SAAS,GAAGX,eAAe,CAAC/0B,QAAhB,EAAlB;AACA,UAAM21B,WAAW,qBAAQ,KAAKf,SAAb,CAAjB;AACAe,iBAAW,CAACD,SAAD,CAAX,GAAyBX,eAAzB;AACA,UAAMa,UAAU,qBAAQ,KAAKjB,QAAb,CAAhB;AACAiB,gBAAU,CAACF,SAAD,CAAV,GAAwBF,QAAxB;AACA,aAAO,IAAId,QAAJ,CAAakB,UAAb,EAAyBD,WAAzB,CAAP;AACD;;;;;;;WAKD,sBACE/B,SADF,EAEEoB,gBAFF,EAE2C;AAAA;;AAEzC,UAAMY,UAAU,GAAGjK,GAAG,CACpB,KAAKgJ,QADe,EAEpB,UAACkB,eAAD,EAA8CH,SAA9C,EAA+D;AAC7D,YAAMvP,KAAK,GAAGuG,OAAO,CAAC,OAAI,CAACkI,SAAN,EAAiBc,SAAjB,CAArB;AACApzB,cAAM,CAAC6jB,KAAD,EAAQ,sCAAsCuP,SAA9C,CAAN;;AACA,YAAIG,eAAe,KAAKpB,cAAxB,EAAwC;;AAEtC,cAAItO,KAAK,CAACoP,WAAN,CAAkB3B,SAAS,CAAC7G,IAA5B,CAAJ,EAAuC;;AAErC,gBAAMuG,SAAS,GAAG,EAAlB;AACA,gBAAM4B,IAAI,GAAGF,gBAAgB,CAACG,WAAjB,CAA6BrI,SAAS,CAACsI,IAAvC,CAAb;AACA,gBAAIC,IAAI,GAAGH,IAAI,CAACI,OAAL,EAAX;;AACA,mBAAOD,IAAP,EAAa;AACX,kBAAIA,IAAI,CAACv1B,IAAL,KAAc8zB,SAAS,CAAC9zB,IAA5B,EAAkC;AAChCwzB,yBAAS,CAAC5tB,IAAV,CAAe2vB,IAAf;AACD;;AACDA,kBAAI,GAAGH,IAAI,CAACI,OAAL,EAAP;AACD;;AACDhC,qBAAS,CAAC5tB,IAAV,CAAekuB,SAAf;AACA,mBAAOP,aAAa,CAACC,SAAD,EAAYnN,KAAK,CAACsP,UAAN,EAAZ,CAApB;AACD,WAbD,MAaO;;AAEL,mBAAOhB,cAAP;AACD;AACF,SAnBD,MAmBO;AACL,cAAMqB,YAAY,GAAGd,gBAAgB,CAAClyB,GAAjB,CAAqB8wB,SAAS,CAAC9zB,IAA/B,CAArB;AACA,cAAIi2B,WAAW,GAAGF,eAAlB;;AACA,cAAIC,YAAJ,EAAkB;AAChBC,uBAAW,GAAGA,WAAW,CAAClzB,MAAZ,CACZ,IAAIiqB,SAAJ,CAAc8G,SAAS,CAAC9zB,IAAxB,EAA8Bg2B,YAA9B,CADY,CAAd;AAGD;;AACD,iBAAOC,WAAW,CAAChH,MAAZ,CAAmB6E,SAAnB,EAA8BA,SAAS,CAAC7G,IAAxC,CAAP;AACD;AACF,OAlCmB,CAAtB;AAoCA,aAAO,IAAI2H,QAAJ,CAAakB,UAAb,EAAyB,KAAKhB,SAA9B,CAAP;AACD;;;;;;;WAKD,2BACEhB,SADF,EAEEoB,gBAFF,EAE2C;AAEzC,UAAMY,UAAU,GAAGjK,GAAG,CACpB,KAAKgJ,QADe,EAEpB,UAACkB,eAAD,EAA4C;AAC1C,YAAIA,eAAe,KAAKpB,cAAxB,EAAwC;;AAEtC,iBAAOoB,eAAP;AACD,SAHD,MAGO;AACL,cAAMC,YAAY,GAAGd,gBAAgB,CAAClyB,GAAjB,CAAqB8wB,SAAS,CAAC9zB,IAA/B,CAArB;;AACA,cAAIg2B,YAAJ,EAAkB;AAChB,mBAAOD,eAAe,CAAChzB,MAAhB,CACL,IAAIiqB,SAAJ,CAAc8G,SAAS,CAAC9zB,IAAxB,EAA8Bg2B,YAA9B,CADK,CAAP;AAGD,WAJD,MAIO;;AAEL,mBAAOD,eAAP;AACD;AACF;AACF,OAjBmB,CAAtB;AAmBA,aAAO,IAAInB,QAAJ,CAAakB,UAAb,EAAyB,KAAKhB,SAA9B,CAAP;AACD;;;SAjJD,eAAkB;AAChBtyB,YAAM,CACJmyB,cAAc,IAAI7B,cADd,EAEJ,qCAFI,CAAN;AAIA4B,sBAAgB,GACdA,gBAAgB,IAChB,IAAIE,QAAJ,CACE;AAAE,qBAAaD;AAAf,OADF,EAEE;AAAE,qBAAa7B;AAAf,OAFF,CAFF;AAMA,aAAO4B,gBAAP;AACD;;;;;AC/CH;;;;;;;;;;;;;;;;AA4CA;;;AAEA,IAAIjG,UAAJ;AAEA;;;;;;IAKayH,Y;;;;;AAkBX,wBACmBC,SADnB,EAEmBjF,aAFnB,EAGUkF,SAHV,EAG6B;AAAA;;AAFV;AACA;AACT;AApBF,qBAA2B,IAA3B;;;;;;;AA2BN,QAAI,KAAKlF,aAAT,EAAwB;AACtBP,0BAAoB,CAAC,KAAKO,aAAN,CAApB;AACD;;AAED,QAAI,KAAKiF,SAAL,CAAe1K,OAAf,EAAJ,EAA8B;AAC5BjpB,YAAM,CACJ,CAAC,KAAK0uB,aAAN,IAAuB,KAAKA,aAAL,CAAmBzF,OAAnB,EADnB,EAEJ,sCAFI,CAAN;AAID;AACF;;;;;;AAGD,0BAAU;AACR,aAAO,KAAP;AACD;;;;;WAGD,uBAAW;AACT,aAAO,KAAKyF,aAAL,IAAsBzC,UAA7B;AACD;;;;;WAGD,wBAAe0C,eAAf,EAAoC;AAClC,UAAI,KAAKgF,SAAL,CAAe1K,OAAf,EAAJ,EAA8B;;AAE5B,eAAO,IAAP;AACD,OAHD,MAGO;AACL,eAAO,IAAIyK,YAAJ,CAAiB,KAAKC,SAAtB,EAAiChF,eAAjC,EAAkD,KAAKiF,SAAvD,CAAP;AACD;AACF;;;;;WAGD,2BAAkBhF,SAAlB,EAAmC;;AAEjC,UAAIA,SAAS,KAAK,WAAlB,EAA+B;AAC7B,eAAO,KAAKN,WAAL,EAAP;AACD,OAFD,MAEO;AACL,YAAM3N,MAAK,GAAG,KAAKgT,SAAL,CAAenzB,GAAf,CAAmBouB,SAAnB,CAAd;;AACA,eAAOjO,MAAK,KAAK,IAAV,GAAiBsL,UAAjB,GAA8BtL,MAArC;AACD;AACF;;;;;WAGD,kBAASvC,IAAT,EAAmB;AACjB,UAAM6Q,KAAK,GAAG9Q,YAAY,CAACC,IAAD,CAA1B;;AACA,UAAI6Q,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO,IAAP;AACD;;AAED,aAAO,KAAK4E,iBAAL,CAAuB5E,KAAvB,EAA8B6E,QAA9B,CAAuCxV,YAAY,CAACF,IAAD,CAAnD,CAAP;AACD;;;;;WAGD,kBAASwQ,SAAT,EAA0B;AACxB,aAAO,KAAK+E,SAAL,CAAenzB,GAAf,CAAmBouB,SAAnB,MAAkC,IAAzC;AACD;;;;;WAGD,8BAAqBA,SAArB,EAAwCE,YAAxC,EAA0D;AACxD9uB,YAAM,CAAC8uB,YAAD,EAAe,4CAAf,CAAN;;AACA,UAAIF,SAAS,KAAK,WAAlB,EAA+B;AAC7B,eAAO,KAAKG,cAAL,CAAoBD,YAApB,CAAP;AACD,OAFD,MAEO;AACL,YAAMwC,SAAS,GAAG,IAAI9G,SAAJ,CAAcoE,SAAd,EAAyBE,YAAzB,CAAlB;AACA,YAAI2E,WAAJ,EAAiBM,WAAjB;;AACA,YAAIjF,YAAY,CAAC7F,OAAb,EAAJ,EAA4B;AAC1BwK,qBAAW,GAAG,KAAKE,SAAL,CAAepzB,MAAf,CAAsBquB,SAAtB,CAAd;AACAmF,qBAAW,GAAG,KAAKH,SAAL,CAAeI,iBAAf,CACZ1C,SADY,EAEZ,KAAKqC,SAFO,CAAd;AAID,SAND,MAMO;AACLF,qBAAW,GAAG,KAAKE,SAAL,CAAelH,MAAf,CAAsBmC,SAAtB,EAAiCE,YAAjC,CAAd;AACAiF,qBAAW,GAAG,KAAKH,SAAL,CAAeK,YAAf,CAA4B3C,SAA5B,EAAuC,KAAKqC,SAA5C,CAAd;AACD;;AAED,YAAMO,WAAW,GAAGT,WAAW,CAACxK,OAAZ,KAChBgD,UADgB,GAEhB,KAAKyC,aAFT;AAGA,eAAO,IAAIgF,YAAJ,CAAiBD,WAAjB,EAA8BS,WAA9B,EAA2CH,WAA3C,CAAP;AACD;AACF;;;;;WAGD,qBAAY3V,IAAZ,EAAwB0Q,YAAxB,EAA0C;AACxC,UAAMG,KAAK,GAAG9Q,YAAY,CAACC,IAAD,CAA1B;;AACA,UAAI6Q,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAOH,YAAP;AACD,OAFD,MAEO;AACL9uB,cAAM,CACJme,YAAY,CAACC,IAAD,CAAZ,KAAuB,WAAvB,IAAsCC,aAAa,CAACD,IAAD,CAAb,KAAwB,CAD1D,EAEJ,4CAFI,CAAN;AAIA,YAAM+V,iBAAiB,GAAG,KAAKN,iBAAL,CAAuB5E,KAAvB,EAA8BC,WAA9B,CACxB5Q,YAAY,CAACF,IAAD,CADY,EAExB0Q,YAFwB,CAA1B;AAIA,eAAO,KAAKE,oBAAL,CAA0BC,KAA1B,EAAiCkF,iBAAjC,CAAP;AACD;AACF;;;;;WAGD,mBAAO;AACL,aAAO,KAAKR,SAAL,CAAe1K,OAAf,EAAP;AACD;;;;;WAGD,uBAAW;AACT,aAAO,KAAK0K,SAAL,CAAezH,KAAf,EAAP;AACD;;;;;WAKD,aAAIiD,YAAJ,EAA0B;AACxB,UAAI,KAAKlG,OAAL,EAAJ,EAAoB;AAClB,eAAO,IAAP;AACD;;AAED,UAAMjmB,GAAG,GAA6B,EAAtC;AACA,UAAIoxB,OAAO,GAAG,CAAd;AAAA,UACE9H,MAAM,GAAG,CADX;AAAA,UAEE+H,cAAc,GAAG,IAFnB;AAGA,WAAKC,YAAL,CAAkBhE,cAAlB,EAAkC,UAACvzB,GAAD,EAAc8xB,SAAd,EAA6B;AAC7D7rB,WAAG,CAACjG,GAAD,CAAH,GAAW8xB,SAAS,CAACxD,GAAV,CAAc8D,YAAd,CAAX;AAEAiF,eAAO;;AACP,YAAIC,cAAc,IAAIX,YAAY,CAAC1tB,eAAb,CAA6BX,IAA7B,CAAkCtI,GAAlC,CAAtB,EAA8D;AAC5DuvB,gBAAM,GAAGpqB,IAAI,CAACoe,GAAL,CAASgM,MAAT,EAAiBhrB,MAAM,CAACvE,GAAD,CAAvB,CAAT;AACD,SAFD,MAEO;AACLs3B,wBAAc,GAAG,KAAjB;AACD;AACF,OATD;;AAWA,UAAI,CAAClF,YAAD,IAAiBkF,cAAjB,IAAmC/H,MAAM,GAAG,IAAI8H,OAApD,EAA6D;;AAE3D,YAAMG,KAAK,GAAc,EAAzB,CAF2D;;AAI3D,aAAK,IAAMx3B,GAAX,IAAkBiG,GAAlB,EAAuB;AACrBuxB,eAAK,CAACx3B,GAAD,CAAL,GAAkCiG,GAAG,CAACjG,GAAD,CAArC;AACD;;AAED,eAAOw3B,KAAP;AACD,OATD,MASO;AACL,YAAIpF,YAAY,IAAI,CAAC,KAAKb,WAAL,GAAmBrF,OAAnB,EAArB,EAAmD;AACjDjmB,aAAG,CAAC,WAAD,CAAH,GAAmB,KAAKsrB,WAAL,GAAmBjD,GAAnB,EAAnB;AACD;;AACD,eAAOroB,GAAP;AACD;AACF;;;;;WAGD,gBAAI;AACF,UAAI,KAAKqsB,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,YAAIC,MAAM,GAAG,EAAb;;AACA,YAAI,CAAC,KAAKhB,WAAL,GAAmBrF,OAAnB,EAAL,EAAmC;AACjCqG,gBAAM,IACJ,cACArB,gBAAgB,CAAC,KAAKK,WAAL,GAAmBjD,GAAnB,EAAD,CADhB,GAEA,GAHF;AAID;;AAED,aAAKiJ,YAAL,CAAkBhE,cAAlB,EAAkC,UAACvzB,GAAD,EAAM8xB,SAAN,EAAe;AAC/C,cAAM2F,SAAS,GAAG3F,SAAS,CAACvS,IAAV,EAAlB;;AACA,cAAIkY,SAAS,KAAK,EAAlB,EAAsB;AACpBlF,kBAAM,IAAI,MAAMvyB,GAAN,GAAY,GAAZ,GAAkBy3B,SAA5B;AACD;AACF,SALD;AAOA,aAAKnF,SAAL,GAAiBC,MAAM,KAAK,EAAX,GAAgB,EAAhB,GAAqB7wB,IAAI,CAAC6wB,MAAD,CAA1C;AACD;;AACD,aAAO,KAAKD,SAAZ;AACD;;;;;WAGD,iCACET,SADF,EAEEC,SAFF,EAGEhL,KAHF,EAGc;AAEZ,UAAM4Q,GAAG,GAAG,KAAKC,aAAL,CAAmB7Q,KAAnB,CAAZ;;AACA,UAAI4Q,GAAJ,EAAS;AACP,YAAME,YAAW,GAAGF,GAAG,CAACG,iBAAJ,CAClB,IAAIpK,SAAJ,CAAcoE,SAAd,EAAyBC,SAAzB,CADkB,CAApB;;AAGA,eAAO8F,YAAW,GAAGA,YAAW,CAACn3B,IAAf,GAAsB,IAAxC;AACD,OALD,MAKO;AACL,eAAO,KAAKm2B,SAAL,CAAeiB,iBAAf,CAAiChG,SAAjC,CAAP;AACD;AACF;;;WAED,2BAAkB6D,eAAlB,EAAwC;AACtC,UAAMgC,GAAG,GAAG,KAAKC,aAAL,CAAmBjC,eAAnB,CAAZ;;AACA,UAAIgC,GAAJ,EAAS;AACP,YAAM7G,MAAM,GAAG6G,GAAG,CAAC7G,MAAJ,EAAf;AACA,eAAOA,MAAM,IAAIA,MAAM,CAACpwB,IAAxB;AACD,OAHD,MAGO;AACL,eAAO,KAAKm2B,SAAL,CAAe/F,MAAf,EAAP;AACD;AACF;;;WAED,uBAAc6E,eAAd,EAAoC;AAClC,UAAM7E,MAAM,GAAG,KAAKiH,iBAAL,CAAuBpC,eAAvB,CAAf;;AACA,UAAI7E,MAAJ,EAAY;AACV,eAAO,IAAIpD,SAAJ,CAAcoD,MAAd,EAAsB,KAAK+F,SAAL,CAAenzB,GAAf,CAAmBotB,MAAnB,CAAtB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;;;;;WAKD,0BAAiB6E,eAAjB,EAAuC;AACrC,UAAMgC,GAAG,GAAG,KAAKC,aAAL,CAAmBjC,eAAnB,CAAZ;;AACA,UAAIgC,GAAJ,EAAS;AACP,YAAMnI,MAAM,GAAGmI,GAAG,CAACnI,MAAJ,EAAf;AACA,eAAOA,MAAM,IAAIA,MAAM,CAAC9uB,IAAxB;AACD,OAHD,MAGO;AACL,eAAO,KAAKm2B,SAAL,CAAerH,MAAf,EAAP;AACD;AACF;;;WAED,sBAAamG,eAAb,EAAmC;AACjC,UAAMnG,MAAM,GAAG,KAAKwI,gBAAL,CAAsBrC,eAAtB,CAAf;;AACA,UAAInG,MAAJ,EAAY;AACV,eAAO,IAAI9B,SAAJ,CAAc8B,MAAd,EAAsB,KAAKqH,SAAL,CAAenzB,GAAf,CAAmB8rB,MAAnB,CAAtB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;WACD,sBACEzI,KADF,EAEEnB,MAFF,EAEqD;AAEnD,UAAM+R,GAAG,GAAG,KAAKC,aAAL,CAAmB7Q,KAAnB,CAAZ;;AACA,UAAI4Q,GAAJ,EAAS;AACP,eAAOA,GAAG,CAACtI,gBAAJ,CAAqB,qBAAW;AACrC,iBAAOzJ,MAAM,CAACqS,WAAW,CAACv3B,IAAb,EAAmBu3B,WAAW,CAACtK,IAA/B,CAAb;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACL,eAAO,KAAKkJ,SAAL,CAAexH,gBAAf,CAAgCzJ,MAAhC,CAAP;AACD;AACF;;;WAED,qBACE+P,eADF,EACwB;AAEtB,aAAO,KAAKuC,eAAL,CAAqBvC,eAAe,CAACwC,OAAhB,EAArB,EAAgDxC,eAAhD,CAAP;AACD;;;WAED,yBACEyC,SADF,EAEEzC,eAFF,EAEwB;AAEtB,UAAMgC,GAAG,GAAG,KAAKC,aAAL,CAAmBjC,eAAnB,CAAZ;;AACA,UAAIgC,GAAJ,EAAS;AACP,eAAOA,GAAG,CAACO,eAAJ,CAAoBE,SAApB,EAA+B,aAAG;AAAA,iBAAIn4B,GAAJ;AAAA,SAAlC,CAAP;AACD,OAFD,MAEO;AACL,YAAMo4B,QAAQ,GAAG,KAAKxB,SAAL,CAAeqB,eAAf,CACfE,SAAS,CAAC13B,IADK,EAEfgtB,SAAS,CAACsI,IAFK,CAAjB;AAIA,YAAIC,IAAI,GAAGoC,QAAQ,CAACC,IAAT,EAAX;;AACA,eAAOrC,IAAI,IAAI,IAAR,IAAgBN,eAAe,CAAC9H,OAAhB,CAAwBoI,IAAxB,EAA8BmC,SAA9B,IAA2C,CAAlE,EAAqE;AACnEC,kBAAQ,CAACnC,OAAT;AACAD,cAAI,GAAGoC,QAAQ,CAACC,IAAT,EAAP;AACD;;AACD,eAAOD,QAAP;AACD;AACF;;;WAED,4BACE1C,eADF,EACwB;AAEtB,aAAO,KAAK4C,sBAAL,CACL5C,eAAe,CAAC6C,OAAhB,EADK,EAEL7C,eAFK,CAAP;AAID;;;WAED,gCACE8C,OADF,EAEE9C,eAFF,EAEwB;AAEtB,UAAMgC,GAAG,GAAG,KAAKC,aAAL,CAAmBjC,eAAnB,CAAZ;;AACA,UAAIgC,GAAJ,EAAS;AACP,eAAOA,GAAG,CAACY,sBAAJ,CAA2BE,OAA3B,EAAoC,aAAG;AAC5C,iBAAOx4B,GAAP;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACL,YAAMo4B,QAAQ,GAAG,KAAKxB,SAAL,CAAe0B,sBAAf,CACfE,OAAO,CAAC/3B,IADO,EAEfgtB,SAAS,CAACsI,IAFK,CAAjB;AAIA,YAAIC,IAAI,GAAGoC,QAAQ,CAACC,IAAT,EAAX;;AACA,eAAOrC,IAAI,IAAI,IAAR,IAAgBN,eAAe,CAAC9H,OAAhB,CAAwBoI,IAAxB,EAA8BwC,OAA9B,IAAyC,CAAhE,EAAmE;AACjEJ,kBAAQ,CAACnC,OAAT;AACAD,cAAI,GAAGoC,QAAQ,CAACC,IAAT,EAAP;AACD;;AACD,eAAOD,QAAP;AACD;AACF;;;WACD,mBAAUpV,KAAV,EAA6B;AAC3B,UAAI,KAAKkJ,OAAL,EAAJ,EAAoB;AAClB,YAAIlJ,KAAK,CAACkJ,OAAN,EAAJ,EAAqB;AACnB,iBAAO,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,CAAC,CAAR;AACD;AACF,OAND,MAMO,IAAIlJ,KAAK,CAACsO,UAAN,MAAsBtO,KAAK,CAACkJ,OAAN,EAA1B,EAA2C;AAChD,eAAO,CAAP;AACD,OAFM,MAEA,IAAIlJ,KAAK,KAAKiO,QAAd,EAAwB;AAC7B,eAAO,CAAC,CAAR;AACD,OAFM,MAEA;;AAEL,eAAO,CAAP;AACD;AACF;;;WACD,mBAAUyE,eAAV,EAAgC;AAC9B,UACEA,eAAe,KAAKnH,SAApB,IACA,KAAKsI,SAAL,CAAe4B,QAAf,CAAwB/C,eAAxB,CAFF,EAGE;AACA,eAAO,IAAP;AACD,OALD,MAKO;AACL,YAAMsB,WAAW,GAAG,KAAKH,SAAL,CAAe6B,QAAf,CAClBhD,eADkB,EAElB,KAAKkB,SAFa,CAApB;AAIA,eAAO,IAAID,YAAJ,CAAiB,KAAKC,SAAtB,EAAiC,KAAKjF,aAAtC,EAAqDqF,WAArD,CAAP;AACD;AACF;;;WACD,mBAAUlQ,KAAV,EAAsB;AACpB,aAAOA,KAAK,KAAKyH,SAAV,IAAuB,KAAKsI,SAAL,CAAe4B,QAAf,CAAwB3R,KAAxB,CAA9B;AACD;;;WACD,gBAAO9D,KAAP,EAAkB;AAChB,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO,IAAP;AACD,OAFD,MAEO,IAAIA,KAAK,CAACsO,UAAN,EAAJ,EAAwB;AAC7B,eAAO,KAAP;AACD,OAFM,MAEA;AACL,YAAMqH,iBAAiB,GAAG3V,KAA1B;;AACA,YAAI,CAAC,KAAKuO,WAAL,GAAmBwB,MAAnB,CAA0B4F,iBAAiB,CAACpH,WAAlB,EAA1B,CAAL,EAAiE;AAC/D,iBAAO,KAAP;AACD,SAFD,MAEO,IACL,KAAKqF,SAAL,CAAezH,KAAf,OAA2BwJ,iBAAiB,CAAC/B,SAAlB,CAA4BzH,KAA5B,EADtB,EAEL;AACA,cAAMyJ,QAAQ,GAAG,KAAK9C,WAAL,CAAiBvC,cAAjB,CAAjB;AACA,cAAMsF,SAAS,GAAGF,iBAAiB,CAAC7C,WAAlB,CAA8BvC,cAA9B,CAAlB;AACA,cAAIuF,WAAW,GAAGF,QAAQ,CAAC3C,OAAT,EAAlB;AACA,cAAI8C,YAAY,GAAGF,SAAS,CAAC5C,OAAV,EAAnB;;AACA,iBAAO6C,WAAW,IAAIC,YAAtB,EAAoC;AAClC,gBACED,WAAW,CAACr4B,IAAZ,KAAqBs4B,YAAY,CAACt4B,IAAlC,IACA,CAACq4B,WAAW,CAACpL,IAAZ,CAAiBqF,MAAjB,CAAwBgG,YAAY,CAACrL,IAArC,CAFH,EAGE;AACA,qBAAO,KAAP;AACD;;AACDoL,uBAAW,GAAGF,QAAQ,CAAC3C,OAAT,EAAd;AACA8C,wBAAY,GAAGF,SAAS,CAAC5C,OAAV,EAAf;AACD;;AACD,iBAAO6C,WAAW,KAAK,IAAhB,IAAwBC,YAAY,KAAK,IAAhD;AACD,SAlBM,MAkBA;AACL,iBAAO,KAAP;AACD;AACF;AACF;;;;;;;;;WAOO,uBACNrD,eADM,EACgB;AAEtB,UAAIA,eAAe,KAAKnH,SAAxB,EAAmC;AACjC,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKsI,SAAL,CAAepzB,GAAf,CAAmBiyB,eAAe,CAAC/0B,QAAhB,EAAnB,CAAP;AACD;AACF;;;SAxZD,eAAqB;AACnB,aACEuuB,UAAU,KACTA,UAAU,GAAG,IAAIyH,YAAJ,CACZ,IAAI1H,SAAJ,CAA4B+B,eAA5B,CADY,EAEZ,IAFY,EAGZqE,QAAQ,CAAC2D,OAHG,CADJ,CADZ;AAQD;;;;;;AAgIcrC,+BAAkB,gBAAlB;;IAkRJsC,O;;;;;AACX;AAAA;;AAAA,8BAEI,IAAIhK,SAAJ,CAA4B+B,eAA5B,CAFJ,EAGI2F,YAAY,CAACzH,UAHjB,EAIImG,QAAQ,CAAC2D,OAJb;AAMC;;;;WAED,mBAAUhW,KAAV,EAAqB;AACnB,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF;;;WAED,gBAAOA,KAAP,EAAkB;;AAEhB,aAAOA,KAAK,KAAK,IAAjB;AACD;;;WAED,uBAAW;AACT,aAAO,IAAP;AACD;;;WAED,2BAAkB6O,SAAlB,EAAmC;AACjC,aAAO8E,YAAY,CAACzH,UAApB;AACD;;;WAED,mBAAO;AACL,aAAO,KAAP;AACD;;;;EAhC0ByH,Y;AAmC7B;;;;;AAGO,IAAM1F,QAAQ,GAAG,IAAIgI,OAAJ,EAAjB;AAYPC,MAAM,CAACC,gBAAP,CAAwB1L,SAAxB,EAAmC;AACjCQ,KAAG,EAAE;AACHhuB,SAAK,EAAE,IAAIwtB,SAAJ,CAAcloB,QAAd,EAAwBoxB,YAAY,CAACzH,UAArC;AADJ,GAD4B;AAIjCkK,KAAG,EAAE;AACHn5B,SAAK,EAAE,IAAIwtB,SAAJ,CAAcjoB,QAAd,EAAwByrB,QAAxB;AADJ;AAJ4B,CAAnC;AASA;;;;AAGA9C,QAAQ,CAACD,YAAT,GAAwByI,YAAY,CAACzH,UAArC;AACAuC,QAAQ,CAACD,yBAAT,GAAqCmF,YAArC;AACA1D,YAAU,CAAChC,QAAD,CAAVgC;AACAoG,UAAkB,CAACpI,QAAD,CAAlBoI;ACphBA;;;;;;;;;;;;;;;;;AA+BA,IAAMC,SAAS,GAAG,IAAlB;AAEA;;;;;;;SAMgBtG,aACduG,MACwB;AAAA,MAAxBpI,QAAwB,uEAAJ,IAAI;;AAExB,MAAIoI,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO5C,YAAY,CAACzH,UAApB;AACD;;AAED,MAAI,OAAOqK,IAAP,KAAgB,QAAhB,IAA4B,eAAeA,IAA/C,EAAqD;AACnDpI,YAAQ,GAAGoI,IAAI,CAAC,WAAD,CAAf;AACD;;AAEDt2B,QAAM,CACJkuB,QAAQ,KAAK,IAAb,IACE,OAAOA,QAAP,KAAoB,QADtB,IAEE,OAAOA,QAAP,KAAoB,QAFtB,IAGG,OAAOA,QAAP,KAAoB,QAApB,IAAgC,SAAUA,QAJzC,EAKJ,kCAAkC,OAAOA,QALrC,CAAN;;AAQA,MAAI,OAAOoI,IAAP,KAAgB,QAAhB,IAA4B,YAAYA,IAAxC,IAAgDA,IAAI,CAAC,QAAD,CAAJ,KAAmB,IAAvE,EAA6E;AAC3EA,QAAI,GAAGA,IAAI,CAAC,QAAD,CAAX;AACD,GApBuB;;;AAuBxB,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,SAASA,IAAzC,EAA+C;AAC7C,QAAMC,QAAQ,GAAGD,IAAjB;AACA,WAAO,IAAI9H,QAAJ,CAAa+H,QAAb,EAAuBxG,YAAY,CAAC7B,QAAD,CAAnC,CAAP;AACD;;AAED,MAAI,EAAEoI,IAAI,YAAY92B,KAAlB,KAA4B62B,SAAhC,EAA2C;AACzC,QAAMG,QAAQ,GAAgB,EAA9B;AACA,QAAIC,oBAAoB,GAAG,KAA3B;AACA,QAAMC,YAAY,GAAGJ,IAArB;AACA1yB,QAAI,CAAC8yB,YAAD,EAAe,UAAC35B,GAAD,EAAM4jB,KAAN,EAAW;AAC5B,UAAI5jB,GAAG,CAAC4G,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAA5B,EAAiC;;AAE/B,YAAMkrB,SAAS,GAAGkB,YAAY,CAACpP,KAAD,CAA9B;;AACA,YAAI,CAACkO,SAAS,CAAC5F,OAAV,EAAL,EAA0B;AACxBwN,8BAAoB,GAClBA,oBAAoB,IAAI,CAAC5H,SAAS,CAACP,WAAV,GAAwBrF,OAAxB,EAD3B;AAEAuN,kBAAQ,CAACpzB,IAAT,CAAc,IAAIonB,SAAJ,CAAcztB,GAAd,EAAmB8xB,SAAnB,CAAd;AACD;AACF;AACF,KAVG,CAAJ;;AAYA,QAAI2H,QAAQ,CAACl3B,MAAT,KAAoB,CAAxB,EAA2B;AACzB,aAAOo0B,YAAY,CAACzH,UAApB;AACD;;AAED,QAAM0K,QAAQ,GAAG5F,aAAa,CAC5ByF,QAD4B,EAE5B1I,oBAF4B,EAG5B,mBAAS;AAAA,aAAIwD,SAAS,CAAC9zB,IAAd;AAAA,KAHmB,EAI5BuwB,eAJ4B,CAA9B;;AAMA,QAAI0I,oBAAJ,EAA0B;AACxB,UAAMG,cAAc,GAAG7F,aAAa,CAClCyF,QADkC,EAElClG,cAAc,CAAC6C,UAAf,EAFkC,CAApC;AAIA,aAAO,IAAIO,YAAJ,CACLiD,QADK,EAEL5G,YAAY,CAAC7B,QAAD,CAFP,EAGL,IAAIkE,QAAJ,CACE;AAAE,qBAAawE;AAAf,OADF,EAEE;AAAE,qBAAatG;AAAf,OAFF,CAHK,CAAP;AAQD,KAbD,MAaO;AACL,aAAO,IAAIoD,YAAJ,CACLiD,QADK,EAEL5G,YAAY,CAAC7B,QAAD,CAFP,EAGLkE,QAAQ,CAAC2D,OAHJ,CAAP;AAKD;AACF,GA9CD,MA8CO;AACL,QAAItL,IAAI,GAASiJ,YAAY,CAACzH,UAA9B;AACAroB,QAAI,CAAC0yB,IAAD,EAAO,UAACv5B,GAAD,EAAc85B,SAAd,EAAgC;AACzC,UAAIh5B,QAAQ,CAACy4B,IAAD,EAAiBv5B,GAAjB,CAAZ,EAAmC;AACjC,YAAIA,GAAG,CAAC4G,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAA5B,EAAiC;;AAE/B,cAAMkrB,SAAS,GAAGkB,YAAY,CAAC8G,SAAD,CAA9B;;AACA,cAAIhI,SAAS,CAACR,UAAV,MAA0B,CAACQ,SAAS,CAAC5F,OAAV,EAA/B,EAAoD;AAClDwB,gBAAI,GAAGA,IAAI,CAACuE,oBAAL,CAA0BjyB,GAA1B,EAA+B8xB,SAA/B,CAAP;AACD;AACF;AACF;AACF,KAVG,CAAJ;AAYA,WAAOpE,IAAI,CAACsE,cAAL,CAAoBgB,YAAY,CAAC7B,QAAD,CAAhC,CAAP;AACD;AACF;;AAED4I,eAAe,CAAC/G,YAAD,CAAf;ACrIA;;;;;;;;;;;;;;;;;IA2BagH,S;;;;;AACX,qBAAoBC,UAApB,EAAoC;AAAA;;AAAA;;AAClC;AADkB;AAGlBh3B,UAAM,CACJ,CAACkf,WAAW,CAAC8X,UAAD,CAAZ,IAA4B7Y,YAAY,CAAC6Y,UAAD,CAAZ,KAA6B,WADrD,EAEJ,yDAFI,CAAN;AAHkC;AAOnC;;;;WAES,sBAAaC,IAAb,EAAuB;AAC/B,aAAOA,IAAI,CAACnD,QAAL,CAAc,KAAKkD,UAAnB,CAAP;AACD;;;WACD,qBAAYvM,IAAZ,EAAsB;AACpB,aAAO,CAACA,IAAI,CAACqJ,QAAL,CAAc,KAAKkD,UAAnB,EAA+B/N,OAA/B,EAAR;AACD;;;WACD,iBAAQxmB,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,UAAMw0B,MAAM,GAAG,KAAKC,YAAL,CAAkB10B,CAAC,CAACgoB,IAApB,CAAf;AACA,UAAM2M,MAAM,GAAG,KAAKD,YAAL,CAAkBz0B,CAAC,CAAC+nB,IAApB,CAAf;AACA,UAAM2F,QAAQ,GAAG8G,MAAM,CAAC7G,SAAP,CAAiB+G,MAAjB,CAAjB;;AACA,UAAIhH,QAAQ,KAAK,CAAjB,EAAoB;AAClB,eAAO5tB,WAAW,CAACC,CAAC,CAACjF,IAAH,EAASkF,CAAC,CAAClF,IAAX,CAAlB;AACD,OAFD,MAEO;AACL,eAAO4yB,QAAP;AACD;AACF;;;WACD,kBAAShF,UAAT,EAA6B5tB,IAA7B,EAAyC;AACvC,UAAM65B,SAAS,GAAGtH,YAAY,CAAC3E,UAAD,CAA9B;AACA,UAAMX,IAAI,GAAGiJ,YAAY,CAACzH,UAAb,CAAwBiD,WAAxB,CACX,KAAK8H,UADM,EAEXK,SAFW,CAAb;AAIA,aAAO,IAAI7M,SAAJ,CAAchtB,IAAd,EAAoBitB,IAApB,CAAP;AACD;;;WACD,mBAAO;AACL,UAAMA,IAAI,GAAGiJ,YAAY,CAACzH,UAAb,CAAwBiD,WAAxB,CAAoC,KAAK8H,UAAzC,EAAqDhJ,QAArD,CAAb;AACA,aAAO,IAAIxD,SAAJ,CAAcjoB,QAAd,EAAwBkoB,IAAxB,CAAP;AACD;;;WACD,oBAAQ;AACN,aAAO/L,SAAS,CAAC,KAAKsY,UAAN,EAAkB,CAAlB,CAAT,CAA8BlyB,IAA9B,CAAmC,GAAnC,CAAP;AACD;;;;EAxC4B4lB,K;AC3B/B;;;;;;;;;;;;;;;;;;IAuBa4M,U;;;;;;;;;;;;;WACX,iBAAQ70B,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,UAAM0tB,QAAQ,GAAG3tB,CAAC,CAACgoB,IAAF,CAAO4F,SAAP,CAAiB3tB,CAAC,CAAC+nB,IAAnB,CAAjB;;AACA,UAAI2F,QAAQ,KAAK,CAAjB,EAAoB;AAClB,eAAO5tB,WAAW,CAACC,CAAC,CAACjF,IAAH,EAASkF,CAAC,CAAClF,IAAX,CAAlB;AACD,OAFD,MAEO;AACL,eAAO4yB,QAAP;AACD;AACF;;;WACD,qBAAY3F,IAAZ,EAAsB;AACpB,aAAO,IAAP;AACD;;;WACD,6BAAoBG,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,aAAO,CAACD,OAAO,CAACkF,MAAR,CAAejF,OAAf,CAAR;AACD;;;WACD,mBAAO;;AAEL,aAAQL,SAAiB,CAACQ,GAA1B;AACD;;;WACD,mBAAO;;AAEL,aAAQR,SAAiB,CAAC2L,GAA1B;AACD;;;WAED,kBAAS/K,UAAT,EAA6B5tB,IAA7B,EAAyC;AACvC,UAAM65B,SAAS,GAAGtH,YAAY,CAAC3E,UAAD,CAA9B;AACA,aAAO,IAAIZ,SAAJ,CAAchtB,IAAd,EAAoB65B,SAApB,CAAP;AACD;;;;;;;WAKD,oBAAQ;AACN,aAAO,QAAP;AACD;;;;EAlC6B3M,K;;AAqCzB,IAAM6M,WAAW,GAAG,IAAID,UAAJ,EAApB;AC5DP;;;;;;;;;;;;;;;;AA2BA;;AACA,IAAME,UAAU,GACd,kEADF;AAGA,IAAMC,aAAa,GAAG,GAAtB;AAEA,IAAMC,aAAa,GAAG,GAAtB;AAEA,IAAMC,WAAW,GAAG,GAApB;AAEA;;;;;;;;;;;;;;;AAcO,IAAMC,UAAU,GAAI;;;AAGzB,MAAIC,YAAY,GAAG,CAAnB,CAHyB;;;;;AASzB,MAAMC,aAAa,GAAa,EAAhC;AAEA,SAAO,UAAUC,GAAV,EAAqB;AAC1B,QAAMC,aAAa,GAAGD,GAAG,KAAKF,YAA9B;AACAA,gBAAY,GAAGE,GAAf;AAEA,QAAI14B,CAAJ;AACA,QAAM44B,cAAc,GAAG,IAAIz4B,KAAJ,CAAU,CAAV,CAAvB;;AACA,SAAKH,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAI,CAAjB,EAAoBA,CAAC,EAArB,EAAyB;AACvB44B,oBAAc,CAAC54B,CAAD,CAAd,GAAoBm4B,UAAU,CAACU,MAAX,CAAkBH,GAAG,GAAG,EAAxB,CAApB,CADuB;;;AAIvBA,SAAG,GAAG71B,IAAI,CAACC,KAAL,CAAW41B,GAAG,GAAG,EAAjB,CAAN;AACD;;AACD/3B,UAAM,CAAC+3B,GAAG,KAAK,CAAT,EAAY,0BAAZ,CAAN;AAEA,QAAIv5B,EAAE,GAAGy5B,cAAc,CAACnzB,IAAf,CAAoB,EAApB,CAAT;;AAEA,QAAI,CAACkzB,aAAL,EAAoB;AAClB,WAAK34B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACvBy4B,qBAAa,CAACz4B,CAAD,CAAb,GAAmB6C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC+M,MAAL,KAAgB,EAA3B,CAAnB;AACD;AACF,KAJD,MAIO;;;AAGL,WAAK5P,CAAC,GAAG,EAAT,EAAaA,CAAC,IAAI,CAAL,IAAUy4B,aAAa,CAACz4B,CAAD,CAAb,KAAqB,EAA5C,EAAgDA,CAAC,EAAjD,EAAqD;AACnDy4B,qBAAa,CAACz4B,CAAD,CAAb,GAAmB,CAAnB;AACD;;AACDy4B,mBAAa,CAACz4B,CAAD,CAAb;AACD;;AACD,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACvBb,QAAE,IAAIg5B,UAAU,CAACU,MAAX,CAAkBJ,aAAa,CAACz4B,CAAD,CAA/B,CAAN;AACD;;AACDW,UAAM,CAACxB,EAAE,CAACc,MAAH,KAAc,EAAf,EAAmB,kCAAnB,CAAN;AAEA,WAAOd,EAAP;AACD,GAlCD;AAmCD,CA9CyB,EAAnB;;AAgDA,IAAM25B,SAAS,GAAG,SAAZA,SAAY,CAAUp7B,GAAV,EAAqB;AAC5C,MAAIA,GAAG,KAAK,KAAKoJ,cAAjB,EAAiC;;AAE/B,WAAOsxB,aAAP;AACD;;AACD,MAAMW,QAAQ,GAAWx1B,WAAW,CAAC7F,GAAD,CAApC;;AACA,MAAIq7B,QAAQ,IAAI,IAAhB,EAAsB;AACpB,WAAO,MAAMA,QAAQ,GAAG,CAAjB,CAAP;AACD;;AACD,MAAMrF,IAAI,GAAG,IAAIvzB,KAAJ,CAAUzC,GAAG,CAACuC,MAAd,CAAb;;AAEA,OAAK,IAAID,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG0zB,IAAI,CAACzzB,MAAzB,EAAiCD,GAAC,EAAlC,EAAsC;AACpC0zB,QAAI,CAAC1zB,GAAD,CAAJ,GAAUtC,GAAG,CAACm7B,MAAJ,CAAW74B,GAAX,CAAV;AACD;;AAED,MAAI0zB,IAAI,CAACzzB,MAAL,GAAcq4B,WAAlB,EAA+B;AAC7B5E,QAAI,CAAC3vB,IAAL,CAAUq0B,aAAV;AACA,WAAO1E,IAAI,CAACjuB,IAAL,CAAU,EAAV,CAAP;AACD;;AAED,MAAIzF,CAAC,GAAG0zB,IAAI,CAACzzB,MAAL,GAAc,CAAtB;;AAEA,SAAOD,CAAC,IAAI,CAAL,IAAU0zB,IAAI,CAAC1zB,CAAD,CAAJ,KAAYq4B,aAA7B,EAA4C;AAC1Cr4B,KAAC;AACF,GAxB2C;;;;AA4B5C,MAAIA,CAAC,KAAK,CAAC,CAAX,EAAc;AACZ,WAAOkD,QAAP;AACD;;AAED,MAAM81B,MAAM,GAAGtF,IAAI,CAAC1zB,CAAD,CAAnB;AACA,MAAMi5B,aAAa,GAAGd,UAAU,CAACU,MAAX,CAAkBV,UAAU,CAACr2B,OAAX,CAAmBk3B,MAAnB,IAA6B,CAA/C,CAAtB;AACAtF,MAAI,CAAC1zB,CAAD,CAAJ,GAAUi5B,aAAV;AAEA,SAAOvF,IAAI,CAACnU,KAAL,CAAW,CAAX,EAAcvf,CAAC,GAAG,CAAlB,EAAqByF,IAArB,CAA0B,EAA1B,CAAP;AACD,CArCM,C,CAuCP;;;AACO,IAAM6vB,WAAW,GAAG,SAAdA,WAAc,CAAU53B,GAAV,EAAqB;AAC9C,MAAIA,GAAG,KAAK,KAAKmJ,cAAjB,EAAiC;AAC/B,WAAO5D,QAAP;AACD;;AACD,MAAM81B,QAAQ,GAAWx1B,WAAW,CAAC7F,GAAD,CAApC;;AACA,MAAIq7B,QAAQ,IAAI,IAAhB,EAAsB;AACpB,WAAO,MAAMA,QAAQ,GAAG,CAAjB,CAAP;AACD;;AACD,MAAMrF,IAAI,GAAG,IAAIvzB,KAAJ,CAAUzC,GAAG,CAACuC,MAAd,CAAb;;AACA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0zB,IAAI,CAACzzB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC0zB,QAAI,CAAC1zB,CAAD,CAAJ,GAAUtC,GAAG,CAACm7B,MAAJ,CAAW74B,CAAX,CAAV;AACD,GAX6C;;;;;;;;;;;;;AAuB9C,MAAI0zB,IAAI,CAACA,IAAI,CAACzzB,MAAL,GAAc,CAAf,CAAJ,KAA0Bm4B,aAA9B,EAA6C;AAC3C,QAAI1E,IAAI,CAACzzB,MAAL,KAAgB,CAApB,EAAuB;;AAErB,aAAO,KAAK6G,cAAZ;AACD;;AACD,WAAO4sB,IAAI,CAACA,IAAI,CAACzzB,MAAL,GAAc,CAAf,CAAX;AACA,WAAOyzB,IAAI,CAACjuB,IAAL,CAAU,EAAV,CAAP;AACD,GA9B6C;;;;;AAkC9CiuB,MAAI,CAACA,IAAI,CAACzzB,MAAL,GAAc,CAAf,CAAJ,GAAwBk4B,UAAU,CAACU,MAAX,CACtBV,UAAU,CAACr2B,OAAX,CAAmB4xB,IAAI,CAACA,IAAI,CAACzzB,MAAL,GAAc,CAAf,CAAvB,IAA4C,CADtB,CAAxB;AAGA,SAAOyzB,IAAI,CAACjuB,IAAL,CAAU,EAAV,IAAgB4yB,aAAa,CAACa,MAAd,CAAqBZ,WAAW,GAAG5E,IAAI,CAACzzB,MAAxC,CAAvB;AACD,CAtCM;AC3IP;;;;;;;;;;;;;;;;;;SA6CgBk5B,YAAYC,cAAkB;AAC5C,SAAO;AAAEpuB,QAAI;AAAA;AAAN;AAA0BouB,gBAAY,EAAZA;AAA1B,GAAP;AACD;;SAEeC,iBACd9J,WACA6J,cAAkB;AAElB,SAAO;AAAEpuB,QAAI;AAAA;AAAN;AAAgCouB,gBAAY,EAAZA,YAAhC;AAA8C7J,aAAS,EAATA;AAA9C,GAAP;AACD;;SAEe+J,mBACd/J,WACA6J,cAAkB;AAElB,SAAO;AAAEpuB,QAAI;AAAA;AAAN;AAAkCouB,gBAAY,EAAZA,YAAlC;AAAgD7J,aAAS,EAATA;AAAhD,GAAP;AACD;;SAEegK,mBACdhK,WACA6J,cACAI,SAAa;AAEb,SAAO;AACLxuB,QAAI;AAAA;AADC;AAELouB,gBAAY,EAAZA,YAFK;AAGL7J,aAAS,EAATA,SAHK;AAILiK,WAAO,EAAPA;AAJK,GAAP;AAMD;;SAEeC,iBACdlK,WACA6J,cAAkB;AAElB,SAAO;AAAEpuB,QAAI;AAAA;AAAN;AAAgCouB,gBAAY,EAAZA,YAAhC;AAA8C7J,aAAS,EAATA;AAA9C,GAAP;AACF;ACjFA;;;;;;;;;;;;;;;;;AAkCA;;;;;IAGamK,a;AACX,yBAA6BC,MAA7B,EAA0C;AAAA;;AAAb;AAAiB;;;;WAE9C,qBACE/B,IADF,EAEEl6B,GAFF,EAGEk8B,QAHF,EAIEC,YAJF,EAKEb,MALF,EAMEc,oBANF,EAMqD;AAEnDn5B,YAAM,CACJi3B,IAAI,CAACmC,SAAL,CAAe,KAAKJ,MAApB,CADI,EAEJ,mDAFI,CAAN;AAIA,UAAMK,QAAQ,GAAGpC,IAAI,CAACpD,iBAAL,CAAuB92B,GAAvB,CAAjB,CANmD;;AAQnD,UACEs8B,QAAQ,CAACvF,QAAT,CAAkBoF,YAAlB,EAAgCpJ,MAAhC,CAAuCmJ,QAAQ,CAACnF,QAAT,CAAkBoF,YAAlB,CAAvC,CADF,EAEE;;;;AAIA,YAAIG,QAAQ,CAACpQ,OAAT,OAAuBgQ,QAAQ,CAAChQ,OAAT,EAA3B,EAA+C;;;;AAK7C,iBAAOgO,IAAP;AACD;AACF;;AAED,UAAIkC,oBAAoB,IAAI,IAA5B,EAAkC;AAChC,YAAIF,QAAQ,CAAChQ,OAAT,EAAJ,EAAwB;AACtB,cAAIgO,IAAI,CAACqC,QAAL,CAAcv8B,GAAd,CAAJ,EAAwB;AACtBo8B,gCAAoB,CAACI,gBAArB,CACEZ,kBAAkB,CAAC57B,GAAD,EAAMs8B,QAAN,CADpB;AAGD,WAJD,MAIO;AACLr5B,kBAAM,CACJi3B,IAAI,CAAC5I,UAAL,EADI,EAEJ,qEAFI,CAAN;AAID;AACF,SAXD,MAWO,IAAIgL,QAAQ,CAACpQ,OAAT,EAAJ,EAAwB;AAC7BkQ,8BAAoB,CAACI,gBAArB,CAAsCb,gBAAgB,CAAC37B,GAAD,EAAMk8B,QAAN,CAAtD;AACD,SAFM,MAEA;AACLE,8BAAoB,CAACI,gBAArB,CACEX,kBAAkB,CAAC77B,GAAD,EAAMk8B,QAAN,EAAgBI,QAAhB,CADpB;AAGD;AACF;;AACD,UAAIpC,IAAI,CAAC5I,UAAL,MAAqB4K,QAAQ,CAAChQ,OAAT,EAAzB,EAA6C;AAC3C,eAAOgO,IAAP;AACD,OAFD,MAEO;;AAEL,eAAOA,IAAI,CAACjI,oBAAL,CAA0BjyB,GAA1B,EAA+Bk8B,QAA/B,EAAyCO,SAAzC,CAAmD,KAAKR,MAAxD,CAAP;AACD;AACF;;;WACD,wBACEH,OADF,EAEEY,OAFF,EAGEN,oBAHF,EAGqD;AAEnD,UAAIA,oBAAoB,IAAI,IAA5B,EAAkC;AAChC,YAAI,CAACN,OAAO,CAACxK,UAAR,EAAL,EAA2B;AACzBwK,iBAAO,CAACvE,YAAR,CAAqBhE,cAArB,EAAqC,UAACvzB,GAAD,EAAM8xB,SAAN,EAAe;AAClD,gBAAI,CAAC4K,OAAO,CAACH,QAAR,CAAiBv8B,GAAjB,CAAL,EAA4B;AAC1Bo8B,kCAAoB,CAACI,gBAArB,CACEZ,kBAAkB,CAAC57B,GAAD,EAAM8xB,SAAN,CADpB;AAGD;AACF,WAND;AAOD;;AACD,YAAI,CAAC4K,OAAO,CAACpL,UAAR,EAAL,EAA2B;AACzBoL,iBAAO,CAACnF,YAAR,CAAqBhE,cAArB,EAAqC,UAACvzB,GAAD,EAAM8xB,SAAN,EAAe;AAClD,gBAAIgK,OAAO,CAACS,QAAR,CAAiBv8B,GAAjB,CAAJ,EAA2B;AACzB,kBAAMs8B,QAAQ,GAAGR,OAAO,CAAChF,iBAAR,CAA0B92B,GAA1B,CAAjB;;AACA,kBAAI,CAACs8B,QAAQ,CAACvJ,MAAT,CAAgBjB,SAAhB,CAAL,EAAiC;AAC/BsK,oCAAoB,CAACI,gBAArB,CACEX,kBAAkB,CAAC77B,GAAD,EAAM8xB,SAAN,EAAiBwK,QAAjB,CADpB;AAGD;AACF,aAPD,MAOO;AACLF,kCAAoB,CAACI,gBAArB,CACEb,gBAAgB,CAAC37B,GAAD,EAAM8xB,SAAN,CADlB;AAGD;AACF,WAbD;AAcD;AACF;;AACD,aAAO4K,OAAO,CAACD,SAAR,CAAkB,KAAKR,MAAvB,CAAP;AACD;;;WACD,wBAAeH,OAAf,EAA8B3E,WAA9B,EAA+C;AAC7C,UAAI2E,OAAO,CAAC5P,OAAR,EAAJ,EAAuB;AACrB,eAAOyK,YAAY,CAACzH,UAApB;AACD,OAFD,MAEO;AACL,eAAO4M,OAAO,CAAC9J,cAAR,CAAuBmF,WAAvB,CAAP;AACD;AACF;;;WACD,wBAAY;AACV,aAAO,KAAP;AACD;;;WACD,4BAAgB;AACd,aAAO,IAAP;AACD;;;WACD,oBAAQ;AACN,aAAO,KAAK8E,MAAZ;AACD;;;;;ACjJH;;;;;;;;;;;;;;;;;AA6BA;;;;;IAGaU,Y;AASX,wBAAYpvB,MAAZ,EAA+B;AAAA;;AAC7B,SAAKqvB,cAAL,GAAsB,IAAIZ,aAAJ,CAAkBzuB,MAAM,CAACggB,QAAP,EAAlB,CAAtB;AACA,SAAK0O,MAAL,GAAc1uB,MAAM,CAACggB,QAAP,EAAd;AACA,SAAKsP,UAAL,GAAkBF,YAAY,CAACG,aAAb,CAA2BvvB,MAA3B,CAAlB;AACA,SAAKwvB,QAAL,GAAgBJ,YAAY,CAACK,WAAb,CAAyBzvB,MAAzB,CAAhB;AACD;;;;WAED,wBAAY;AACV,aAAO,KAAKsvB,UAAZ;AACD;;;WAED,sBAAU;AACR,aAAO,KAAKE,QAAZ;AACD;;;WAED,iBAAQrP,IAAR,EAAuB;AACrB,aACE,KAAKuO,MAAL,CAAYrO,OAAZ,CAAoB,KAAKqP,YAAL,EAApB,EAAyCvP,IAAzC,KAAkD,CAAlD,IACA,KAAKuO,MAAL,CAAYrO,OAAZ,CAAoBF,IAApB,EAA0B,KAAKwP,UAAL,EAA1B,KAAgD,CAFlD;AAID;;;WACD,qBACEhD,IADF,EAEEl6B,GAFF,EAGEk8B,QAHF,EAIEC,YAJF,EAKEb,MALF,EAMEc,oBANF,EAMqD;AAEnD,UAAI,CAAC,KAAKe,OAAL,CAAa,IAAI1P,SAAJ,CAAcztB,GAAd,EAAmBk8B,QAAnB,CAAb,CAAL,EAAiD;AAC/CA,gBAAQ,GAAGvF,YAAY,CAACzH,UAAxB;AACD;;AACD,aAAO,KAAK0N,cAAL,CAAoBzK,WAApB,CACL+H,IADK,EAELl6B,GAFK,EAGLk8B,QAHK,EAILC,YAJK,EAKLb,MALK,EAMLc,oBANK,CAAP;AAQD;;;WACD,wBACEN,OADF,EAEEY,OAFF,EAGEN,oBAHF,EAGqD;AAEnD,UAAIM,OAAO,CAACpL,UAAR,EAAJ,EAA0B;;AAExBoL,eAAO,GAAG/F,YAAY,CAACzH,UAAvB;AACD;;AACD,UAAIkO,QAAQ,GAAGV,OAAO,CAACD,SAAR,CAAkB,KAAKR,MAAvB,CAAf,CANmD;;AAQnDmB,cAAQ,GAAGA,QAAQ,CAACpL,cAAT,CAAwB2E,YAAY,CAACzH,UAArC,CAAX;AACA,UAAMmO,IAAI,GAAG,IAAb;AACAX,aAAO,CAACnF,YAAR,CAAqBhE,cAArB,EAAqC,UAACvzB,GAAD,EAAM8xB,SAAN,EAAe;AAClD,YAAI,CAACuL,IAAI,CAACF,OAAL,CAAa,IAAI1P,SAAJ,CAAcztB,GAAd,EAAmB8xB,SAAnB,CAAb,CAAL,EAAkD;AAChDsL,kBAAQ,GAAGA,QAAQ,CAACnL,oBAAT,CAA8BjyB,GAA9B,EAAmC22B,YAAY,CAACzH,UAAhD,CAAX;AACD;AACF,OAJD;AAKA,aAAO,KAAK0N,cAAL,CAAoBU,cAApB,CACLxB,OADK,EAELsB,QAFK,EAGLhB,oBAHK,CAAP;AAKD;;;WACD,wBAAeN,OAAf,EAA8B3E,WAA9B,EAA+C;;AAE7C,aAAO2E,OAAP;AACD;;;WACD,wBAAY;AACV,aAAO,IAAP;AACD;;;WACD,4BAAgB;AACd,aAAO,KAAKc,cAAZ;AACD;;;WACD,oBAAQ;AACN,aAAO,KAAKX,MAAZ;AACD;;;WAEO,uBAAqB1uB,MAArB,EAAwC;AAC9C,UAAIA,MAAM,CAACgwB,QAAP,EAAJ,EAAuB;AACrB,YAAMC,SAAS,GAAGjwB,MAAM,CAACkwB,iBAAP,EAAlB;AACA,eAAOlwB,MAAM,CAACggB,QAAP,GAAkBmQ,QAAlB,CAA2BnwB,MAAM,CAACowB,kBAAP,EAA3B,EAAwDH,SAAxD,CAAP;AACD,OAHD,MAGO;AACL,eAAOjwB,MAAM,CAACggB,QAAP,GAAkB2K,OAAlB,EAAP;AACD;AACF;;;WAEO,qBAAmB3qB,MAAnB,EAAsC;AAC5C,UAAIA,MAAM,CAACqwB,MAAP,EAAJ,EAAqB;AACnB,YAAMC,OAAO,GAAGtwB,MAAM,CAACuwB,eAAP,EAAhB;AACA,eAAOvwB,MAAM,CAACggB,QAAP,GAAkBmQ,QAAlB,CAA2BnwB,MAAM,CAACwwB,gBAAP,EAA3B,EAAsDF,OAAtD,CAAP;AACD,OAHD,MAGO;AACL,eAAOtwB,MAAM,CAACggB,QAAP,GAAkBgL,OAAlB,EAAP;AACD;AACF;;;;;ACxIH;;;;;;;;;;;;;;;;;AAoCA;;;;;IAGayF,a;AASX,yBAAYzwB,MAAZ,EAA+B;AAAA;;AAC7B,SAAK0wB,aAAL,GAAqB,IAAItB,YAAJ,CAAiBpvB,MAAjB,CAArB;AACA,SAAK0uB,MAAL,GAAc1uB,MAAM,CAACggB,QAAP,EAAd;AACA,SAAK2Q,MAAL,GAAc3wB,MAAM,CAAC4wB,QAAP,EAAd;AACA,SAAKC,QAAL,GAAgB,CAAC7wB,MAAM,CAAC8wB,cAAP,EAAjB;AACD;;;;WACD,qBACEnE,IADF,EAEEl6B,GAFF,EAGEk8B,QAHF,EAIEC,YAJF,EAKEb,MALF,EAMEc,oBANF,EAMqD;AAEnD,UAAI,CAAC,KAAK6B,aAAL,CAAmBd,OAAnB,CAA2B,IAAI1P,SAAJ,CAAcztB,GAAd,EAAmBk8B,QAAnB,CAA3B,CAAL,EAA+D;AAC7DA,gBAAQ,GAAGvF,YAAY,CAACzH,UAAxB;AACD;;AACD,UAAIgL,IAAI,CAACpD,iBAAL,CAAuB92B,GAAvB,EAA4B+yB,MAA5B,CAAmCmJ,QAAnC,CAAJ,EAAkD;;AAEhD,eAAOhC,IAAP;AACD,OAHD,MAGO,IAAIA,IAAI,CAACoE,WAAL,KAAqB,KAAKJ,MAA9B,EAAsC;AAC3C,eAAO,KAAKD,aAAL,CACJM,gBADI,GAEJpM,WAFI,CAGH+H,IAHG,EAIHl6B,GAJG,EAKHk8B,QALG,EAMHC,YANG,EAOHb,MAPG,EAQHc,oBARG,CAAP;AAUD,OAXM,MAWA;AACL,eAAO,KAAKoC,qBAAL,CACLtE,IADK,EAELl6B,GAFK,EAGLk8B,QAHK,EAILZ,MAJK,EAKLc,oBALK,CAAP;AAOD;AACF;;;WACD,wBACEN,OADF,EAEEY,OAFF,EAGEN,oBAHF,EAGqD;AAEnD,UAAIgB,QAAJ;;AACA,UAAIV,OAAO,CAACpL,UAAR,MAAwBoL,OAAO,CAACxQ,OAAR,EAA5B,EAA+C;;AAE7CkR,gBAAQ,GAAGzG,YAAY,CAACzH,UAAb,CAAwBuN,SAAxB,CAAkC,KAAKR,MAAvC,CAAX;AACD,OAHD,MAGO;AACL,YACE,KAAKiC,MAAL,GAAc,CAAd,GAAkBxB,OAAO,CAAC4B,WAAR,EAAlB,IACA5B,OAAO,CAACL,SAAR,CAAkB,KAAKJ,MAAvB,CAFF,EAGE;;AAEAmB,kBAAQ,GAAGzG,YAAY,CAACzH,UAAb,CAAwBuN,SAAxB,CAAkC,KAAKR,MAAvC,CAAX,CAFA;;AAIA,cAAI7D,QAAJ;;AACA,cAAI,KAAKgG,QAAT,EAAmB;AACjBhG,oBAAQ,GAAIsE,OAAwB,CAACpE,sBAAzB,CACV,KAAK2F,aAAL,CAAmBf,UAAnB,EADU,EAEV,KAAKjB,MAFK,CAAZ;AAID,WALD,MAKO;AACL7D,oBAAQ,GAAIsE,OAAwB,CAACzE,eAAzB,CACV,KAAKgG,aAAL,CAAmBhB,YAAnB,EADU,EAEV,KAAKhB,MAFK,CAAZ;AAID;;AACD,cAAI9M,KAAK,GAAG,CAAZ;;AACA,iBAAOiJ,QAAQ,CAACqG,OAAT,MAAsBtP,KAAK,GAAG,KAAK+O,MAA1C,EAAkD;AAChD,gBAAMlI,IAAI,GAAGoC,QAAQ,CAACnC,OAAT,EAAb;AACA,gBAAIyI,OAAO,SAAX;;AACA,gBAAI,KAAKN,QAAT,EAAmB;AACjBM,qBAAO,GACL,KAAKzC,MAAL,CAAYrO,OAAZ,CAAoB,KAAKqQ,aAAL,CAAmBhB,YAAnB,EAApB,EAAuDjH,IAAvD,KAAgE,CADlE;AAED,aAHD,MAGO;AACL0I,qBAAO,GACL,KAAKzC,MAAL,CAAYrO,OAAZ,CAAoBoI,IAApB,EAA0B,KAAKiI,aAAL,CAAmBf,UAAnB,EAA1B,KAA8D,CADhE;AAED;;AACD,gBAAIwB,OAAJ,EAAa;AACXtB,sBAAQ,GAAGA,QAAQ,CAACnL,oBAAT,CAA8B+D,IAAI,CAACv1B,IAAnC,EAAyCu1B,IAAI,CAACtI,IAA9C,CAAX;AACAyB,mBAAK;AACN,aAHD,MAGO;;AAEL;AACD;AACF;AACF,SAtCD,MAsCO;;AAELiO,kBAAQ,GAAGV,OAAO,CAACD,SAAR,CAAkB,KAAKR,MAAvB,CAAX,CAFK;;AAILmB,kBAAQ,GAAGA,QAAQ,CAACpL,cAAT,CACT2E,YAAY,CAACzH,UADJ,CAAX;AAGA,cAAIiJ,SAAJ;AACA,cAAIK,OAAJ;AACA,cAAI1V,GAAJ;;AACA,cAAIsV,UAAJ;;AACA,cAAI,KAAKgG,QAAT,EAAmB;AACjBhG,sBAAQ,GAAGgF,QAAQ,CAACuB,kBAAT,CAA4B,KAAK1C,MAAjC,CAAX;AACA9D,qBAAS,GAAG,KAAK8F,aAAL,CAAmBf,UAAnB,EAAZ;AACA1E,mBAAO,GAAG,KAAKyF,aAAL,CAAmBhB,YAAnB,EAAV;AACA,gBAAM2B,YAAY,GAAG,KAAK3C,MAAL,CAAY7F,UAAZ,EAArB;;AACAtT,eAAG,GAAG,aAACpd,CAAD,EAAeC,CAAf;AAAA,qBAAgCi5B,YAAY,CAACj5B,CAAD,EAAID,CAAJ,CAA5C;AAAA,aAAN;AACD,WAND,MAMO;AACL0yB,sBAAQ,GAAGgF,QAAQ,CAACtH,WAAT,CAAqB,KAAKmG,MAA1B,CAAX;AACA9D,qBAAS,GAAG,KAAK8F,aAAL,CAAmBhB,YAAnB,EAAZ;AACAzE,mBAAO,GAAG,KAAKyF,aAAL,CAAmBf,UAAnB,EAAV;AACApa,eAAG,GAAG,KAAKmZ,MAAL,CAAY7F,UAAZ,EAAN;AACD;;AAED,cAAIjH,MAAK,GAAG,CAAZ;AACA,cAAI0P,cAAc,GAAG,KAArB;;AACA,iBAAOzG,UAAQ,CAACqG,OAAT,EAAP,EAA2B;AACzB,gBAAMzI,KAAI,GAAGoC,UAAQ,CAACnC,OAAT,EAAb;;AACA,gBAAI,CAAC4I,cAAD,IAAmB/b,GAAG,CAACqV,SAAD,EAAYnC,KAAZ,CAAH,IAAwB,CAA/C,EAAkD;;AAEhD6I,4BAAc,GAAG,IAAjB;AACD;;AACD,gBAAMH,QAAO,GACXG,cAAc,IAAI1P,MAAK,GAAG,KAAK+O,MAA/B,IAAyCpb,GAAG,CAACkT,KAAD,EAAOwC,OAAP,CAAH,IAAsB,CADjE;;AAEA,gBAAIkG,QAAJ,EAAa;AACXvP,oBAAK;AACN,aAFD,MAEO;AACLiO,sBAAQ,GAAGA,QAAQ,CAACnL,oBAAT,CACT+D,KAAI,CAACv1B,IADI,EAETk2B,YAAY,CAACzH,UAFJ,CAAX;AAID;AACF;AACF;AACF;;AACD,aAAO,KAAK+O,aAAL,CACJM,gBADI,GAEJjB,cAFI,CAEWxB,OAFX,EAEoBsB,QAFpB,EAE8BhB,oBAF9B,CAAP;AAGD;;;WACD,wBAAeN,OAAf,EAA8B3E,WAA9B,EAA+C;;AAE7C,aAAO2E,OAAP;AACD;;;WACD,wBAAY;AACV,aAAO,IAAP;AACD;;;WACD,4BAAgB;AACd,aAAO,KAAKmC,aAAL,CAAmBM,gBAAnB,EAAP;AACD;;;WACD,oBAAQ;AACN,aAAO,KAAKtC,MAAZ;AACD;;;WAEO,+BACN/B,IADM,EAEN4E,QAFM,EAGNC,SAHM,EAINzD,MAJM,EAKN0D,iBALM,EAK0C;;AAGhD,UAAIlc,GAAJ;;AACA,UAAI,KAAKsb,QAAT,EAAmB;AACjB,YAAM/K,QAAQ,GAAG,KAAK4I,MAAL,CAAY7F,UAAZ,EAAjB;;AACAtT,WAAG,GAAG,aAACpd,CAAD,EAAeC,CAAf;AAAA,iBAAgC0tB,QAAQ,CAAC1tB,CAAD,EAAID,CAAJ,CAAxC;AAAA,SAAN;AACD,OAHD,MAGO;AACLod,WAAG,GAAG,KAAKmZ,MAAL,CAAY7F,UAAZ,EAAN;AACD;;AACD,UAAM6I,aAAa,GAAG/E,IAAtB;AACAj3B,YAAM,CAACg8B,aAAa,CAACX,WAAd,OAAgC,KAAKJ,MAAtC,EAA8C,EAA9C,CAAN;AACA,UAAMgB,iBAAiB,GAAG,IAAIzR,SAAJ,CAAcqR,QAAd,EAAwBC,SAAxB,CAA1B;AACA,UAAMI,cAAc,GAAG,KAAKf,QAAL,GACnBa,aAAa,CAACG,aAAd,CAA4B,KAAKnD,MAAjC,CADmB,GAElBgD,aAAa,CAACI,YAAd,CAA2B,KAAKpD,MAAhC,CAFL;AAGA,UAAMyC,OAAO,GAAG,KAAKT,aAAL,CAAmBd,OAAnB,CAA2B+B,iBAA3B,CAAhB;;AACA,UAAID,aAAa,CAAC1C,QAAd,CAAuBuC,QAAvB,CAAJ,EAAsC;AACpC,YAAMQ,YAAY,GAAGL,aAAa,CAACnI,iBAAd,CAAgCgI,QAAhC,CAArB;AACA,YAAIS,SAAS,GAAGjE,MAAM,CAACkE,kBAAP,CACd,KAAKvD,MADS,EAEdkD,cAFc,EAGd,KAAKf,QAHS,CAAhB;;AAKA,eACEmB,SAAS,IAAI,IAAb,KACCA,SAAS,CAAC9+B,IAAV,KAAmBq+B,QAAnB,IAA+BG,aAAa,CAAC1C,QAAd,CAAuBgD,SAAS,CAAC9+B,IAAjC,CADhC,CADF,EAGE;;;;AAIA8+B,mBAAS,GAAGjE,MAAM,CAACkE,kBAAP,CACV,KAAKvD,MADK,EAEVsD,SAFU,EAGV,KAAKnB,QAHK,CAAZ;AAKD;;AACD,YAAMqB,WAAW,GACfF,SAAS,IAAI,IAAb,GAAoB,CAApB,GAAwBzc,GAAG,CAACyc,SAAD,EAAYL,iBAAZ,CAD7B;AAEA,YAAMQ,eAAe,GACnBhB,OAAO,IAAI,CAACK,SAAS,CAAC7S,OAAV,EAAZ,IAAmCuT,WAAW,IAAI,CADpD;;AAEA,YAAIC,eAAJ,EAAqB;AACnB,cAAIV,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,6BAAiB,CAACxC,gBAAlB,CACEX,kBAAkB,CAACiD,QAAD,EAAWC,SAAX,EAAsBO,YAAtB,CADpB;AAGD;;AACD,iBAAOL,aAAa,CAAChN,oBAAd,CAAmC6M,QAAnC,EAA6CC,SAA7C,CAAP;AACD,SAPD,MAOO;AACL,cAAIC,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,6BAAiB,CAACxC,gBAAlB,CACEZ,kBAAkB,CAACkD,QAAD,EAAWQ,YAAX,CADpB;AAGD;;AACD,cAAMK,aAAa,GAAGV,aAAa,CAAChN,oBAAd,CACpB6M,QADoB,EAEpBnI,YAAY,CAACzH,UAFO,CAAtB;AAIA,cAAM0Q,gBAAgB,GACpBL,SAAS,IAAI,IAAb,IAAqB,KAAKtB,aAAL,CAAmBd,OAAnB,CAA2BoC,SAA3B,CADvB;;AAEA,cAAIK,gBAAJ,EAAsB;AACpB,gBAAIZ,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,+BAAiB,CAACxC,gBAAlB,CACEb,gBAAgB,CAAC4D,SAAS,CAAC9+B,IAAX,EAAiB8+B,SAAS,CAAC7R,IAA3B,CADlB;AAGD;;AACD,mBAAOiS,aAAa,CAAC1N,oBAAd,CACLsN,SAAS,CAAC9+B,IADL,EAEL8+B,SAAS,CAAC7R,IAFL,CAAP;AAID,WAVD,MAUO;AACL,mBAAOiS,aAAP;AACD;AACF;AACF,OAzDD,MAyDO,IAAIZ,SAAS,CAAC7S,OAAV,EAAJ,EAAyB;;AAE9B,eAAOgO,IAAP;AACD,OAHM,MAGA,IAAIwE,OAAJ,EAAa;AAClB,YAAI5b,GAAG,CAACqc,cAAD,EAAiBD,iBAAjB,CAAH,IAA0C,CAA9C,EAAiD;AAC/C,cAAIF,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,6BAAiB,CAACxC,gBAAlB,CACEZ,kBAAkB,CAACuD,cAAc,CAAC1+B,IAAhB,EAAsB0+B,cAAc,CAACzR,IAArC,CADpB;AAGAsR,6BAAiB,CAACxC,gBAAlB,CACEb,gBAAgB,CAACmD,QAAD,EAAWC,SAAX,CADlB;AAGD;;AACD,iBAAOE,aAAa,CACjBhN,oBADI,CACiB6M,QADjB,EAC2BC,SAD3B,EAEJ9M,oBAFI,CAEiBkN,cAAc,CAAC1+B,IAFhC,EAEsCk2B,YAAY,CAACzH,UAFnD,CAAP;AAGD,SAZD,MAYO;AACL,iBAAOgL,IAAP;AACD;AACF,OAhBM,MAgBA;AACL,eAAOA,IAAP;AACD;AACF;;;;;AC7SH;;;;;;;;;;;;;;;;;AA6DA;;;;;;;;;IAOa2F,W;AAAb;AAAA;;AACE,qBAAY,KAAZ;AACA,qBAAY,KAAZ;AACA,yBAAgB,KAAhB;AACA,0BAAiB,KAAjB;AACA,mBAAU,KAAV;AACA,uBAAc,KAAd;AACA,yBAAgB,KAAhB;AACA,kBAAS,CAAT;AACA,qBAAY,EAAZ;AACA,4BAAmC,IAAnC;AACA,2BAAkB,EAAlB;AACA,0BAAiC,IAAjC;AACA,yBAAgB,EAAhB;AACA,kBAAwBtM,cAAxB;AA0HD;;;;WAxHC,oBAAQ;AACN,aAAO,KAAKuM,SAAZ;AACD;;;WAED,yBAAa;AACX,aAAO,KAAKC,cAAZ;AACD;;;WAED,wBAAY;AACV,aAAO,KAAKC,aAAZ;AACD;;;;;;;WAKD,0BAAc;AACZ,UAAI,KAAKC,SAAL,KAAmB,EAAvB,EAA2B;;;;;AAKzB,eAAO,KAAKH,SAAZ;AACD,OAND,MAMO;AACL,eAAO,KAAKG,SAAL,KAAc;AAAA;AAArB;AACD;AACF;;;;;;;WAKD,8BAAkB;AAChBh9B,YAAM,CAAC,KAAK68B,SAAN,EAAiB,kCAAjB,CAAN;AACA,aAAO,KAAKI,gBAAZ;AACD;;;;;;;;WAMD,6BAAiB;AACfj9B,YAAM,CAAC,KAAK68B,SAAN,EAAiB,kCAAjB,CAAN;;AACA,UAAI,KAAKK,aAAT,EAAwB;AACtB,eAAO,KAAKC,eAAZ;AACD,OAFD,MAEO;AACL,eAAO76B,QAAP;AACD;AACF;;;WAED,kBAAM;AACJ,aAAO,KAAK86B,OAAZ;AACD;;;;;;;WAKD,4BAAgB;AACdp9B,YAAM,CAAC,KAAKo9B,OAAN,EAAe,gCAAf,CAAN;AACA,aAAO,KAAKC,cAAZ;AACD;;;;;;;;WAMD,2BAAe;AACbr9B,YAAM,CAAC,KAAKo9B,OAAN,EAAe,gCAAf,CAAN;;AACA,UAAI,KAAKE,WAAT,EAAsB;AACpB,eAAO,KAAKC,aAAZ;AACD,OAFD,MAEO;AACL,eAAOh7B,QAAP;AACD;AACF;;;WAED,oBAAQ;AACN,aAAO,KAAKi7B,SAAZ;AACD;;;;;;;WAKD,4BAAgB;AACd,aAAO,KAAKA,SAAL,IAAkB,KAAKR,SAAL,KAAmB,EAA5C;AACD;;;;;;;WAKD,oBAAQ;AACNh9B,YAAM,CAAC,KAAKw9B,SAAN,EAAiB,kCAAjB,CAAN;AACA,aAAO,KAAKvC,MAAZ;AACD;;;WAED,oBAAQ;AACN,aAAO,KAAKjC,MAAZ;AACD;;;WAED,wBAAY;AACV,aAAO,EAAE,KAAK6D,SAAL,IAAkB,KAAKO,OAAvB,IAAkC,KAAKI,SAAzC,CAAP;AACD;;;WAED,qBAAS;AACP,aAAO,KAAK/Y,YAAL,MAAuB,KAAKuU,MAAL,KAAgB1I,cAA9C;AACD;;;WAED,gBAAI;AACF,UAAM9D,IAAI,GAAG,IAAIoQ,WAAJ,EAAb;AACApQ,UAAI,CAACgR,SAAL,GAAiB,KAAKA,SAAtB;AACAhR,UAAI,CAACyO,MAAL,GAAc,KAAKA,MAAnB;AACAzO,UAAI,CAACqQ,SAAL,GAAiB,KAAKA,SAAtB;AACArQ,UAAI,CAACyQ,gBAAL,GAAwB,KAAKA,gBAA7B;AACAzQ,UAAI,CAAC0Q,aAAL,GAAqB,KAAKA,aAA1B;AACA1Q,UAAI,CAAC2Q,eAAL,GAAuB,KAAKA,eAA5B;AACA3Q,UAAI,CAAC4Q,OAAL,GAAe,KAAKA,OAApB;AACA5Q,UAAI,CAAC6Q,cAAL,GAAsB,KAAKA,cAA3B;AACA7Q,UAAI,CAAC8Q,WAAL,GAAmB,KAAKA,WAAxB;AACA9Q,UAAI,CAAC+Q,aAAL,GAAqB,KAAKA,aAA1B;AACA/Q,UAAI,CAACwM,MAAL,GAAc,KAAKA,MAAnB;AACAxM,UAAI,CAACwQ,SAAL,GAAiB,KAAKA,SAAtB;AACA,aAAOxQ,IAAP;AACD;;;;;;SAGaiR,yBAAyBC,aAAwB;AAC/D,MAAIA,WAAW,CAACjZ,YAAZ,EAAJ,EAAgC;AAC9B,WAAO,IAAIsU,aAAJ,CAAkB2E,WAAW,CAACpT,QAAZ,EAAlB,CAAP;AACD,GAFD,MAEO,IAAIoT,WAAW,CAACC,QAAZ,EAAJ,EAA4B;AACjC,WAAO,IAAI5C,aAAJ,CAAkB2C,WAAlB,CAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAIhE,YAAJ,CAAiBgE,WAAjB,CAAP;AACD;AACF;;SAaeE,wBACdF,aACAG,UAAgB;AAEhB,MAAMC,SAAS,GAAGJ,WAAW,CAAClR,IAAZ,EAAlB;AACAsR,WAAS,CAACN,SAAV,GAAsB,IAAtB;AACAM,WAAS,CAAC7C,MAAV,GAAmB4C,QAAnB;AACAC,WAAS,CAACd,SAAV,GAAmB;AAAA;AAAnB;AACA,SAAOc,SAAP;AACD;;SAEeC,uBACdL,aACAG,UAAgB;AAEhB,MAAMC,SAAS,GAAGJ,WAAW,CAAClR,IAAZ,EAAlB;AACAsR,WAAS,CAACN,SAAV,GAAsB,IAAtB;AACAM,WAAS,CAAC7C,MAAV,GAAmB4C,QAAnB;AACAC,WAAS,CAACd,SAAV,GAAmB;AAAA;AAAnB;AACA,SAAOc,SAAP;AACD;;SAEeE,mBACdN,aACAtS,YACAruB,KAAmB;AAEnB,MAAM+gC,SAAS,GAAGJ,WAAW,CAAClR,IAAZ,EAAlB;AACAsR,WAAS,CAACjB,SAAV,GAAsB,IAAtB;;AACA,MAAIzR,UAAU,KAAKtH,SAAnB,EAA8B;AAC5BsH,cAAU,GAAG,IAAb;AACD;;AACD0S,WAAS,CAACb,gBAAV,GAA6B7R,UAA7B;;AACA,MAAIruB,GAAG,IAAI,IAAX,EAAiB;AACf+gC,aAAS,CAACZ,aAAV,GAA0B,IAA1B;AACAY,aAAS,CAACX,eAAV,GAA4BpgC,GAA5B;AACD,GAHD,MAGO;AACL+gC,aAAS,CAACZ,aAAV,GAA0B,KAA1B;AACAY,aAAS,CAACX,eAAV,GAA4B,EAA5B;AACD;;AACD,SAAOW,SAAP;AACD;;SAEeG,sBACdP,aACAtS,YACAruB,KAAmB;AAEnB,MAAIuN,MAAJ;;AACA,MAAIozB,WAAW,CAAC1E,MAAZ,KAAuB1N,SAA3B,EAAsC;AACpC,QAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,gBAAU,GAAG+M,SAAS,CAAC/M,UAAD,CAAtB;AACD;;AACD9gB,UAAM,GAAG0zB,kBAAkB,CAACN,WAAD,EAActS,UAAd,EAA0BruB,GAA1B,CAA3B;AACD,GALD,MAKO;AACL,QAAI8+B,QAAJ;;AACA,QAAI9+B,GAAG,IAAI,IAAX,EAAiB;AACf8+B,cAAQ,GAAGt5B,QAAX;AACD,KAFD,MAEO;AACLs5B,cAAQ,GAAG1D,SAAS,CAACp7B,GAAD,CAApB;AACD;;AACDuN,UAAM,GAAG0zB,kBAAkB,CAACN,WAAD,EAActS,UAAd,EAA0ByQ,QAA1B,CAA3B;AACD;;AACDvxB,QAAM,CAACwyB,cAAP,GAAwB,IAAxB;AACA,SAAOxyB,MAAP;AACD;;SAEe4zB,iBACdR,aACAtS,YACAruB,KAAmB;AAEnB,MAAM+gC,SAAS,GAAGJ,WAAW,CAAClR,IAAZ,EAAlB;AACAsR,WAAS,CAACV,OAAV,GAAoB,IAApB;;AACA,MAAIhS,UAAU,KAAKtH,SAAnB,EAA8B;AAC5BsH,cAAU,GAAG,IAAb;AACD;;AACD0S,WAAS,CAACT,cAAV,GAA2BjS,UAA3B;;AACA,MAAIruB,GAAG,KAAK+mB,SAAZ,EAAuB;AACrBga,aAAS,CAACR,WAAV,GAAwB,IAAxB;AACAQ,aAAS,CAACP,aAAV,GAA0BxgC,GAA1B;AACD,GAHD,MAGO;AACL+gC,aAAS,CAACR,WAAV,GAAwB,KAAxB;AACAQ,aAAS,CAACP,aAAV,GAA0B,EAA1B;AACD;;AACD,SAAOO,SAAP;AACD;;SAEeK,qBACdT,aACAtS,YACAruB,KAAmB;AAEnB,MAAI8+B,QAAJ;AACA,MAAIvxB,MAAJ;;AACA,MAAIozB,WAAW,CAAC1E,MAAZ,KAAuB1N,SAA3B,EAAsC;AACpC,QAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,gBAAU,GAAGuJ,WAAW,CAACvJ,UAAD,CAAxB;AACD;;AACD9gB,UAAM,GAAG4zB,gBAAgB,CAACR,WAAD,EAActS,UAAd,EAA0BruB,GAA1B,CAAzB;AACD,GALD,MAKO;AACL,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf8+B,cAAQ,GAAGv5B,QAAX;AACD,KAFD,MAEO;AACLu5B,cAAQ,GAAGlH,WAAW,CAAC53B,GAAD,CAAtB;AACD;;AACDuN,UAAM,GAAG4zB,gBAAgB,CAACR,WAAD,EAActS,UAAd,EAA0ByQ,QAA1B,CAAzB;AACD;;AACDvxB,QAAM,CAACyyB,aAAP,GAAuB,IAAvB;AACA,SAAOzyB,MAAP;AACD;;SAEe8zB,mBACdV,aACA7Z,OAAY;AAEZ,MAAMia,SAAS,GAAGJ,WAAW,CAAClR,IAAZ,EAAlB;AACAsR,WAAS,CAAC9E,MAAV,GAAmBnV,KAAnB;AACA,SAAOia,SAAP;AACD;AAED;;;;;;;SAKgBO,uCACdX,aAAwB;AAExB,MAAMY,EAAE,GAAoC,EAA5C;;AAEA,MAAIZ,WAAW,CAAClZ,SAAZ,EAAJ,EAA6B;AAC3B,WAAO8Z,EAAP;AACD;;AAED,MAAIC,OAAJ;;AACA,MAAIb,WAAW,CAAC1E,MAAZ,KAAuB1I,cAA3B,EAA2C;AACzCiO,WAAO;AAAA;AAAP;AACD,GAFD,MAEO,IAAIb,WAAW,CAAC1E,MAAZ,KAAuBzB,WAA3B,EAAwC;AAC7CgH,WAAO;AAAA;AAAP;AACD,GAFM,MAEA,IAAIb,WAAW,CAAC1E,MAAZ,KAAuB1N,SAA3B,EAAsC;AAC3CiT,WAAO;AAAA;AAAP;AACD,GAFM,MAEA;AACLv+B,UAAM,CAAC09B,WAAW,CAAC1E,MAAZ,YAA8BjC,SAA/B,EAA0C,0BAA1C,CAAN;AACAwH,WAAO,GAAGb,WAAW,CAAC1E,MAAZ,CAAmBt7B,QAAnB,EAAV;AACD;;AACD4gC,IAAE;AAAA;AAAA,GAAF,GAAoClhC,SAAS,CAACmhC,OAAD,CAA7C;;AAEA,MAAIb,WAAW,CAACb,SAAhB,EAA2B;AACzByB,MAAE;AAAA;AAAA,KAAF,GAAoClhC,SAAS,CAACsgC,WAAW,CAACT,gBAAb,CAA7C;;AACA,QAAIS,WAAW,CAACR,aAAhB,EAA+B;AAC7BoB,QAAE;AAAA;AAAA,OAAF,IACE,MAAMlhC,SAAS,CAACsgC,WAAW,CAACP,eAAb,CADjB;AAED;AACF;;AAED,MAAIO,WAAW,CAACN,OAAhB,EAAyB;AACvBkB,MAAE;AAAA;AAAA,KAAF,GAAkClhC,SAAS,CAACsgC,WAAW,CAACL,cAAb,CAA3C;;AACA,QAAIK,WAAW,CAACJ,WAAhB,EAA6B;AAC3BgB,QAAE;AAAA;AAAA,OAAF,IACE,MAAMlhC,SAAS,CAACsgC,WAAW,CAACH,aAAb,CADjB;AAED;AACF;;AAED,MAAIG,WAAW,CAACF,SAAhB,EAA2B;AACzB,QAAIE,WAAW,CAACtC,cAAZ,EAAJ,EAAkC;AAChCkD,QAAE;AAAA;AAAA,OAAF,GAA0CZ,WAAW,CAACzC,MAAtD;AACD,KAFD,MAEO;AACLqD,QAAE;AAAA;AAAA,OAAF,GAAyCZ,WAAW,CAACzC,MAArD;AACD;AACF;;AAED,SAAOqD,EAAP;AACD;;SAEeE,0BACdd,aAAwB;AAExB,MAAM16B,GAAG,GAA4B,EAArC;;AACA,MAAI06B,WAAW,CAACb,SAAhB,EAA2B;AACzB75B,OAAG;AAAA;AAAA,KAAH,GACE06B,WAAW,CAACT,gBADd;;AAEA,QAAIS,WAAW,CAACR,aAAhB,EAA+B;AAC7Bl6B,SAAG;AAAA;AAAA,OAAH,GACE06B,WAAW,CAACP,eADd;AAED;AACF;;AACD,MAAIO,WAAW,CAACN,OAAhB,EAAyB;AACvBp6B,OAAG;AAAA;AAAA,KAAH,GAA+C06B,WAAW,CAACL,cAA3D;;AACA,QAAIK,WAAW,CAACJ,WAAhB,EAA6B;AAC3Bt6B,SAAG;AAAA;AAAA,OAAH,GAA8C06B,WAAW,CAACH,aAA1D;AACD;AACF;;AACD,MAAIG,WAAW,CAACF,SAAhB,EAA2B;AACzBx6B,OAAG;AAAA;AAAA,KAAH,GAAqC06B,WAAW,CAACzC,MAAjD;AACA,QAAIwD,QAAQ,GAAGf,WAAW,CAACV,SAA3B;;AACA,QAAIyB,QAAQ,KAAK,EAAjB,EAAqB;AACnB,UAAIf,WAAW,CAACtC,cAAZ,EAAJ,EAAkC;AAChCqD,gBAAQ;AAAA;AAAR;AACD,OAFD,MAEO;AACLA,gBAAQ;AAAA;AAAR;AACD;AACF;;AACDz7B,OAAG;AAAA;AAAA,KAAH,GAAyCy7B,QAAzC;AACD,GA5BuB;;;AA8BxB,MAAIf,WAAW,CAAC1E,MAAZ,KAAuB1I,cAA3B,EAA2C;AACzCttB,OAAG;AAAA;AAAA,KAAH,GAAqC06B,WAAW,CAAC1E,MAAZ,CAAmBt7B,QAAnB,EAArC;AACD;;AACD,SAAOsF,GAAP;AACF;ACrbA;;;;;;;;;;;;;;;;;AAiCA;;;;;;;IAKa07B,kB;;;;;;;;;AA8BX,8BACUtmB,SADV,EAEU0J,aAFV,EAQUG,kBARV,EASUC,sBATV,EASuD;AAAA;;AAAA;;AAErD;AAVQ;AACA;AAMA;AACA;;;AAjCF,mBAAqCxhB,UAAU,CAAC,SAAD,CAA/C;;;;;;AAMA,uBAAoC,EAApC;AA2B+C;AAGtD;;;;WAzCD,qBAAY8b,KAAZ,EAA2C;AACzC,YAAM,IAAI1b,KAAJ,CAAU,yBAAV,CAAN;AACD;;;;;AA0CD,oBACE8E,KADF,EAEEqe,aAFF,EAGEC,GAHF,EAIE7H,UAJF,EAI6C;AAAA;;AAE3C,UAAMD,UAAU,GAAGxW,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EAAnB;;AACA,WAAK0P,IAAL,CAAU,uBAAuBgP,UAAvB,GAAoC,GAApC,GAA0CxW,KAAK,CAACwe,gBAA1D,EAH2C;;AAM3C,UAAMua,QAAQ,GAAGD,kBAAkB,CAACE,YAAnB,CAAgCh5B,KAAhC,EAAuCse,GAAvC,CAAjB;AACA,UAAM2a,UAAU,GAAG,EAAnB;AACA,WAAKC,QAAL,CAAcH,QAAd,IAA0BE,UAA1B;AAEA,UAAME,qBAAqB,GAAGV,sCAAsC,CAClEz4B,KAAK,CAAC2e,YAD4D,CAApE;AAIA,WAAKya,YAAL,CACE5iB,UAAU,GAAG,OADf,EAEE2iB,qBAFF,EAGE,UAACn+B,KAAD,EAAQimB,MAAR,EAAc;AACZ,YAAIxlB,IAAI,GAAGwlB,MAAX;;AAEA,YAAIjmB,KAAK,KAAK,GAAd,EAAmB;AACjBS,cAAI,GAAG,IAAP;AACAT,eAAK,GAAG,IAAR;AACD;;AAED,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,iBAAI,CAACkhB,aAAL,CAAmB1F,UAAnB,EAA+B/a,IAA/B;AAAmC;AAAe,eAAlD,EAAyD6iB,GAAzD;AACD;;AAED,YAAIkG,OAAO,CAAC,OAAI,CAAC0U,QAAN,EAAgBH,QAAhB,CAAP,KAAqCE,UAAzC,EAAqD;AACnD,cAAI/Z,MAAJ;;AACA,cAAI,CAAClkB,KAAL,EAAY;AACVkkB,kBAAM,GAAG,IAAT;AACD,WAFD,MAEO,IAAIlkB,KAAK,KAAK,GAAd,EAAmB;AACxBkkB,kBAAM,GAAG,mBAAT;AACD,WAFM,MAEA;AACLA,kBAAM,GAAG,gBAAgBlkB,KAAzB;AACD;;AAEDyb,oBAAU,CAACyI,MAAD,EAAS,IAAT,CAAV;AACD;AACF,OA3BH;AA6BD;;;;;WAGD,kBAASlf,KAAT,EAA8Bse,GAA9B,EAAgD;AAC9C,UAAMya,QAAQ,GAAGD,kBAAkB,CAACE,YAAnB,CAAgCh5B,KAAhC,EAAuCse,GAAvC,CAAjB;AACA,aAAO,KAAK4a,QAAL,CAAcH,QAAd,CAAP;AACD;;;WAED,aAAI/4B,KAAJ,EAAuB;AAAA;;AACrB,UAAMm5B,qBAAqB,GAAGV,sCAAsC,CAClEz4B,KAAK,CAAC2e,YAD4D,CAApE;;AAIA,UAAMnI,UAAU,GAAGxW,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EAAnB;;AAEA,UAAM0lB,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AAEA,WAAK2b,YAAL,CACE5iB,UAAU,GAAG,OADf,EAEE2iB,qBAFF,EAGE,UAACn+B,KAAD,EAAQimB,MAAR,EAAc;AACZ,YAAIxlB,IAAI,GAAGwlB,MAAX;;AAEA,YAAIjmB,KAAK,KAAK,GAAd,EAAmB;AACjBS,cAAI,GAAG,IAAP;AACAT,eAAK,GAAG,IAAR;AACD;;AAED,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,iBAAI,CAACkhB,aAAL,CACE1F,UADF,EAEE/a,IAFF;;AAGe,eAHf;;cAAA;;AAMA+hB,kBAAQ,CAAC9b,OAAT,CAAiBjG,IAAjB;AACD,SARD,MAQO;AACL+hB,kBAAQ,CAAC7b,MAAT,CAAgB,IAAIzG,KAAJ,CAAUO,IAAV,CAAhB;AACD;AACF,OAtBH;AAwBA,aAAO+hB,QAAQ,CAACY,OAAhB;AACD;;;;;WAGD,0BAAiBzH,KAAjB,EAA8B;AAE7B;;;;;;;;WAMO,sBACNH,UADM,EAGoD;AAAA;;AAAA,UAD1D2iB,qBAC0D,uEADA,EACA;AAAA,UAA1D1zB,QAA0D;AAE1D0zB,2BAAqB,CAAC,QAAD,CAArB,GAAkC,QAAlC;AAEA,aAAO13B,OAAO,CAACyhB,GAAR,CAAY,CACjB,KAAK7G,kBAAL,CAAwBza,QAAxB;AAAgC;AAAmB,WAAnD,CADiB,EAEjB,KAAK0a,sBAAL,CAA4B1a,QAA5B;AAAoC;AAAmB,WAAvD,CAFiB,CAAZ,EAGJL,IAHI,CAGC,gBAA2B;AAAA;AAAA,YAAzB8F,SAAyB;AAAA,YAAdD,aAAc;;AACjC,YAAIC,SAAS,IAAIA,SAAS,CAAC1E,WAA3B,EAAwC;AACtCw2B,+BAAqB,CAAC,MAAD,CAArB,GAAgC9xB,SAAS,CAAC1E,WAA1C;AACD;;AACD,YAAIyE,aAAa,IAAIA,aAAa,CAACuP,KAAnC,EAA0C;AACxCwiB,+BAAqB,CAAC,IAAD,CAArB,GAA8B/xB,aAAa,CAACuP,KAA5C;AACD;;AAED,YAAM5J,GAAG,GACP,CAAC,OAAI,CAACyF,SAAL,CAAe/O,MAAf,GAAwB,UAAxB,GAAqC,SAAtC,IACA,OAAI,CAAC+O,SAAL,CAAehP,IADf,GAEAgT,UAFA,GAGA,GAHA,GAIA,KAJA,GAKA,OAAI,CAAChE,SAAL,CAAe9O,SALf,GAMA21B,WAAW,CAACF,qBAAD,CAPb;;AASA,eAAI,CAAC3xB,IAAL,CAAU,8BAA8BuF,GAAxC;;AACA,YAAMusB,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;AACAD,WAAG,CAAC3rB,kBAAJ,GAAyB;AACvB,cAAIlI,QAAQ,IAAI6zB,GAAG,CAACr9B,UAAJ,KAAmB,CAAnC,EAAsC;AACpC,mBAAI,CAACuL,IAAL,CACE,uBAAuBuF,GAAvB,GAA6B,oBAD/B,EAEEusB,GAAG,CAACpa,MAFN,EAGE,WAHF,EAIEoa,GAAG,CAACE,YAJN;;AAMA,gBAAIvZ,GAAG,GAAG,IAAV;;AACA,gBAAIqZ,GAAG,CAACpa,MAAJ,IAAc,GAAd,IAAqBoa,GAAG,CAACpa,MAAJ,GAAa,GAAtC,EAA2C;AACzC,kBAAI;AACFe,mBAAG,GAAGtoB,QAAQ,CAAC2hC,GAAG,CAACE,YAAL,CAAd;AACD,eAFD,CAEE,OAAOlhC,CAAP,EAAU;AACV6C,oBAAI,CACF,uCACE4R,GADF,GAEE,IAFF,GAGEusB,GAAG,CAACE,YAJJ,CAAJ;AAMD;;AACD/zB,sBAAQ,CAAC,IAAD,EAAOwa,GAAP,CAAR;AACD,aAZD,MAYO;;AAEL,kBAAIqZ,GAAG,CAACpa,MAAJ,KAAe,GAAf,IAAsBoa,GAAG,CAACpa,MAAJ,KAAe,GAAzC,EAA8C;AAC5C/jB,oBAAI,CACF,wCACE4R,GADF,GAEE,WAFF,GAGEusB,GAAG,CAACpa,MAJJ,CAAJ;AAMD;;AACDzZ,sBAAQ,CAAC6zB,GAAG,CAACpa,MAAL,CAAR;AACD;;AACDzZ,oBAAQ,GAAG,IAAX;AACD;AACF,SAnCD;;AAqCA6zB,WAAG,CAAC7tB,IAAJ,CAAS,KAAT,EAAgBsB,GAAhB;AAAmB;AAAoB,YAAvC;AACAusB,WAAG,CAAC9oB,IAAJ;AACD,OA7DM,CAAP;AA8DD;;;WAxMD,sBAAoBxQ,KAApB,EAAyCse,GAAzC,EAA4D;AAC1D,UAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AACrB,eAAO,SAASI,GAAhB;AACD,OAFD,MAEO;AACLlkB,cAAM,CACJ4F,KAAK,CAAC2e,YAAN,CAAmBC,SAAnB,EADI,EAEJ,gDAFI,CAAN;AAIA,eAAO5e,KAAK,CAACE,KAAN,CAAYpI,QAAZ,EAAP;AACD;AACF;;;;EAxBqCye,a;ACtCxC;;;;;;;;;;;;;;;;;AAqBA;;;;;IAGakjB,c;AAAb;AAAA;;AACU,qBAAkB3L,YAAY,CAACzH,UAA/B;AAST;;;;WAPC,iBAAQ7N,IAAR,EAAkB;AAChB,aAAO,KAAKkhB,SAAL,CAAexL,QAAf,CAAwB1V,IAAxB,CAAP;AACD;;;WAED,wBAAeA,IAAf,EAA2BmhB,eAA3B,EAAgD;AAC9C,WAAKD,SAAL,GAAiB,KAAKA,SAAL,CAAepQ,WAAf,CAA2B9Q,IAA3B,EAAiCmhB,eAAjC,CAAjB;AACD;;;;;ACjCH;;;;;;;;;;;;;;;;;;SA6BgBC,wBAAqB;AACnC,SAAO;AACLxiC,SAAK,EAAE,IADF;AAELw5B,YAAQ,EAAE,IAAInU,GAAJ;AAFL,GAAP;AAID;AA6BD;;;;;;;;;SAOgBod,2BACdC,oBACAthB,MACA/c,MAAU;AAEV,MAAI6d,WAAW,CAACd,IAAD,CAAf,EAAuB;AACrBshB,sBAAkB,CAAC1iC,KAAnB,GAA2BqE,IAA3B;AACAq+B,sBAAkB,CAAClJ,QAAnB,CAA4BmJ,KAA5B;AACD,GAHD,MAGO,IAAID,kBAAkB,CAAC1iC,KAAnB,KAA6B,IAAjC,EAAuC;AAC5C0iC,sBAAkB,CAAC1iC,KAAnB,GAA2B0iC,kBAAkB,CAAC1iC,KAAnB,CAAyBkyB,WAAzB,CAAqC9Q,IAArC,EAA2C/c,IAA3C,CAA3B;AACD,GAFM,MAEA;AACL,QAAMw6B,QAAQ,GAAG1d,YAAY,CAACC,IAAD,CAA7B;;AACA,QAAI,CAACshB,kBAAkB,CAAClJ,QAAnB,CAA4BlS,GAA5B,CAAgCuX,QAAhC,CAAL,EAAgD;AAC9C6D,wBAAkB,CAAClJ,QAAnB,CAA4Bl2B,GAA5B,CAAgCu7B,QAAhC,EAA0C2D,qBAAqB,EAA/D;AACD;;AAED,QAAM7e,OAAK,GAAG+e,kBAAkB,CAAClJ,QAAnB,CAA4Bh2B,GAA5B,CAAgCq7B,QAAhC,CAAd;;AACAzd,QAAI,GAAGE,YAAY,CAACF,IAAD,CAAnB;AACAqhB,8BAA0B,CAAC9e,OAAD,EAAQvC,IAAR,EAAc/c,IAAd,CAA1B;AACD;AACF;AAED;;;;;;;;SAMgBu+B,yBACdF,oBACAthB,MAAU;AAEV,MAAIc,WAAW,CAACd,IAAD,CAAf,EAAuB;AACrBshB,sBAAkB,CAAC1iC,KAAnB,GAA2B,IAA3B;AACA0iC,sBAAkB,CAAClJ,QAAnB,CAA4BmJ,KAA5B;AACA,WAAO,IAAP;AACD,GAJD,MAIO;AACL,QAAID,kBAAkB,CAAC1iC,KAAnB,KAA6B,IAAjC,EAAuC;AACrC,UAAI0iC,kBAAkB,CAAC1iC,KAAnB,CAAyBqxB,UAAzB,EAAJ,EAA2C;;AAEzC,eAAO,KAAP;AACD,OAHD,MAGO;AACL,YAAMrxB,KAAK,GAAG0iC,kBAAkB,CAAC1iC,KAAjC;AACA0iC,0BAAkB,CAAC1iC,KAAnB,GAA2B,IAA3B;AAEAA,aAAK,CAACs3B,YAAN,CAAmBhE,cAAnB,EAAmC,UAACvzB,GAAD,EAAM8iC,IAAN,EAAU;AAC3CJ,oCAA0B,CAACC,kBAAD,EAAqB,IAAI/hB,IAAJ,CAAS5gB,GAAT,CAArB,EAAoC8iC,IAApC,CAA1B;AACD,SAFD;AAIA,eAAOD,wBAAwB,CAACF,kBAAD,EAAqBthB,IAArB,CAA/B;AACD;AACF,KAdD,MAcO,IAAIshB,kBAAkB,CAAClJ,QAAnB,CAA4B3kB,IAA5B,GAAmC,CAAvC,EAA0C;AAC/C,UAAMgqB,QAAQ,GAAG1d,YAAY,CAACC,IAAD,CAA7B;AACAA,UAAI,GAAGE,YAAY,CAACF,IAAD,CAAnB;;AACA,UAAIshB,kBAAkB,CAAClJ,QAAnB,CAA4BlS,GAA5B,CAAgCuX,QAAhC,CAAJ,EAA+C;AAC7C,YAAMiE,YAAY,GAAGF,wBAAwB,CAC3CF,kBAAkB,CAAClJ,QAAnB,CAA4Bh2B,GAA5B,CAAgCq7B,QAAhC,CAD2C,EAE3Czd,IAF2C,CAA7C;;AAIA,YAAI0hB,YAAJ,EAAkB;AAChBJ,4BAAkB,CAAClJ,QAAnB,CAA4BzjB,MAA5B,CAAmC8oB,QAAnC;AACD;AACF;;AAED,aAAO6D,kBAAkB,CAAClJ,QAAnB,CAA4B3kB,IAA5B,KAAqC,CAA5C;AACD,KAdM,MAcA;AACL,aAAO,IAAP;AACD;AACF;AACF;AAED;;;;;;;;;SAOgBkuB,8BACdL,oBACAM,YACAC,MAAmC;AAEnC,MAAIP,kBAAkB,CAAC1iC,KAAnB,KAA6B,IAAjC,EAAuC;AACrCijC,QAAI,CAACD,UAAD,EAAaN,kBAAkB,CAAC1iC,KAAhC,CAAJ;AACD,GAFD,MAEO;AACLkjC,kCAA8B,CAACR,kBAAD,EAAqB,UAAC3iC,GAAD,EAAM8iC,IAAN,EAAU;AAC3D,UAAMzhB,IAAI,GAAG,IAAIT,IAAJ,CAASqiB,UAAU,CAACtiC,QAAX,KAAwB,GAAxB,GAA8BX,GAAvC,CAAb;AACAgjC,mCAA6B,CAACF,IAAD,EAAOzhB,IAAP,EAAa6hB,IAAb,CAA7B;AACD,KAH6B,CAA9B;AAID;AACF;AAED;;;;;;;;SAMgBC,+BACdR,oBACAO,MAAgD;AAEhDP,oBAAkB,CAAClJ,QAAnB,CAA4B2J,OAA5B,CAAoC,UAACN,IAAD,EAAO9iC,GAAP,EAAU;AAC5CkjC,QAAI,CAACljC,GAAD,EAAM8iC,IAAN,CAAJ;AACD,GAFD;AAGF;AChLA;;;;;;;;;;;;;;;;;AAqBA;;;;;;;IAKaO,a;AAGX,yBAAoBC,WAApB,EAAgD;AAAA;;AAA5B;AAFZ,iBAAwC,IAAxC;AAE4C;;;;WAEpD,eAAG;AACD,UAAMC,QAAQ,GAAG,KAAKD,WAAL,CAAiB7/B,GAAjB,EAAjB;AAEA,UAAM0oB,KAAK,qBAAQoX,QAAR,CAAX;;AACA,UAAI,KAAKC,KAAT,EAAgB;AACd38B,YAAI,CAAC,KAAK28B,KAAN,EAAa,UAACC,IAAD,EAAexjC,KAAf,EAA4B;AAC3CksB,eAAK,CAACsX,IAAD,CAAL,GAActX,KAAK,CAACsX,IAAD,CAAL,GAAcxjC,KAA5B;AACD,SAFG,CAAJ;AAGD;;AACD,WAAKujC,KAAL,GAAaD,QAAb;AAEA,aAAOpX,KAAP;AACD;;;;;AC3CH;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;;;AACA,IAAMuX,oBAAoB,GAAG,KAAK,IAAlC;AACA,IAAMC,oBAAoB,GAAG,KAAK,IAAlC,C,CAEA;;AACA,IAAMC,qBAAqB,GAAG,IAAI,EAAJ,GAAS,IAAvC;;IAEaC,a;AAIX,yBAAYC,UAAZ,EAAiDC,OAAjD,EAAuE;AAAA;;AAAtB;AAFjD,0BAA2C,EAA3C;AAGE,SAAKC,cAAL,GAAsB,IAAIX,aAAJ,CAAkBS,UAAlB,CAAtB;AAEA,QAAMj6B,OAAO,GACX65B,oBAAoB,GACpB,CAACC,oBAAoB,GAAGD,oBAAxB,IAAgDv+B,IAAI,CAAC+M,MAAL,EAFlD;AAGAvI,yBAAqB,CAAC,KAAKs6B,YAAL,CAAkB3gC,IAAlB,CAAuB,IAAvB,CAAD,EAA+B6B,IAAI,CAACC,KAAL,CAAWyE,OAAX,CAA/B,CAArB;AACD;;;;WAEO,wBAAY;AAAA;;AAClB,UAAM4V,KAAK,GAAG,KAAKukB,cAAL,CAAoBvgC,GAApB,EAAd;AACA,UAAMygC,aAAa,GAAiB,EAApC;AACA,UAAIC,iBAAiB,GAAG,KAAxB;AAEAt9B,UAAI,CAAC4Y,KAAD,EAAQ,UAACgkB,IAAD,EAAexjC,KAAf,EAA4B;AACtC,YAAIA,KAAK,GAAG,CAAR,IAAaa,QAAQ,CAAC,OAAI,CAACsjC,cAAN,EAAsBX,IAAtB,CAAzB,EAAsD;AACpDS,uBAAa,CAACT,IAAD,CAAb,GAAsBxjC,KAAtB;AACAkkC,2BAAiB,GAAG,IAApB;AACD;AACF,OALG,CAAJ;;AAOA,UAAIA,iBAAJ,EAAuB;AACrB,aAAKJ,OAAL,CAAa7W,WAAb,CAAyBgX,aAAzB;AACD,OAdiB;;;AAiBlBv6B,2BAAqB,CACnB,KAAKs6B,YAAL,CAAkB3gC,IAAlB,CAAuB,IAAvB,CADmB,EAEnB6B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC+M,MAAL,KAAgB,CAAhB,GAAoB0xB,qBAA/B,CAFmB,CAArB;AAID;;;;;ACpEH;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAIA,IAAYS,aAAZ;;AAAA,WAAYA,aAAZ,EAAyB;AACvBA;AACAA;AACAA;AACAA;AACD,CALD,EAAYA,aAAa,KAAbA,aAAa,MAAzB;;SA2BgBC,yBAAsB;AACpC,SAAO;AACLC,YAAQ,EAAE,IADL;AAELC,cAAU,EAAE,KAFP;AAGLpd,WAAO,EAAE,IAHJ;AAILqd,UAAM,EAAE;AAJH,GAAP;AAMD;;SAEeC,2BAAwB;AACtC,SAAO;AACLH,YAAQ,EAAE,KADL;AAELC,cAAU,EAAE,IAFP;AAGLpd,WAAO,EAAE,IAHJ;AAILqd,UAAM,EAAE;AAJH,GAAP;AAMD;;SAEeE,oCACdvd,SAAe;AAEf,SAAO;AACLmd,YAAQ,EAAE,KADL;AAELC,cAAU,EAAE,IAFP;AAGLpd,WAAO,EAAPA,OAHK;AAILqd,UAAM,EAAE;AAJH,GAAP;AAMF;AC7EA;;;;;;;;;;;;;;;;;;IA8BaG,Y;;;;AAUX;;AAC4BvjB,MAD5B;;AAE4BwjB,cAF5B;;AAG4BC,QAH5B,EAG2C;AAAA;;AAFf;AACA;AACA;;;AAX5B,gBAAOT,aAAa,CAACU,cAArB;;;AAGA,kBAAST,sBAAsB,EAA/B;AASI;;;;WACJ,2BAAkBzS,SAAlB,EAAmC;AACjC,UAAI,CAAC1P,WAAW,CAAC,KAAKd,IAAN,CAAhB,EAA6B;AAC3Bpe,cAAM,CACJme,YAAY,CAAC,KAAKC,IAAN,CAAZ,KAA4BwQ,SADxB,EAEJ,+CAFI,CAAN;AAIA,eAAO,IAAI+S,YAAJ,CACLrjB,YAAY,CAAC,KAAKF,IAAN,CADP,EAEL,KAAKwjB,YAFA,EAGL,KAAKC,MAHA,CAAP;AAKD,OAVD,MAUO,IAAI,KAAKD,YAAL,CAAkB5kC,KAAlB,IAA2B,IAA/B,EAAqC;AAC1CgD,cAAM,CACJ,KAAK4hC,YAAL,CAAkBpL,QAAlB,CAA2BvN,OAA3B,EADI,EAEJ,0DAFI,CAAN,CAD0C;;AAM1C,eAAO,IAAP;AACD,OAPM,MAOA;AACL,YAAM4I,SAAS,GAAG,KAAK+P,YAAL,CAAkBG,OAAlB,CAA0B,IAAIpkB,IAAJ,CAASiR,SAAT,CAA1B,CAAlB;AACA,eAAO,IAAI+S,YAAJ,CAAiBzjB,YAAY,EAA7B,EAAiC2T,SAAjC,EAA4C,KAAKgQ,MAAjD,CAAP;AACD;AACF;;;;;ACnEH;;;;;;;;;;;;;;;;;;IAqBaG,c;AAIX,0BAAmB3J,MAAnB,EAAmDja,IAAnD,EAA6D;AAAA;;AAA1C;AAAgC;;;AAFnD,gBAAOgjB,aAAa,CAACa,eAArB;AAEiE;;;;WAEjE,2BAAkBrT,SAAlB,EAAmC;AACjC,UAAI1P,WAAW,CAAC,KAAKd,IAAN,CAAf,EAA4B;AAC1B,eAAO,IAAI4jB,cAAJ,CAAmB,KAAK3J,MAAxB,EAAgCna,YAAY,EAA5C,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAI8jB,cAAJ,CAAmB,KAAK3J,MAAxB,EAAgC/Z,YAAY,CAAC,KAAKF,IAAN,CAA5C,CAAP;AACD;AACF;;;;;ACjCH;;;;;;;;;;;;;;;;;;IAsBa8jB,S;AAIX,qBACS7J,MADT,EAESja,IAFT,EAGS6Y,IAHT,EAGmB;AAAA;;AAFV;AACA;AACA;;;AALT,gBAAOmK,aAAa,CAACe,SAArB;AAMI;;;;WAEJ,2BAAkBvT,SAAlB,EAAmC;AACjC,UAAI1P,WAAW,CAAC,KAAKd,IAAN,CAAf,EAA4B;AAC1B,eAAO,IAAI8jB,SAAJ,CACL,KAAK7J,MADA,EAELna,YAAY,EAFP,EAGL,KAAK+Y,IAAL,CAAUpD,iBAAV,CAA4BjF,SAA5B,CAHK,CAAP;AAKD,OAND,MAMO;AACL,eAAO,IAAIsT,SAAJ,CAAc,KAAK7J,MAAnB,EAA2B/Z,YAAY,CAAC,KAAKF,IAAN,CAAvC,EAAoD,KAAK6Y,IAAzD,CAAP;AACD;AACF;;;;;AC1CH;;;;;;;;;;;;;;;;;;IAgCamL,K;AAIX;;AAC4B/J,QAD5B;;AAE4Bja,MAF5B;;AAG4BoY,UAH5B,EAGyD;AAAA;;AAF7B;AACA;AACA;;;AAL5B,gBAAO4K,aAAa,CAACiB,KAArB;AAMI;;;;WACJ,2BAAkBzT,SAAlB,EAAmC;AACjC,UAAI1P,WAAW,CAAC,KAAKd,IAAN,CAAf,EAA4B;AAC1B,YAAMyT,SAAS,GAAG,KAAK2E,QAAL,CAAcuL,OAAd,CAAsB,IAAIpkB,IAAJ,CAASiR,SAAT,CAAtB,CAAlB;;AACA,YAAIiD,SAAS,CAAC5I,OAAV,EAAJ,EAAyB;;AAEvB,iBAAO,IAAP;AACD,SAHD,MAGO,IAAI4I,SAAS,CAAC70B,KAAd,EAAqB;;AAE1B,iBAAO,IAAIklC,SAAJ,CAAc,KAAK7J,MAAnB,EAA2Bna,YAAY,EAAvC,EAA2C2T,SAAS,CAAC70B,KAArD,CAAP;AACD,SAHM,MAGA;;AAEL,iBAAO,IAAIolC,KAAJ,CAAU,KAAK/J,MAAf,EAAuBna,YAAY,EAAnC,EAAuC2T,SAAvC,CAAP;AACD;AACF,OAZD,MAYO;AACL7xB,cAAM,CACJme,YAAY,CAAC,KAAKC,IAAN,CAAZ,KAA4BwQ,SADxB,EAEJ,gEAFI,CAAN;AAIA,eAAO,IAAIwT,KAAJ,CAAU,KAAK/J,MAAf,EAAuB/Z,YAAY,CAAC,KAAKF,IAAN,CAAnC,EAAgD,KAAKoY,QAArD,CAAP;AACD;AACF;;;WACD,oBAAQ;AACN,aACE,eACA,KAAKpY,IADL,GAEA,IAFA,GAGA,KAAKia,MAAL,CAAY36B,QAAZ,EAHA,GAIA,UAJA,GAKA,KAAK84B,QAAL,CAAc94B,QAAd,EALA,GAMA,GAPF;AASD;;;;;ACxEH;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;IAMa4kC,S;AACX,qBACUC,KADV,EAEUC,iBAFV,EAGUC,SAHV,EAG4B;AAAA;;AAFlB;AACA;AACA;AACN;;;;;;;;WAKJ,8BAAkB;AAChB,aAAO,KAAKD,iBAAZ;AACD;;;;;;;WAKD,sBAAU;AACR,aAAO,KAAKC,SAAZ;AACD;;;WAED,2BAAkBrkB,IAAlB,EAA4B;AAC1B,UAAIc,WAAW,CAACd,IAAD,CAAf,EAAuB;AACrB,eAAO,KAAKskB,kBAAL,MAA6B,CAAC,KAAKD,SAA1C;AACD;;AAED,UAAM5G,QAAQ,GAAG1d,YAAY,CAACC,IAAD,CAA7B;AACA,aAAO,KAAKukB,kBAAL,CAAwB9G,QAAxB,CAAP;AACD;;;WAED,4BAAmB9+B,GAAnB,EAA8B;AAC5B,aACG,KAAK2lC,kBAAL,MAA6B,CAAC,KAAKD,SAApC,IAAkD,KAAKF,KAAL,CAAWjJ,QAAX,CAAoBv8B,GAApB,CADpD;AAGD;;;WAED,mBAAO;AACL,aAAO,KAAKwlC,KAAZ;AACD;;;;;AChEH;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;IAMaK,c,6BAGX,wBAAmBC,MAAnB,EAAuC;AAAA;;AAApB;AACjB,OAAK7J,MAAL,GAAc,KAAK6J,MAAL,CAAYte,YAAZ,CAAyB+F,QAAzB,EAAd;AACD,C;AAGH;;;;;;;;;;;SASgBwY,uCACdC,gBACAC,SACAC,YACAC,oBAAuC;AAEvC,MAAMC,MAAM,GAAY,EAAxB;AACA,MAAMC,KAAK,GAAa,EAAxB;AAEAJ,SAAO,CAAC7C,OAAR,CAAgB,gBAAM;AACpB,QACEkD,MAAM,CAACh5B,IAAP,KAAW;AAAA;AAAX,OACA04B,cAAc,CAAC/J,MAAf,CAAsBsK,mBAAtB,CACED,MAAM,CAACxK,OADT,EAEEwK,MAAM,CAAC5K,YAFT,CAFF,EAME;AACA2K,WAAK,CAAChgC,IAAN,CAAW01B,gBAAgB,CAACuK,MAAM,CAACzU,SAAR,EAAmByU,MAAM,CAAC5K,YAA1B,CAA3B;AACD;AACF,GAVD;AAYA8K,qCAAmC,CACjCR,cADiC,EAEjCI,MAFiC,EAE3B;AAAA;AAF2B,IAIjCH,OAJiC,EAKjCE,kBALiC,EAMjCD,UANiC,CAAnC;AAQAM,qCAAmC,CACjCR,cADiC,EAEjCI,MAFiC,EAE3B;AAAA;AAF2B,IAIjCH,OAJiC,EAKjCE,kBALiC,EAMjCD,UANiC,CAAnC;AAQAM,qCAAmC,CACjCR,cADiC,EAEjCI,MAFiC,EAE3B;AAAA;AAF2B,IAIjCC,KAJiC,EAKjCF,kBALiC,EAMjCD,UANiC,CAAnC;AAQAM,qCAAmC,CACjCR,cADiC,EAEjCI,MAFiC,EAE3B;AAAA;AAF2B,IAIjCH,OAJiC,EAKjCE,kBALiC,EAMjCD,UANiC,CAAnC;AAQAM,qCAAmC,CACjCR,cADiC,EAEjCI,MAFiC,EAE3B;AAAA;AAF2B,IAIjCH,OAJiC,EAKjCE,kBALiC,EAMjCD,UANiC,CAAnC;AASA,SAAOE,MAAP;AACD;AAED;;;;;AAGA,SAASI,mCAAT,CACER,cADF,EAEEI,MAFF,EAGExmB,SAHF,EAIEqmB,OAJF,EAKEQ,aALF,EAMEP,UANF,EAMkB;AAEhB,MAAMQ,eAAe,GAAGT,OAAO,CAACU,MAAR,CAAe,gBAAM;AAAA,WAAIL,MAAM,CAACh5B,IAAP,KAAgBsS,SAApB;AAAA,GAArB,CAAxB;AAEA8mB,iBAAe,CAACpgC,IAAhB,CAAqB,UAACZ,CAAD,EAAIC,CAAJ;AAAA,WACnBihC,4BAA4B,CAACZ,cAAD,EAAiBtgC,CAAjB,EAAoBC,CAApB,CADT;AAAA,GAArB;AAGA+gC,iBAAe,CAACtD,OAAhB,CAAwB,gBAAM;AAC5B,QAAMyD,kBAAkB,GAAGC,qCAAqC,CAC9Dd,cAD8D,EAE9DM,MAF8D,EAG9DJ,UAH8D,CAAhE;AAKAO,iBAAa,CAACrD,OAAd,CAAsB,sBAAY;AAChC,UAAI2D,YAAY,CAACC,UAAb,CAAwBV,MAAM,CAACh5B,IAA/B,CAAJ,EAA0C;AACxC84B,cAAM,CAAC//B,IAAP,CACE0gC,YAAY,CAACE,WAAb,CAAyBJ,kBAAzB,EAA6Cb,cAAc,CAACF,MAA5D,CADF;AAGD;AACF,KAND;AAOD,GAbD;AAcD;;AAED,SAASgB,qCAAT,CACEd,cADF,EAEEM,MAFF,EAGEJ,UAHF,EAGkB;AAEhB,MAAII,MAAM,CAACh5B,IAAP,KAAgB,OAAhB,IAA2Bg5B,MAAM,CAACh5B,IAAP,KAAgB,eAA/C,EAAgE;AAC9D,WAAOg5B,MAAP;AACD,GAFD,MAEO;AACLA,UAAM,CAACY,QAAP,GAAkBhB,UAAU,CAACiB,uBAAX,CAChBb,MAAM,CAACzU,SADS,EAEhByU,MAAM,CAAC5K,YAFS,EAGhBsK,cAAc,CAAC/J,MAHC,CAAlB;AAKA,WAAOqK,MAAP;AACD;AACF;;AAED,SAASM,4BAAT,CACEZ,cADF,EAEEtgC,CAFF,EAGEC,CAHF,EAGW;AAET,MAAID,CAAC,CAACmsB,SAAF,IAAe,IAAf,IAAuBlsB,CAAC,CAACksB,SAAF,IAAe,IAA1C,EAAgD;AAC9C,UAAMzD,cAAc,CAAC,oCAAD,CAApB;AACD;;AACD,MAAMgZ,QAAQ,GAAG,IAAI3Z,SAAJ,CAAc/nB,CAAC,CAACmsB,SAAhB,EAA2BnsB,CAAC,CAACg2B,YAA7B,CAAjB;AACA,MAAM2L,QAAQ,GAAG,IAAI5Z,SAAJ,CAAc9nB,CAAC,CAACksB,SAAhB,EAA2BlsB,CAAC,CAAC+1B,YAA7B,CAAjB;AACA,SAAOsK,cAAc,CAAC/J,MAAf,CAAsBrO,OAAtB,CAA8BwZ,QAA9B,EAAwCC,QAAxC,CAAP;AACF;AC9KA;;;;;;;;;;;;;;;;;;SA+BgBC,aACdpB,YACAqB,aAAsB;AAEtB,SAAO;AAAErB,cAAU,EAAVA,UAAF;AAAcqB,eAAW,EAAXA;AAAd,GAAP;AACD;;SAEeC,yBACdC,WACAC,WACAC,UACAvK,UAAiB;AAEjB,SAAOkK,YAAY,CACjB,IAAI/B,SAAJ,CAAcmC,SAAd,EAAyBC,QAAzB,EAAmCvK,QAAnC,CADiB,EAEjBqK,SAAS,CAACF,WAFO,CAAnB;AAID;;SAEeK,0BACdH,WACAI,YACAF,UACAvK,UAAiB;AAEjB,SAAOkK,YAAY,CACjBG,SAAS,CAACvB,UADO,EAEjB,IAAIX,SAAJ,CAAcsC,UAAd,EAA0BF,QAA1B,EAAoCvK,QAApC,CAFiB,CAAnB;AAID;;SAEe0K,8BACdL,WAAoB;AAEpB,SAAOA,SAAS,CAACvB,UAAV,CAAqBP,kBAArB,KACH8B,SAAS,CAACvB,UAAV,CAAqB6B,OAArB,EADG,GAEH,IAFJ;AAGD;;SAEeC,+BACdP,WAAoB;AAEpB,SAAOA,SAAS,CAACF,WAAV,CAAsB5B,kBAAtB,KACH8B,SAAS,CAACF,WAAV,CAAsBQ,OAAtB,EADG,GAEH,IAFJ;AAGF;AC5EA;;;;;;;;;;;;;;;;;;AA4BA,IAAIE,sBAAJ;AAEA;;;;;AAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AACpB,MAAI,CAACD,sBAAL,EAA6B;AAC3BA,0BAAsB,GAAG,IAAIhZ,SAAJ,CACvBlpB,aADuB,CAAzB;AAGD;;AACD,SAAOkiC,sBAAP;AACD,CAPD;AASA;;;;;IAGaE,a;AASX,yBACkBloC,KADlB,EAKqB;AAAA,QAHHw5B,QAGG,uEAAfyO,aAAa,EAAE;;AAAA;;AAJH;AACA;AAId;;;;;;;;AAKJ,uBAAO;AACL,aAAO,KAAKjoC,KAAL,KAAe,IAAf,IAAuB,KAAKw5B,QAAL,CAAcvN,OAAd,EAA9B;AACD;;;;;;;;;;;;;;WAYD,0CACEkc,YADF,EAEEC,SAFF,EAE8B;AAE5B,UAAI,KAAKpoC,KAAL,IAAc,IAAd,IAAsBooC,SAAS,CAAC,KAAKpoC,KAAN,CAAnC,EAAiD;AAC/C,eAAO;AAAEohB,cAAI,EAAEF,YAAY,EAApB;AAAwBlhB,eAAK,EAAE,KAAKA;AAApC,SAAP;AACD,OAFD,MAEO;AACL,YAAIkiB,WAAW,CAACimB,YAAD,CAAf,EAA+B;AAC7B,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,cAAMlW,KAAK,GAAG9Q,YAAY,CAACgnB,YAAD,CAA1B;;AACA,cAAMxkB,OAAK,GAAG,KAAK6V,QAAL,CAAch2B,GAAd,CAAkByuB,KAAlB,CAAd;;AACA,cAAItO,OAAK,KAAK,IAAd,EAAoB;AAClB,gBAAM0kB,yBAAyB,GAC7B1kB,OAAK,CAAC2kB,gCAAN,CACEhnB,YAAY,CAAC6mB,YAAD,CADd,EAEEC,SAFF,CADF;;AAKA,gBAAIC,yBAAyB,IAAI,IAAjC,EAAuC;AACrC,kBAAME,QAAQ,GAAGxmB,SAAS,CACxB,IAAIpB,IAAJ,CAASsR,KAAT,CADwB,EAExBoW,yBAAyB,CAACjnB,IAFF,CAA1B;AAIA,qBAAO;AAAEA,oBAAI,EAAEmnB,QAAR;AAAkBvoC,qBAAK,EAAEqoC,yBAAyB,CAACroC;AAAnD,eAAP;AACD,aAND,MAMO;AACL,qBAAO,IAAP;AACD;AACF,WAfD,MAeO;AACL,mBAAO,IAAP;AACD;AACF;AACF;AACF;;;;;;;;WAMD,kCACEmoC,YADF,EACoB;AAElB,aAAO,KAAKG,gCAAL,CAAsCH,YAAtC,EAAoD;AAAA,eAAM,IAAN;AAAA,OAApD,CAAP;AACD;;;;;;;WAKD,iBAAQA,YAAR,EAA0B;AACxB,UAAIjmB,WAAW,CAACimB,YAAD,CAAf,EAA+B;AAC7B,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAMlW,KAAK,GAAG9Q,YAAY,CAACgnB,YAAD,CAA1B;AACA,YAAMtT,SAAS,GAAG,KAAK2E,QAAL,CAAch2B,GAAd,CAAkByuB,KAAlB,CAAlB;;AACA,YAAI4C,SAAS,KAAK,IAAlB,EAAwB;AACtB,iBAAOA,SAAS,CAACkQ,OAAV,CAAkBzjB,YAAY,CAAC6mB,YAAD,CAA9B,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAID,aAAJ,CAAqB,IAArB,CAAP;AACD;AACF;AACF;;;;;;;;;;;WASD,aAAIC,YAAJ,EAAwBK,KAAxB,EAAuC;AACrC,UAAItmB,WAAW,CAACimB,YAAD,CAAf,EAA+B;AAC7B,eAAO,IAAID,aAAJ,CAAkBM,KAAlB,EAAyB,KAAKhP,QAA9B,CAAP;AACD,OAFD,MAEO;AACL,YAAMvH,KAAK,GAAG9Q,YAAY,CAACgnB,YAAD,CAA1B;;AACA,YAAMxkB,OAAK,GAAG,KAAK6V,QAAL,CAAch2B,GAAd,CAAkByuB,KAAlB,KAA4B,IAAIiW,aAAJ,CAAqB,IAArB,CAA1C;;AACA,YAAMjM,QAAQ,GAAGtY,OAAK,CAACrgB,GAAN,CAAUge,YAAY,CAAC6mB,YAAD,CAAtB,EAAsCK,KAAtC,CAAjB;;AACA,YAAM/R,WAAW,GAAG,KAAK+C,QAAL,CAAc/J,MAAd,CAAqBwC,KAArB,EAA4BgK,QAA5B,CAApB;AACA,eAAO,IAAIiM,aAAJ,CAAkB,KAAKloC,KAAvB,EAA8By2B,WAA9B,CAAP;AACD;AACF;;;;;;;;;;WAQD,gBAAO0R,YAAP,EAAyB;AACvB,UAAIjmB,WAAW,CAACimB,YAAD,CAAf,EAA+B;AAC7B,YAAI,KAAK3O,QAAL,CAAcvN,OAAd,EAAJ,EAA6B;AAC3B,iBAAO,IAAIic,aAAJ,CAAqB,IAArB,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAIA,aAAJ,CAAkB,IAAlB,EAAwB,KAAK1O,QAA7B,CAAP;AACD;AACF,OAND,MAMO;AACL,YAAMvH,KAAK,GAAG9Q,YAAY,CAACgnB,YAAD,CAA1B;;AACA,YAAMxkB,OAAK,GAAG,KAAK6V,QAAL,CAAch2B,GAAd,CAAkByuB,KAAlB,CAAd;;AACA,YAAItO,OAAJ,EAAW;AACT,cAAMsY,QAAQ,GAAGtY,OAAK,CAACpgB,MAAN,CAAa+d,YAAY,CAAC6mB,YAAD,CAAzB,CAAjB;;AACA,cAAI1R,WAAJ;;AACA,cAAIwF,QAAQ,CAAChQ,OAAT,EAAJ,EAAwB;AACtBwK,uBAAW,GAAG,KAAK+C,QAAL,CAAcj2B,MAAd,CAAqB0uB,KAArB,CAAd;AACD,WAFD,MAEO;AACLwE,uBAAW,GAAG,KAAK+C,QAAL,CAAc/J,MAAd,CAAqBwC,KAArB,EAA4BgK,QAA5B,CAAd;AACD;;AACD,cAAI,KAAKj8B,KAAL,KAAe,IAAf,IAAuBy2B,WAAW,CAACxK,OAAZ,EAA3B,EAAkD;AAChD,mBAAO,IAAIic,aAAJ,CAAqB,IAArB,CAAP;AACD,WAFD,MAEO;AACL,mBAAO,IAAIA,aAAJ,CAAkB,KAAKloC,KAAvB,EAA8By2B,WAA9B,CAAP;AACD;AACF,SAbD,MAaO;AACL,iBAAO,IAAP;AACD;AACF;AACF;;;;;;;;;;WAQD,aAAI0R,YAAJ,EAAsB;AACpB,UAAIjmB,WAAW,CAACimB,YAAD,CAAf,EAA+B;AAC7B,eAAO,KAAKnoC,KAAZ;AACD,OAFD,MAEO;AACL,YAAMiyB,KAAK,GAAG9Q,YAAY,CAACgnB,YAAD,CAA1B;;AACA,YAAMxkB,OAAK,GAAG,KAAK6V,QAAL,CAAch2B,GAAd,CAAkByuB,KAAlB,CAAd;;AACA,YAAItO,OAAJ,EAAW;AACT,iBAAOA,OAAK,CAACngB,GAAN,CAAU8d,YAAY,CAAC6mB,YAAD,CAAtB,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF;;;;;;;;;;;WASD,iBAAQA,YAAR,EAA4BM,OAA5B,EAAqD;AACnD,UAAIvmB,WAAW,CAACimB,YAAD,CAAf,EAA+B;AAC7B,eAAOM,OAAP;AACD,OAFD,MAEO;AACL,YAAMxW,KAAK,GAAG9Q,YAAY,CAACgnB,YAAD,CAA1B;;AACA,YAAMxkB,OAAK,GAAG,KAAK6V,QAAL,CAAch2B,GAAd,CAAkByuB,KAAlB,KAA4B,IAAIiW,aAAJ,CAAqB,IAArB,CAA1C;;AACA,YAAMjM,QAAQ,GAAGtY,OAAK,CAAC+kB,OAAN,CAAcpnB,YAAY,CAAC6mB,YAAD,CAA1B,EAA0CM,OAA1C,CAAjB;;AACA,YAAIhS,WAAJ;;AACA,YAAIwF,QAAQ,CAAChQ,OAAT,EAAJ,EAAwB;AACtBwK,qBAAW,GAAG,KAAK+C,QAAL,CAAcj2B,MAAd,CAAqB0uB,KAArB,CAAd;AACD,SAFD,MAEO;AACLwE,qBAAW,GAAG,KAAK+C,QAAL,CAAc/J,MAAd,CAAqBwC,KAArB,EAA4BgK,QAA5B,CAAd;AACD;;AACD,eAAO,IAAIiM,aAAJ,CAAkB,KAAKloC,KAAvB,EAA8By2B,WAA9B,CAAP;AACD;AACF;;;;;;;;;WAOD,cAAQ/xB,EAAR,EAAqE;AACnE,aAAO,KAAKikC,KAAL,CAAWznB,YAAY,EAAvB,EAA2Bxc,EAA3B,CAAP;AACD;;;;;;;WAKO,eACNkkC,SADM,EAENlkC,EAFM,EAE8D;AAEpE,UAAMmkC,KAAK,GAAuB,EAAlC;AACA,WAAKrP,QAAL,CAAcrK,gBAAd,CACE,UAAC0P,QAAD,EAAmBhK,SAAnB,EAA8C;AAC5CgU,aAAK,CAAChK,QAAD,CAAL,GAAkBhK,SAAS,CAAC8T,KAAV,CAAgB5mB,SAAS,CAAC6mB,SAAD,EAAY/J,QAAZ,CAAzB,EAAgDn6B,EAAhD,CAAlB;AACD,OAHH;AAKA,aAAOA,EAAE,CAACkkC,SAAD,EAAY,KAAK5oC,KAAjB,EAAwB6oC,KAAxB,CAAT;AACD;;;;;;;WAKD,oBAAcznB,IAAd,EAA0Bha,CAA1B,EAA+D;AAC7D,aAAO,KAAK0hC,WAAL,CAAiB1nB,IAAjB,EAAuBF,YAAY,EAAnC,EAAuC9Z,CAAvC,CAAP;AACD;;;WAEO,qBACN2hC,YADM,EAENH,SAFM,EAGNxhC,CAHM,EAG+B;AAErC,UAAMyiB,MAAM,GAAG,KAAK7pB,KAAL,GAAaoH,CAAC,CAACwhC,SAAD,EAAY,KAAK5oC,KAAjB,CAAd,GAAwC,KAAvD;;AACA,UAAI6pB,MAAJ,EAAY;AACV,eAAOA,MAAP;AACD,OAFD,MAEO;AACL,YAAI3H,WAAW,CAAC6mB,YAAD,CAAf,EAA+B;AAC7B,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,cAAM9W,KAAK,GAAG9Q,YAAY,CAAC4nB,YAAD,CAA1B;AACA,cAAMzJ,SAAS,GAAG,KAAK9F,QAAL,CAAch2B,GAAd,CAAkByuB,KAAlB,CAAlB;;AACA,cAAIqN,SAAJ,EAAe;AACb,mBAAOA,SAAS,CAACwJ,WAAV,CACLxnB,YAAY,CAACynB,YAAD,CADP,EAELhnB,SAAS,CAAC6mB,SAAD,EAAY3W,KAAZ,CAFJ,EAGL7qB,CAHK,CAAP;AAKD,WAND,MAMO;AACL,mBAAO,IAAP;AACD;AACF;AACF;AACF;;;WAED,uBACEga,IADF,EAEEha,CAFF,EAEmC;AAEjC,aAAO,KAAK4hC,cAAL,CAAoB5nB,IAApB,EAA0BF,YAAY,EAAtC,EAA0C9Z,CAA1C,CAAP;AACD;;;WAEO,wBACN2hC,YADM,EAENE,mBAFM,EAGN7hC,CAHM,EAG2B;AAEjC,UAAI8a,WAAW,CAAC6mB,YAAD,CAAf,EAA+B;AAC7B,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAI,KAAK/oC,KAAT,EAAgB;AACdoH,WAAC,CAAC6hC,mBAAD,EAAsB,KAAKjpC,KAA3B,CAAD;AACD;;AACD,YAAMiyB,KAAK,GAAG9Q,YAAY,CAAC4nB,YAAD,CAA1B;AACA,YAAMzJ,SAAS,GAAG,KAAK9F,QAAL,CAAch2B,GAAd,CAAkByuB,KAAlB,CAAlB;;AACA,YAAIqN,SAAJ,EAAe;AACb,iBAAOA,SAAS,CAAC0J,cAAV,CACL1nB,YAAY,CAACynB,YAAD,CADP,EAELhnB,SAAS,CAACknB,mBAAD,EAAsBhX,KAAtB,CAFJ,EAGL7qB,CAHK,CAAP;AAKD,SAND,MAMO;AACL,iBAAO,IAAI8gC,aAAJ,CAAqB,IAArB,CAAP;AACD;AACF;AACF;;;;;;;;;;WAQD,iBAAQ9gC,CAAR,EAAyC;AACvC,WAAK8hC,QAAL,CAAchoB,YAAY,EAA1B,EAA8B9Z,CAA9B;AACD;;;WAEO,kBACN6hC,mBADM,EAEN7hC,CAFM,EAE2B;AAEjC,WAAKoyB,QAAL,CAAcrK,gBAAd,CAA+B,UAACyC,SAAD,EAAYiD,SAAZ,EAAqB;AAClDA,iBAAS,CAACqU,QAAV,CAAmBnnB,SAAS,CAACknB,mBAAD,EAAsBrX,SAAtB,CAA5B,EAA8DxqB,CAA9D;AACD,OAFD;;AAGA,UAAI,KAAKpH,KAAT,EAAgB;AACdoH,SAAC,CAAC6hC,mBAAD,EAAsB,KAAKjpC,KAA3B,CAAD;AACD;AACF;;;WAED,sBAAaoH,CAAb,EAAgD;AAC9C,WAAKoyB,QAAL,CAAcrK,gBAAd,CACE,UAACyC,SAAD,EAAoBiD,SAApB,EAA+C;AAC7C,YAAIA,SAAS,CAAC70B,KAAd,EAAqB;AACnBoH,WAAC,CAACwqB,SAAD,EAAYiD,SAAS,CAAC70B,KAAtB,CAAD;AACD;AACF,OALH;AAOD;;;WAzTD,oBAAqBgG,GAArB,EAA4C;AAC1C,UAAI68B,IAAI,GAAqB,IAAIqF,aAAJ,CAAqB,IAArB,CAA7B;AACAthC,UAAI,CAACZ,GAAD,EAAM,UAACmjC,SAAD,EAAoBrK,SAApB,EAAgC;AACxC+D,YAAI,GAAGA,IAAI,CAACv/B,GAAL,CAAS,IAAIqd,IAAJ,CAASwoB,SAAT,CAAT,EAA8BrK,SAA9B,CAAP;AACD,OAFG,CAAJ;AAGA,aAAO+D,IAAP;AACD;;;;;ACrDH;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;IAMauG,a;AACX,yBAAmBC,UAAnB,EAAkD;AAAA;;AAA/B;AAAmC;;;;WAEtD,iBAAY;AACV,aAAO,IAAID,aAAJ,CAAkB,IAAIlB,aAAJ,CAAkB,IAAlB,CAAlB,CAAP;AACD;;;;;;SAGaoB,sBACdC,eACAnoB,MACAqM,MAAU;AAEV,MAAIvL,WAAW,CAACd,IAAD,CAAf,EAAuB;AACrB,WAAO,IAAIgoB,aAAJ,CAAkB,IAAIlB,aAAJ,CAAkBza,IAAlB,CAAlB,CAAP;AACD,GAFD,MAEO;AACL,QAAM+b,QAAQ,GAAGD,aAAa,CAACF,UAAd,CAAyBI,wBAAzB,CAAkDroB,IAAlD,CAAjB;;AACA,QAAIooB,QAAQ,IAAI,IAAhB,EAAsB;AACpB,UAAME,YAAY,GAAGF,QAAQ,CAACpoB,IAA9B;AACA,UAAIphB,KAAK,GAAGwpC,QAAQ,CAACxpC,KAArB;AACA,UAAMmoC,YAAY,GAAGhmB,eAAe,CAACunB,YAAD,EAAetoB,IAAf,CAApC;AACAphB,WAAK,GAAGA,KAAK,CAACkyB,WAAN,CAAkBiW,YAAlB,EAAgC1a,IAAhC,CAAR;AACA,aAAO,IAAI2b,aAAJ,CACLG,aAAa,CAACF,UAAd,CAAyB/lC,GAAzB,CAA6BomC,YAA7B,EAA2C1pC,KAA3C,CADK,CAAP;AAGD,KARD,MAQO;AACL,UAAM+kC,OAAO,GAAG,IAAImD,aAAJ,CAAkBza,IAAlB,CAAhB;;AACA,UAAMkc,aAAY,GAAGJ,aAAa,CAACF,UAAd,CAAyBX,OAAzB,CAAiCtnB,IAAjC,EAAuC2jB,OAAvC,CAArB;;AACA,aAAO,IAAIqE,aAAJ,CAAkBO,aAAlB,CAAP;AACD;AACF;AACF;;SAEeC,uBACdL,eACAnoB,MACAyoB,SAAiC;AAEjC,MAAIC,QAAQ,GAAGP,aAAf;AACA3iC,MAAI,CAACijC,OAAD,EAAU,UAAChL,QAAD,EAAmBpR,IAAnB,EAA6B;AACzCqc,YAAQ,GAAGR,qBAAqB,CAACQ,QAAD,EAAW/nB,SAAS,CAACX,IAAD,EAAOyd,QAAP,CAApB,EAAsCpR,IAAtC,CAAhC;AACD,GAFG,CAAJ;AAGA,SAAOqc,QAAP;AACD;AAED;;;;;;;;;;SAQgBC,yBACdR,eACAnoB,MAAU;AAEV,MAAIc,WAAW,CAACd,IAAD,CAAf,EAAuB;AACrB,WAAOgoB,aAAa,CAACY,KAAd,EAAP;AACD,GAFD,MAEO;AACL,QAAML,cAAY,GAAGJ,aAAa,CAACF,UAAd,CAAyBX,OAAzB,CACnBtnB,IADmB,EAEnB,IAAI8mB,aAAJ,CAAwB,IAAxB,CAFmB,CAArB;;AAIA,WAAO,IAAIkB,aAAJ,CAAkBO,cAAlB,CAAP;AACD;AACF;AAED;;;;;;;;;;SAQgBM,8BACdV,eACAnoB,MAAU;AAEV,SAAO8oB,4BAA4B,CAACX,aAAD,EAAgBnoB,IAAhB,CAA5B,IAAqD,IAA5D;AACD;AAED;;;;;;;;;;SAQgB8oB,6BACdX,eACAnoB,MAAU;AAEV,MAAMooB,QAAQ,GAAGD,aAAa,CAACF,UAAd,CAAyBI,wBAAzB,CAAkDroB,IAAlD,CAAjB;;AACA,MAAIooB,QAAQ,IAAI,IAAhB,EAAsB;AACpB,WAAOD,aAAa,CAACF,UAAd,CACJ7lC,GADI,CACAgmC,QAAQ,CAACpoB,IADT,EAEJ0V,QAFI,CAEK3U,eAAe,CAACqnB,QAAQ,CAACpoB,IAAV,EAAgBA,IAAhB,CAFpB,CAAP;AAGD,GAJD,MAIO;AACL,WAAO,IAAP;AACD;AACF;AAED;;;;;;;;SAMgB+oB,iCACdZ,eAA4B;AAE5B,MAAM/P,QAAQ,GAAgB,EAA9B;AACA,MAAM/L,IAAI,GAAG8b,aAAa,CAACF,UAAd,CAAyBrpC,KAAtC;;AACA,MAAIytB,IAAI,IAAI,IAAZ,EAAkB;;AAEhB,QAAI,CAACA,IAAI,CAAC4D,UAAL,EAAL,EAAwB;AACrB5D,UAAqB,CAAC6J,YAAtB,CACChE,cADD,EAEC,UAAC1B,SAAD,EAAYC,SAAZ,EAAqB;AACnB2H,gBAAQ,CAACpzB,IAAT,CAAc,IAAIonB,SAAJ,CAAcoE,SAAd,EAAyBC,SAAzB,CAAd;AACD,OAJF;AAMF;AACF,GAVD,MAUO;AACL0X,iBAAa,CAACF,UAAd,CAAyB7P,QAAzB,CAAkCrK,gBAAlC,CACE,UAACyC,SAAD,EAAYiD,SAAZ,EAAqB;AACnB,UAAIA,SAAS,CAAC70B,KAAV,IAAmB,IAAvB,EAA6B;AAC3Bw5B,gBAAQ,CAACpzB,IAAT,CAAc,IAAIonB,SAAJ,CAAcoE,SAAd,EAAyBiD,SAAS,CAAC70B,KAAnC,CAAd;AACD;AACF,KALH;AAOD;;AACD,SAAOw5B,QAAP;AACD;;SAEe4Q,gCACdb,eACAnoB,MAAU;AAEV,MAAIc,WAAW,CAACd,IAAD,CAAf,EAAuB;AACrB,WAAOmoB,aAAP;AACD,GAFD,MAEO;AACL,QAAMc,aAAa,GAAGH,4BAA4B,CAACX,aAAD,EAAgBnoB,IAAhB,CAAlD;;AACA,QAAIipB,aAAa,IAAI,IAArB,EAA2B;AACzB,aAAO,IAAIjB,aAAJ,CAAkB,IAAIlB,aAAJ,CAAkBmC,aAAlB,CAAlB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAIjB,aAAJ,CAAkBG,aAAa,CAACF,UAAd,CAAyBtE,OAAzB,CAAiC3jB,IAAjC,CAAlB,CAAP;AACD;AACF;AACF;AAED;;;;;;SAIgBkpB,qBAAqBf,eAA4B;AAC/D,SAAOA,aAAa,CAACF,UAAd,CAAyBpd,OAAzB,EAAP;AACD;AAED;;;;;;;;SAMgBse,mBACdhB,eACA9b,MAAU;AAEV,SAAO+c,iBAAiB,CAACtpB,YAAY,EAAb,EAAiBqoB,aAAa,CAACF,UAA/B,EAA2C5b,IAA3C,CAAxB;AACD;;AAED,SAAS+c,iBAAT,CACErC,YADF,EAEEsC,SAFF,EAGEhd,IAHF,EAGY;AAEV,MAAIgd,SAAS,CAACzqC,KAAV,IAAmB,IAAvB,EAA6B;;AAE3B,WAAOytB,IAAI,CAACyE,WAAL,CAAiBiW,YAAjB,EAA+BsC,SAAS,CAACzqC,KAAzC,CAAP;AACD,GAHD,MAGO;AACL,QAAI0qC,aAAa,GAAG,IAApB;AACAD,aAAS,CAACjR,QAAV,CAAmBrK,gBAAnB,CAAoC,UAAC0P,QAAD,EAAWhK,SAAX,EAAoB;AACtD,UAAIgK,QAAQ,KAAK,WAAjB,EAA8B;;;AAG5B77B,cAAM,CACJ6xB,SAAS,CAAC70B,KAAV,KAAoB,IADhB,EAEJ,2CAFI,CAAN;AAIA0qC,qBAAa,GAAG7V,SAAS,CAAC70B,KAA1B;AACD,OARD,MAQO;AACLytB,YAAI,GAAG+c,iBAAiB,CACtBzoB,SAAS,CAAComB,YAAD,EAAetJ,QAAf,CADa,EAEtBhK,SAFsB,EAGtBpH,IAHsB,CAAxB;AAKD;AACF,KAhBD,EAFK;;AAoBL,QAAI,CAACA,IAAI,CAACqJ,QAAL,CAAcqR,YAAd,EAA4Blc,OAA5B,EAAD,IAA0Cye,aAAa,KAAK,IAAhE,EAAsE;AACpEjd,UAAI,GAAGA,IAAI,CAACyE,WAAL,CACLnQ,SAAS,CAAComB,YAAD,EAAe,WAAf,CADJ,EAELuC,aAFK,CAAP;AAID;;AACD,WAAOjd,IAAP;AACD;AACH;ACzPA;;;;;;;;;;;;;;;;;AA4DA;;;;;;SAIgBkd,qBACdF,WACArpB,MAAU;AAEV,SAAOwpB,eAAe,CAACxpB,IAAD,EAAOqpB,SAAP,CAAtB;AACD;AAED;;;;;;;SAKgBI,sBACdJ,WACArpB,MACA6Y,MACA6Q,SACA1mB,SAAiB;AAEjBphB,QAAM,CACJ8nC,OAAO,GAAGL,SAAS,CAACM,WADhB,EAEJ,8CAFI,CAAN;;AAIA,MAAI3mB,OAAO,KAAK0C,SAAhB,EAA2B;AACzB1C,WAAO,GAAG,IAAV;AACD;;AACDqmB,WAAS,CAACO,SAAV,CAAoB5kC,IAApB,CAAyB;AACvBgb,QAAI,EAAJA,IADuB;AAEvB6Y,QAAI,EAAJA,IAFuB;AAGvB6Q,WAAO,EAAPA,OAHuB;AAIvB1mB,WAAO,EAAPA;AAJuB,GAAzB;;AAOA,MAAIA,OAAJ,EAAa;AACXqmB,aAAS,CAACQ,aAAV,GAA0B3B,qBAAqB,CAC7CmB,SAAS,CAACQ,aADmC,EAE7C7pB,IAF6C,EAG7C6Y,IAH6C,CAA/C;AAKD;;AACDwQ,WAAS,CAACM,WAAV,GAAwBD,OAAxB;AACD;AAED;;;;;SAGgBI,kBACdT,WACArpB,MACA+pB,iBACAL,SAAe;AAEf9nC,QAAM,CACJ8nC,OAAO,GAAGL,SAAS,CAACM,WADhB,EAEJ,8CAFI,CAAN;AAIAN,WAAS,CAACO,SAAV,CAAoB5kC,IAApB,CAAyB;AACvBgb,QAAI,EAAJA,IADuB;AAEvBoY,YAAQ,EAAE2R,eAFa;AAGvBL,WAAO,EAAPA,OAHuB;AAIvB1mB,WAAO,EAAE;AAJc,GAAzB;AAOAqmB,WAAS,CAACQ,aAAV,GAA0BrB,sBAAsB,CAC9Ca,SAAS,CAACQ,aADoC,EAE9C7pB,IAF8C,EAG9C+pB,eAH8C,CAAhD;AAKAV,WAAS,CAACM,WAAV,GAAwBD,OAAxB;AACD;;SAEeM,kBACdX,WACAK,SAAe;AAEf,OAAK,IAAIzoC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGooC,SAAS,CAACO,SAAV,CAAoB1oC,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;AACnD,QAAMgpC,MAAM,GAAGZ,SAAS,CAACO,SAAV,CAAoB3oC,CAApB,CAAf;;AACA,QAAIgpC,MAAM,CAACP,OAAP,KAAmBA,OAAvB,EAAgC;AAC9B,aAAOO,MAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;SAOgBC,qBACdb,WACAK,SAAe;;;;;AAOf,MAAMrT,GAAG,GAAGgT,SAAS,CAACO,SAAV,CAAoBO,SAApB,CAA8B,WAAC;AACzC,WAAOpkC,CAAC,CAAC2jC,OAAF,KAAcA,OAArB;AACD,GAFW,CAAZ;AAGA9nC,QAAM,CAACy0B,GAAG,IAAI,CAAR,EAAW,8CAAX,CAAN;AACA,MAAM+T,aAAa,GAAGf,SAAS,CAACO,SAAV,CAAoBvT,GAApB,CAAtB;AACAgT,WAAS,CAACO,SAAV,CAAoB9qB,MAApB,CAA2BuX,GAA3B,EAAgC,CAAhC;AAEA,MAAIgU,sBAAsB,GAAGD,aAAa,CAACpnB,OAA3C;AACA,MAAIsnB,mCAAmC,GAAG,KAA1C;AAEA,MAAIrpC,CAAC,GAAGooC,SAAS,CAACO,SAAV,CAAoB1oC,MAApB,GAA6B,CAArC;;AAEA,SAAOmpC,sBAAsB,IAAIppC,CAAC,IAAI,CAAtC,EAAyC;AACvC,QAAMspC,YAAY,GAAGlB,SAAS,CAACO,SAAV,CAAoB3oC,CAApB,CAArB;;AACA,QAAIspC,YAAY,CAACvnB,OAAjB,EAA0B;AACxB,UACE/hB,CAAC,IAAIo1B,GAAL,IACAmU,4BAA4B,CAACD,YAAD,EAAeH,aAAa,CAACpqB,IAA7B,CAF9B,EAGE;;AAEAqqB,8BAAsB,GAAG,KAAzB;AACD,OAND,MAMO,IAAIxoB,YAAY,CAACuoB,aAAa,CAACpqB,IAAf,EAAqBuqB,YAAY,CAACvqB,IAAlC,CAAhB,EAAyD;;AAE9DsqB,2CAAmC,GAAG,IAAtC;AACD;AACF;;AACDrpC,KAAC;AACF;;AAED,MAAI,CAACopC,sBAAL,EAA6B;AAC3B,WAAO,KAAP;AACD,GAFD,MAEO,IAAIC,mCAAJ,EAAyC;;AAE9CG,uBAAmB,CAACpB,SAAD,CAAnB;AACA,WAAO,IAAP;AACD,GAJM,MAIA;;AAEL,QAAIe,aAAa,CAACvR,IAAlB,EAAwB;AACtBwQ,eAAS,CAACQ,aAAV,GAA0BlB,wBAAwB,CAChDU,SAAS,CAACQ,aADsC,EAEhDO,aAAa,CAACpqB,IAFkC,CAAlD;AAID,KALD,MAKO;AACL,UAAMoY,QAAQ,GAAGgS,aAAa,CAAChS,QAA/B;AACA5yB,UAAI,CAAC4yB,QAAD,EAAW,UAAC5H,SAAD,EAAkB;AAC/B6Y,iBAAS,CAACQ,aAAV,GAA0BlB,wBAAwB,CAChDU,SAAS,CAACQ,aADsC,EAEhDlpB,SAAS,CAACypB,aAAa,CAACpqB,IAAf,EAAqBwQ,SAArB,CAFuC,CAAlD;AAID,OALG,CAAJ;AAMD;;AACD,WAAO,IAAP;AACD;AACF;;AAED,SAASga,4BAAT,CACEE,WADF,EAEE1qB,IAFF,EAEY;AAEV,MAAI0qB,WAAW,CAAC7R,IAAhB,EAAsB;AACpB,WAAOhX,YAAY,CAAC6oB,WAAW,CAAC1qB,IAAb,EAAmBA,IAAnB,CAAnB;AACD,GAFD,MAEO;AACL,SAAK,IAAMwQ,SAAX,IAAwBka,WAAW,CAACtS,QAApC,EAA8C;AAC5C,UACEsS,WAAW,CAACtS,QAAZ,CAAqB3yB,cAArB,CAAoC+qB,SAApC,KACA3O,YAAY,CAAClB,SAAS,CAAC+pB,WAAW,CAAC1qB,IAAb,EAAmBwQ,SAAnB,CAAV,EAAyCxQ,IAAzC,CAFd,EAGE;AACA,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD;AACF;AAED;;;;;AAGA,SAASyqB,mBAAT,CAA6BpB,SAA7B,EAAiD;AAC/CA,WAAS,CAACQ,aAAV,GAA0Bc,mBAAmB,CAC3CtB,SAAS,CAACO,SADiC,EAE3CgB,uBAF2C,EAG3C9qB,YAAY,EAH+B,CAA7C;;AAKA,MAAIupB,SAAS,CAACO,SAAV,CAAoB1oC,MAApB,GAA6B,CAAjC,EAAoC;AAClCmoC,aAAS,CAACM,WAAV,GACEN,SAAS,CAACO,SAAV,CAAoBP,SAAS,CAACO,SAAV,CAAoB1oC,MAApB,GAA6B,CAAjD,EAAoDwoC,OADtD;AAED,GAHD,MAGO;AACLL,aAAS,CAACM,WAAV,GAAwB,CAAC,CAAzB;AACD;AACF;AAED;;;;;AAGA,SAASiB,uBAAT,CAAiC13B,KAAjC,EAAmD;AACjD,SAAOA,KAAK,CAAC8P,OAAb;AACD;AAED;;;;;;AAIA,SAAS2nB,mBAAT,CACEE,MADF,EAEEvF,MAFF,EAGEwF,QAHF,EAGgB;AAEd,MAAI3C,aAAa,GAAGH,aAAa,CAACY,KAAd,EAApB;;AACA,OAAK,IAAI3nC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4pC,MAAM,CAAC3pC,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtC,QAAMiS,KAAK,GAAG23B,MAAM,CAAC5pC,CAAD,CAApB,CADsC;;;;AAKtC,QAAIqkC,MAAM,CAACpyB,KAAD,CAAV,EAAmB;AACjB,UAAM63B,SAAS,GAAG73B,KAAK,CAAC8M,IAAxB;AACA,UAAI+mB,YAAkB,SAAtB;;AACA,UAAI7zB,KAAK,CAAC2lB,IAAV,EAAgB;AACd,YAAIhX,YAAY,CAACipB,QAAD,EAAWC,SAAX,CAAhB,EAAuC;AACrChE,sBAAY,GAAGhmB,eAAe,CAAC+pB,QAAD,EAAWC,SAAX,CAA9B;AACA5C,uBAAa,GAAGD,qBAAqB,CACnCC,aADmC,EAEnCpB,YAFmC,EAGnC7zB,KAAK,CAAC2lB,IAH6B,CAArC;AAKD,SAPD,MAOO,IAAIhX,YAAY,CAACkpB,SAAD,EAAYD,QAAZ,CAAhB,EAAuC;AAC5C/D,sBAAY,GAAGhmB,eAAe,CAACgqB,SAAD,EAAYD,QAAZ,CAA9B;AACA3C,uBAAa,GAAGD,qBAAqB,CACnCC,aADmC,EAEnCroB,YAAY,EAFuB,EAGnC5M,KAAK,CAAC2lB,IAAN,CAAWnD,QAAX,CAAoBqR,YAApB,CAHmC,CAArC;AAKD,SAPM,MAOA;AAGR,OAlBD,MAkBO,IAAI7zB,KAAK,CAACklB,QAAV,EAAoB;AACzB,YAAIvW,YAAY,CAACipB,QAAD,EAAWC,SAAX,CAAhB,EAAuC;AACrChE,sBAAY,GAAGhmB,eAAe,CAAC+pB,QAAD,EAAWC,SAAX,CAA9B;AACA5C,uBAAa,GAAGK,sBAAsB,CACpCL,aADoC,EAEpCpB,YAFoC,EAGpC7zB,KAAK,CAACklB,QAH8B,CAAtC;AAKD,SAPD,MAOO,IAAIvW,YAAY,CAACkpB,SAAD,EAAYD,QAAZ,CAAhB,EAAuC;AAC5C/D,sBAAY,GAAGhmB,eAAe,CAACgqB,SAAD,EAAYD,QAAZ,CAA9B;;AACA,cAAIhqB,WAAW,CAACimB,YAAD,CAAf,EAA+B;AAC7BoB,yBAAa,GAAGK,sBAAsB,CACpCL,aADoC,EAEpCroB,YAAY,EAFwB,EAGpC5M,KAAK,CAACklB,QAH8B,CAAtC;AAKD,WAND,MAMO;AACL,gBAAM7V,OAAK,GAAGyJ,OAAO,CAAC9Y,KAAK,CAACklB,QAAP,EAAiBrY,YAAY,CAACgnB,YAAD,CAA7B,CAArB;;AACA,gBAAIxkB,OAAJ,EAAW;;AAET,kBAAMyoB,QAAQ,GAAGzoB,OAAK,CAACmT,QAAN,CAAexV,YAAY,CAAC6mB,YAAD,CAA3B,CAAjB;;AACAoB,2BAAa,GAAGD,qBAAqB,CACnCC,aADmC,EAEnCroB,YAAY,EAFuB,EAGnCkrB,QAHmC,CAArC;AAKD;AACF;AACF,SApBM,MAoBA;AAGR,OA/BM,MA+BA;AACL,cAAMje,cAAc,CAAC,4CAAD,CAApB;AACD;AACF;AACF;;AACD,SAAOob,aAAP;AACD;AAcD;;;;;;;;;SAOgB8C,gCACd5B,WACA6B,UACAC,qBACAC,mBACAC,qBAA6B;AAE7B,MAAI,CAACD,iBAAD,IAAsB,CAACC,mBAA3B,EAAgD;AAC9C,QAAMpC,aAAa,GAAGH,4BAA4B,CAChDO,SAAS,CAACQ,aADsC,EAEhDqB,QAFgD,CAAlD;;AAIA,QAAIjC,aAAa,IAAI,IAArB,EAA2B;AACzB,aAAOA,aAAP;AACD,KAFD,MAEO;AACL,UAAMqC,QAAQ,GAAGtC,+BAA+B,CAC9CK,SAAS,CAACQ,aADoC,EAE9CqB,QAF8C,CAAhD;;AAIA,UAAIhC,oBAAoB,CAACoC,QAAD,CAAxB,EAAoC;AAClC,eAAOH,mBAAP;AACD,OAFD,MAEO,IACLA,mBAAmB,IAAI,IAAvB,IACA,CAACtC,6BAA6B,CAACyC,QAAD,EAAWxrB,YAAY,EAAvB,CAFzB,EAGL;;AAEA,eAAO,IAAP;AACD,OANM,MAMA;AACL,YAAMyrB,YAAY,GAAGJ,mBAAmB,IAAI7V,YAAY,CAACzH,UAAzD;AACA,eAAOsb,kBAAkB,CAACmC,QAAD,EAAWC,YAAX,CAAzB;AACD;AACF;AACF,GAzBD,MAyBO;AACL,QAAMC,KAAK,GAAGxC,+BAA+B,CAC3CK,SAAS,CAACQ,aADiC,EAE3CqB,QAF2C,CAA7C;;AAIA,QAAI,CAACG,mBAAD,IAAwBnC,oBAAoB,CAACsC,KAAD,CAAhD,EAAyD;AACvD,aAAOL,mBAAP;AACD,KAFD,MAEO;;AAEL,UACE,CAACE,mBAAD,IACAF,mBAAmB,IAAI,IADvB,IAEA,CAACtC,6BAA6B,CAAC2C,KAAD,EAAQ1rB,YAAY,EAApB,CAHhC,EAIE;AACA,eAAO,IAAP;AACD,OAND,MAMO;AACL,YAAMwlB,MAAM,GAAG,SAATA,MAAS,CAAUpyB,KAAV,EAA4B;AACzC,iBACE,CAACA,KAAK,CAAC8P,OAAN,IAAiBqoB,mBAAlB,MACC,CAACD,iBAAD,IACC,CAAC,CAACA,iBAAiB,CAACroC,OAAlB,CAA0BmQ,KAAK,CAACw2B,OAAhC,CAFJ,MAGC7nB,YAAY,CAAC3O,KAAK,CAAC8M,IAAP,EAAakrB,QAAb,CAAZ,IACCrpB,YAAY,CAACqpB,QAAD,EAAWh4B,KAAK,CAAC8M,IAAjB,CAJd,CADF;AAOD,SARD;;AASA,YAAMyrB,WAAW,GAAGd,mBAAmB,CACrCtB,SAAS,CAACO,SAD2B,EAErCtE,MAFqC,EAGrC4F,QAHqC,CAAvC;;AAKA,YAAMK,aAAY,GAAGJ,mBAAmB,IAAI7V,YAAY,CAACzH,UAAzD;;AACA,eAAOsb,kBAAkB,CAACsC,WAAD,EAAcF,aAAd,CAAzB;AACD;AACF;AACF;AACF;AAED;;;;;;SAIgBG,mCACdrC,WACA6B,UACAS,wBAA2C;AAE3C,MAAIC,gBAAgB,GAAGtW,YAAY,CAACzH,UAApC;AACA,MAAMge,WAAW,GAAG/C,4BAA4B,CAC9CO,SAAS,CAACQ,aADoC,EAE9CqB,QAF8C,CAAhD;;AAIA,MAAIW,WAAJ,EAAiB;AACf,QAAI,CAACA,WAAW,CAAC5b,UAAZ,EAAL,EAA+B;;AAE7B4b,iBAAW,CAAC3V,YAAZ,CAAyBhE,cAAzB,EAAyC,UAAC1B,SAAD,EAAYkN,SAAZ,EAAqB;AAC5DkO,wBAAgB,GAAGA,gBAAgB,CAAChb,oBAAjB,CACjBJ,SADiB,EAEjBkN,SAFiB,CAAnB;AAID,OALD;AAMD;;AACD,WAAOkO,gBAAP;AACD,GAXD,MAWO,IAAID,sBAAJ,EAA4B;;;AAGjC,QAAMH,KAAK,GAAGxC,+BAA+B,CAC3CK,SAAS,CAACQ,aADiC,EAE3CqB,QAF2C,CAA7C;AAIAS,0BAAsB,CAACzV,YAAvB,CACEhE,cADF,EAEE,UAAC1B,SAAD,EAAYC,SAAZ,EAAqB;AACnB,UAAMpE,IAAI,GAAG8c,kBAAkB,CAC7BH,+BAA+B,CAACwC,KAAD,EAAQ,IAAIjsB,IAAJ,CAASiR,SAAT,CAAR,CADF,EAE7BC,SAF6B,CAA/B;AAIAmb,sBAAgB,GAAGA,gBAAgB,CAAChb,oBAAjB,CACjBJ,SADiB,EAEjBnE,IAFiB,CAAnB;AAID,KAXH,EAPiC;;AAqBjC0c,oCAAgC,CAACyC,KAAD,CAAhC,CAAwCzJ,OAAxC,CAAgD,mBAAS;AACvD6J,sBAAgB,GAAGA,gBAAgB,CAAChb,oBAAjB,CACjBsC,SAAS,CAAC9zB,IADO,EAEjB8zB,SAAS,CAAC7G,IAFO,CAAnB;AAID,KALD;AAMA,WAAOuf,gBAAP;AACD,GA5BM,MA4BA;;;AAGL,QAAMJ,MAAK,GAAGxC,+BAA+B,CAC3CK,SAAS,CAACQ,aADiC,EAE3CqB,QAF2C,CAA7C;;AAIAnC,oCAAgC,CAACyC,MAAD,CAAhC,CAAwCzJ,OAAxC,CAAgD,mBAAS;AACvD6J,sBAAgB,GAAGA,gBAAgB,CAAChb,oBAAjB,CACjBsC,SAAS,CAAC9zB,IADO,EAEjB8zB,SAAS,CAAC7G,IAFO,CAAnB;AAID,KALD;AAMA,WAAOuf,gBAAP;AACD;AACF;AAED;;;;;;;;;;;;;;;;SAcgBE,4CACdzC,WACA6B,UACAnD,WACAgE,mBACAC,oBAA+B;AAE/BpqC,QAAM,CACJmqC,iBAAiB,IAAIC,kBADjB,EAEJ,2DAFI,CAAN;AAIA,MAAMhsB,IAAI,GAAGW,SAAS,CAACuqB,QAAD,EAAWnD,SAAX,CAAtB;;AACA,MAAIc,6BAA6B,CAACQ,SAAS,CAACQ,aAAX,EAA0B7pB,IAA1B,CAAjC,EAAkE;;;AAGhE,WAAO,IAAP;AACD,GAJD,MAIO;;AAEL,QAAMisB,UAAU,GAAGjD,+BAA+B,CAChDK,SAAS,CAACQ,aADsC,EAEhD7pB,IAFgD,CAAlD;;AAIA,QAAIkpB,oBAAoB,CAAC+C,UAAD,CAAxB,EAAsC;;AAEpC,aAAOD,kBAAkB,CAACtW,QAAnB,CAA4BqS,SAA5B,CAAP;AACD,KAHD,MAGO;;;;;;;AAOL,aAAOoB,kBAAkB,CACvB8C,UADuB,EAEvBD,kBAAkB,CAACtW,QAAnB,CAA4BqS,SAA5B,CAFuB,CAAzB;AAID;AACF;AACF;AAED;;;;;;SAIgBmE,2BACd7C,WACA6B,UACAzN,UACAuO,oBAA6B;AAE7B,MAAMhsB,IAAI,GAAGW,SAAS,CAACuqB,QAAD,EAAWzN,QAAX,CAAtB;AACA,MAAMwL,aAAa,GAAGH,4BAA4B,CAChDO,SAAS,CAACQ,aADsC,EAEhD7pB,IAFgD,CAAlD;;AAIA,MAAIipB,aAAa,IAAI,IAArB,EAA2B;AACzB,WAAOA,aAAP;AACD,GAFD,MAEO;AACL,QAAI+C,kBAAkB,CAACzH,kBAAnB,CAAsC9G,QAAtC,CAAJ,EAAqD;AACnD,UAAMwO,UAAU,GAAGjD,+BAA+B,CAChDK,SAAS,CAACQ,aADsC,EAEhD7pB,IAFgD,CAAlD;AAIA,aAAOmpB,kBAAkB,CACvB8C,UADuB,EAEvBD,kBAAkB,CAACtF,OAAnB,GAA6BjR,iBAA7B,CAA+CgI,QAA/C,CAFuB,CAAzB;AAID,KATD,MASO;AACL,aAAO,IAAP;AACD;AACF;AACF;AAED;;;;;;;SAKgB0O,wBACd9C,WACArpB,MAAU;AAEV,SAAO8oB,4BAA4B,CAACO,SAAS,CAACQ,aAAX,EAA0B7pB,IAA1B,CAAnC;AACD;AAED;;;;;;SAIgBosB,0BACd/C,WACA6B,UACAmB,oBACAvV,WACAhJ,OACArnB,SACAgf,OAAY;AAEZ,MAAI6mB,SAAJ;AACA,MAAMd,KAAK,GAAGxC,+BAA+B,CAC3CK,SAAS,CAACQ,aADiC,EAE3CqB,QAF2C,CAA7C;AAIA,MAAMjC,aAAa,GAAGH,4BAA4B,CAAC0C,KAAD,EAAQ1rB,YAAY,EAApB,CAAlD;;AACA,MAAImpB,aAAa,IAAI,IAArB,EAA2B;AACzBqD,aAAS,GAAGrD,aAAZ;AACD,GAFD,MAEO,IAAIoD,kBAAkB,IAAI,IAA1B,EAAgC;AACrCC,aAAS,GAAGnD,kBAAkB,CAACqC,KAAD,EAAQa,kBAAR,CAA9B;AACD,GAFM,MAEA;;AAEL,WAAO,EAAP;AACD;;AACDC,WAAS,GAAGA,SAAS,CAAClR,SAAV,CAAoB3V,KAApB,CAAZ;;AACA,MAAI,CAAC6mB,SAAS,CAACzhB,OAAV,EAAD,IAAwB,CAACyhB,SAAS,CAACrc,UAAV,EAA7B,EAAqD;AACnD,QAAMsc,KAAK,GAAG,EAAd;AACA,QAAM9qB,GAAG,GAAGgE,KAAK,CAACsP,UAAN,EAAZ;AACA,QAAMP,IAAI,GAAG/tB,OAAO,GACf6lC,SAA0B,CAACrV,sBAA3B,CAAkDH,SAAlD,EAA6DrR,KAA7D,CADe,GAEf6mB,SAA0B,CAAC1V,eAA3B,CAA2CE,SAA3C,EAAsDrR,KAAtD,CAFL;AAGA,QAAIkP,IAAI,GAAGH,IAAI,CAACI,OAAL,EAAX;;AACA,WAAOD,IAAI,IAAI4X,KAAK,CAACrrC,MAAN,GAAe4sB,KAA9B,EAAqC;AACnC,UAAIrM,GAAG,CAACkT,IAAD,EAAOmC,SAAP,CAAH,KAAyB,CAA7B,EAAgC;AAC9ByV,aAAK,CAACvnC,IAAN,CAAW2vB,IAAX;AACD;;AACDA,UAAI,GAAGH,IAAI,CAACI,OAAL,EAAP;AACD;;AACD,WAAO2X,KAAP;AACD,GAdD,MAcO;AACL,WAAO,EAAP;AACD;AACF;;SAEehE,eAAY;AAC1B,SAAO;AACLsB,iBAAa,EAAE7B,aAAa,CAACY,KAAd,EADV;AAELgB,aAAS,EAAE,EAFN;AAGLD,eAAW,EAAE,CAAC;AAHT,GAAP;AAKD;AAwBD;;;;;;;;;;SAQgB6C,mCACdC,cACAtB,qBACAC,mBACAC,qBAA6B;AAE7B,SAAOJ,+BAA+B,CACpCwB,YAAY,CAACpD,SADuB,EAEpCoD,YAAY,CAACvB,QAFuB,EAGpCC,mBAHoC,EAIpCC,iBAJoC,EAKpCC,mBALoC,CAAtC;AAOD;AAED;;;;;;;SAKgBqB,sCACdD,cACAd,wBAA2C;AAE3C,SAAOD,kCAAkC,CACvCe,YAAY,CAACpD,SAD0B,EAEvCoD,YAAY,CAACvB,QAF0B,EAGvCS,sBAHuC,CAAzC;AAKD;AAED;;;;;;;;;;;;;;;;;;SAgBgBgB,+CACdF,cACAzsB,MACA+rB,mBACAC,oBAA+B;AAE/B,SAAOF,2CAA2C,CAChDW,YAAY,CAACpD,SADmC,EAEhDoD,YAAY,CAACvB,QAFmC,EAGhDlrB,IAHgD,EAIhD+rB,iBAJgD,EAKhDC,kBALgD,CAAlD;AAOD;AAED;;;;;;;;SAMgBY,2BACdH,cACAzsB,MAAU;AAEV,SAAOmsB,uBAAuB,CAC5BM,YAAY,CAACpD,SADe,EAE5B1oB,SAAS,CAAC8rB,YAAY,CAACvB,QAAd,EAAwBlrB,IAAxB,CAFmB,CAA9B;AAID;AAED;;;;;;SAIgB6sB,6BACdJ,cACAJ,oBACAvV,WACAhJ,OACArnB,SACAgf,OAAY;AAEZ,SAAO2mB,yBAAyB,CAC9BK,YAAY,CAACpD,SADiB,EAE9BoD,YAAY,CAACvB,QAFiB,EAG9BmB,kBAH8B,EAI9BvV,SAJ8B,EAK9BhJ,KAL8B,EAM9BrnB,OAN8B,EAO9Bgf,KAP8B,CAAhC;AASD;AAED;;;;;;SAIgBqnB,8BACdL,cACAhP,UACAsP,qBAA8B;AAE9B,SAAOb,0BAA0B,CAC/BO,YAAY,CAACpD,SADkB,EAE/BoD,YAAY,CAACvB,QAFkB,EAG/BzN,QAH+B,EAI/BsP,mBAJ+B,CAAjC;AAMD;AAED;;;;;SAGgBC,kBACdP,cACAjc,WAAiB;AAEjB,SAAOgZ,eAAe,CACpB7oB,SAAS,CAAC8rB,YAAY,CAACvB,QAAd,EAAwB1a,SAAxB,CADW,EAEpBic,YAAY,CAACpD,SAFO,CAAtB;AAID;;SAEeG,gBACdxpB,MACAqpB,WAAoB;AAEpB,SAAO;AACL6B,YAAQ,EAAElrB,IADL;AAELqpB,aAAS,EAATA;AAFK,GAAP;AAIF;AClzBA;;;;;;;;;;;;;;;;;;IA2Ba4D,sB;AAAb;AAAA;;AACmB,qBAAiC,IAAIhpB,GAAJ,EAAjC;AA2ElB;;;;WAzEC,0BAAiBghB,MAAjB,EAA+B;AAC7B,UAAMh5B,IAAI,GAAGg5B,MAAM,CAACh5B,IAApB;AACA,UAAMwxB,QAAQ,GAAGwH,MAAM,CAACzU,SAAxB;AACA5uB,YAAM,CACJqK,IAAI;AAAA;AAAJ,SACEA,IAAI;AAAA;AADN,SAEEA,IAAI;AAAA;AAHF,QAIJ,2CAJI,CAAN;AAMArK,YAAM,CACJ67B,QAAQ,KAAK,WADT,EAEJ,iDAFI,CAAN;AAIA,UAAMyP,SAAS,GAAG,KAAKC,SAAL,CAAe/qC,GAAf,CAAmBq7B,QAAnB,CAAlB;;AACA,UAAIyP,SAAJ,EAAe;AACb,YAAME,OAAO,GAAGF,SAAS,CAACjhC,IAA1B;;AACA,YACEA,IAAI;AAAA;AAAJ,WACAmhC,OAAO;AAAA;AAFT,UAGE;AACA,eAAKD,SAAL,CAAejrC,GAAf,CACEu7B,QADF,EAEEjD,kBAAkB,CAChBiD,QADgB,EAEhBwH,MAAM,CAAC5K,YAFS,EAGhB6S,SAAS,CAAC7S,YAHM,CAFpB;AAQD,SAZD,MAYO,IACLpuB,IAAI;AAAA;AAAJ,WACAmhC,OAAO;AAAA;AAFF,UAGL;AACA,eAAKD,SAAL,CAAex4B,MAAf,CAAsB8oB,QAAtB;AACD,SALM,MAKA,IACLxxB,IAAI;AAAA;AAAJ,WACAmhC,OAAO;AAAA;AAFF,UAGL;AACA,eAAKD,SAAL,CAAejrC,GAAf,CACEu7B,QADF,EAEElD,kBAAkB,CAACkD,QAAD,EAAWyP,SAAS,CAACzS,OAArB,CAFpB;AAID,SARM,MAQA,IACLxuB,IAAI;AAAA;AAAJ,WACAmhC,OAAO;AAAA;AAFF,UAGL;AACA,eAAKD,SAAL,CAAejrC,GAAf,CACEu7B,QADF,EAEEnD,gBAAgB,CAACmD,QAAD,EAAWwH,MAAM,CAAC5K,YAAlB,CAFlB;AAID,SARM,MAQA,IACLpuB,IAAI;AAAA;AAAJ,WACAmhC,OAAO;AAAA;AAFF,UAGL;AACA,eAAKD,SAAL,CAAejrC,GAAf,CACEu7B,QADF,EAEEjD,kBAAkB,CAACiD,QAAD,EAAWwH,MAAM,CAAC5K,YAAlB,EAAgC6S,SAAS,CAACzS,OAA1C,CAFpB;AAID,SARM,MAQA;AACL,gBAAM1N,cAAc,CAClB,qCACEkY,MADF,GAEE,kBAFF,GAGEiI,SAJgB,CAApB;AAMD;AACF,OAnDD,MAmDO;AACL,aAAKC,SAAL,CAAejrC,GAAf,CAAmBu7B,QAAnB,EAA6BwH,MAA7B;AACD;AACF;;;WAED,sBAAU;AACR,aAAO7jC,KAAK,CAACisC,IAAN,CAAW,KAAKF,SAAL,CAAe1hB,MAAf,EAAX,CAAP;AACD;;;;;ACtGH;;;;;;;;;;;;;;;;;AA8CA;;;AAGA;;;IACa6hB,sB;;;;;;;WACX,0BAAiB7P,QAAjB,EAAkC;AAChC,aAAO,IAAP;AACD;;;WACD,4BACEhY,KADF,EAEElD,KAFF,EAGE9b,OAHF,EAGmB;AAEjB,aAAO,IAAP;AACD;;;;;AAGH;;;;;AAGO,IAAM8mC,wBAAwB,GAAG,IAAID,sBAAJ,EAAjC;AAEP;;;;;IAIaE,4B;AACX,wCACUC,OADV,EAEUC,UAFV,EAGqD;AAAA,QAA3CC,uBAA2C,uEAAJ,IAAI;;AAAA;;AAF3C;AACA;AACA;AACN;;;;WACJ,0BAAiBlQ,QAAjB,EAAiC;AAC/B,UAAMpR,IAAI,GAAG,KAAKqhB,UAAL,CAAgB7I,UAA7B;;AACA,UAAIxY,IAAI,CAACkY,kBAAL,CAAwB9G,QAAxB,CAAJ,EAAuC;AACrC,eAAOpR,IAAI,CAACqa,OAAL,GAAejR,iBAAf,CAAiCgI,QAAjC,CAAP;AACD,OAFD,MAEO;AACL,YAAMmQ,UAAU,GACd,KAAKD,uBAAL,IAAgC,IAAhC,GACI,IAAIzJ,SAAJ,CAAc,KAAKyJ,uBAAnB,EAA4C,IAA5C,EAAkD,KAAlD,CADJ,GAEI,KAAKD,UAAL,CAAgBxH,WAHtB;AAIA,eAAO4G,6BAA6B,CAAC,KAAKW,OAAN,EAAehQ,QAAf,EAAyBmQ,UAAzB,CAApC;AACD;AACF;;;WACD,4BACEnoB,KADF,EAEElD,KAFF,EAGE9b,OAHF,EAGkB;AAEhB,UAAM4lC,kBAAkB,GACtB,KAAKsB,uBAAL,IAAgC,IAAhC,GACI,KAAKA,uBADT,GAEIhH,8BAA8B,CAAC,KAAK+G,UAAN,CAHpC;AAIA,UAAMnB,KAAK,GAAGM,4BAA4B,CACxC,KAAKY,OADmC,EAExCpB,kBAFwC,EAGxC9pB,KAHwC,EAIxC,CAJwC,EAKxC9b,OALwC,EAMxCgf,KANwC,CAA1C;;AAQA,UAAI8mB,KAAK,CAACrrC,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAOqrC,KAAK,CAAC,CAAD,CAAZ;AACD;AACF;;;;;AChHH;;;;;;;;;;;;;;;;;;SAwEgBsB,iBAAiBvI,QAAkB;AACjD,SAAO;AAAEA,UAAM,EAANA;AAAF,GAAP;AACD;;SAEewI,2BACdC,eACA3H,WAAoB;AAEpBxkC,QAAM,CACJwkC,SAAS,CAACvB,UAAV,CAAqB6B,OAArB,GAA+B1L,SAA/B,CAAyC+S,aAAa,CAACzI,MAAd,CAAqBpZ,QAArB,EAAzC,CADI,EAEJ,wBAFI,CAAN;AAIAtqB,QAAM,CACJwkC,SAAS,CAACF,WAAV,CAAsBQ,OAAtB,GAAgC1L,SAAhC,CAA0C+S,aAAa,CAACzI,MAAd,CAAqBpZ,QAArB,EAA1C,CADI,EAEJ,yBAFI,CAAN;AAID;;SAEe8hB,4BACdD,eACAE,cACAC,WACAC,aACAC,eAA0B;AAE1B,MAAMC,WAAW,GAAG,IAAIpB,sBAAJ,EAApB;AACA,MAAIhH,YAAJ,EAAkBqI,gBAAlB;;AACA,MAAIJ,SAAS,CAACjiC,IAAV,KAAmB+2B,aAAa,CAACe,SAArC,EAAgD;AAC9C,QAAMwK,SAAS,GAAGL,SAAlB;;AACA,QAAIK,SAAS,CAACtU,MAAV,CAAiBiJ,QAArB,EAA+B;AAC7B+C,kBAAY,GAAGuI,+BAA+B,CAC5CT,aAD4C,EAE5CE,YAF4C,EAG5CM,SAAS,CAACvuB,IAHkC,EAI5CuuB,SAAS,CAAC1V,IAJkC,EAK5CsV,WAL4C,EAM5CC,aAN4C,EAO5CC,WAP4C,CAA9C;AASD,KAVD,MAUO;AACLzsC,YAAM,CAAC2sC,SAAS,CAACtU,MAAV,CAAiBkJ,UAAlB,EAA8B,iBAA9B,CAAN,CADK;;;;AAKLmL,sBAAgB,GACdC,SAAS,CAACtU,MAAV,CAAiBmJ,MAAjB,IACC6K,YAAY,CAAC/H,WAAb,CAAyBuI,UAAzB,MAAyC,CAAC3tB,WAAW,CAACytB,SAAS,CAACvuB,IAAX,CAFxD;AAGAimB,kBAAY,GAAGyI,iCAAiC,CAC9CX,aAD8C,EAE9CE,YAF8C,EAG9CM,SAAS,CAACvuB,IAHoC,EAI9CuuB,SAAS,CAAC1V,IAJoC,EAK9CsV,WAL8C,EAM9CC,aAN8C,EAO9CE,gBAP8C,EAQ9CD,WAR8C,CAAhD;AAUD;AACF,GA/BD,MA+BO,IAAIH,SAAS,CAACjiC,IAAV,KAAmB+2B,aAAa,CAACiB,KAArC,EAA4C;AACjD,QAAMuH,KAAK,GAAG0C,SAAd;;AACA,QAAI1C,KAAK,CAACvR,MAAN,CAAaiJ,QAAjB,EAA2B;AACzB+C,kBAAY,GAAG0I,2BAA2B,CACxCZ,aADwC,EAExCE,YAFwC,EAGxCzC,KAAK,CAACxrB,IAHkC,EAIxCwrB,KAAK,CAACpT,QAJkC,EAKxC+V,WALwC,EAMxCC,aANwC,EAOxCC,WAPwC,CAA1C;AASD,KAVD,MAUO;AACLzsC,YAAM,CAAC4pC,KAAK,CAACvR,MAAN,CAAakJ,UAAd,EAA0B,iBAA1B,CAAN,CADK;;AAGLmL,sBAAgB,GACd9C,KAAK,CAACvR,MAAN,CAAamJ,MAAb,IAAuB6K,YAAY,CAAC/H,WAAb,CAAyBuI,UAAzB,EADzB;AAEAxI,kBAAY,GAAG2I,6BAA6B,CAC1Cb,aAD0C,EAE1CE,YAF0C,EAG1CzC,KAAK,CAACxrB,IAHoC,EAI1CwrB,KAAK,CAACpT,QAJoC,EAK1C+V,WAL0C,EAM1CC,aAN0C,EAO1CE,gBAP0C,EAQ1CD,WAR0C,CAA5C;AAUD;AACF,GA5BM,MA4BA,IAAIH,SAAS,CAACjiC,IAAV,KAAmB+2B,aAAa,CAACU,cAArC,EAAqD;AAC1D,QAAMmL,YAAY,GAAGX,SAArB;;AACA,QAAI,CAACW,YAAY,CAACpL,MAAlB,EAA0B;AACxBwC,kBAAY,GAAG6I,yBAAyB,CACtCf,aADsC,EAEtCE,YAFsC,EAGtCY,YAAY,CAAC7uB,IAHyB,EAItC6uB,YAAY,CAACrL,YAJyB,EAKtC2K,WALsC,EAMtCC,aANsC,EAOtCC,WAPsC,CAAxC;AASD,KAVD,MAUO;AACLpI,kBAAY,GAAG8I,4BAA4B,CACzChB,aADyC,EAEzCE,YAFyC,EAGzCY,YAAY,CAAC7uB,IAH4B,EAIzCmuB,WAJyC,EAKzCC,aALyC,EAMzCC,WANyC,CAA3C;AAQD;AACF,GAtBM,MAsBA,IAAIH,SAAS,CAACjiC,IAAV,KAAmB+2B,aAAa,CAACa,eAArC,EAAsD;AAC3DoC,gBAAY,GAAG+I,2BAA2B,CACxCjB,aADwC,EAExCE,YAFwC,EAGxCC,SAAS,CAACluB,IAH8B,EAIxCmuB,WAJwC,EAKxCE,WALwC,CAA1C;AAOD,GARM,MAQA;AACL,UAAMthB,cAAc,CAAC,6BAA6BmhB,SAAS,CAACjiC,IAAxC,CAApB;AACD;;AACD,MAAM24B,OAAO,GAAGyJ,WAAW,CAACY,UAAZ,EAAhB;AACAC,iCAA+B,CAACjB,YAAD,EAAehI,YAAf,EAA6BrB,OAA7B,CAA/B;AACA,SAAO;AAAEwB,aAAS,EAAEH,YAAb;AAA2BrB,WAAO,EAAPA;AAA3B,GAAP;AACD;;AAED,SAASsK,+BAAT,CACEjB,YADF,EAEEhI,YAFF,EAGEoI,WAHF,EAGuB;AAErB,MAAMhI,SAAS,GAAGJ,YAAY,CAACpB,UAA/B;;AACA,MAAIwB,SAAS,CAAC/B,kBAAV,EAAJ,EAAoC;AAClC,QAAM6K,aAAa,GACjB9I,SAAS,CAACK,OAAV,GAAoBzW,UAApB,MAAoCoW,SAAS,CAACK,OAAV,GAAoB7b,OAApB,EADtC;AAEA,QAAMukB,eAAe,GAAG3I,6BAA6B,CAACwH,YAAD,CAArD;;AACA,QACEI,WAAW,CAACntC,MAAZ,GAAqB,CAArB,IACA,CAAC+sC,YAAY,CAACpJ,UAAb,CAAwBP,kBAAxB,EADD,IAEC6K,aAAa,IAAI,CAAC9I,SAAS,CAACK,OAAV,GAAoBhV,MAApB,CAA2B0d,eAA3B,CAFnB,IAGA,CAAC/I,SAAS,CAACK,OAAV,GAAoBxW,WAApB,GAAkCwB,MAAlC,CAAyC0d,eAAe,CAAClf,WAAhB,EAAzC,CAJH,EAKE;AACAme,iBAAW,CAACrpC,IAAZ,CACEo1B,WAAW,CAACqM,6BAA6B,CAACR,YAAD,CAA9B,CADb;AAGD;AACF;AACF;;AAED,SAASoJ,+CAAT,CACEtB,aADF,EAEE3H,SAFF,EAGEkJ,UAHF,EAIEnB,WAJF,EAKElU,MALF,EAMEoU,WANF,EAMqC;AAEnC,MAAMkB,YAAY,GAAGnJ,SAAS,CAACvB,UAA/B;;AACA,MAAI+H,0BAA0B,CAACuB,WAAD,EAAcmB,UAAd,CAA1B,IAAuD,IAA3D,EAAiE;;AAE/D,WAAOlJ,SAAP;AACD,GAHD,MAGO;AACL,QAAI9H,aAAJ,EAAmBsP,UAAnB;;AACA,QAAI9sB,WAAW,CAACwuB,UAAD,CAAf,EAA6B;;AAE3B1tC,YAAM,CACJwkC,SAAS,CAACF,WAAV,CAAsB5B,kBAAtB,EADI,EAEJ,4DAFI,CAAN;;AAIA,UAAI8B,SAAS,CAACF,WAAV,CAAsBuI,UAAtB,EAAJ,EAAwC;;;;AAItC,YAAMvI,WAAW,GAAGS,8BAA8B,CAACP,SAAD,CAAlD;AACA,YAAMwF,gBAAgB,GACpB1F,WAAW,YAAY5Q,YAAvB,GACI4Q,WADJ,GAEI5Q,YAAY,CAACzH,UAHnB;AAIA,YAAM2hB,qBAAqB,GAAG9C,qCAAqC,CACjEyB,WADiE,EAEjEvC,gBAFiE,CAAnE;AAIAtN,qBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqBrJ,cAArB,CACdmK,SAAS,CAACvB,UAAV,CAAqB6B,OAArB,EADc,EAEd8I,qBAFc,EAGdnB,WAHc,CAAhB;AAKD,OAlBD,MAkBO;AACL,YAAMoB,YAAY,GAAGjD,kCAAkC,CACrD2B,WADqD,EAErDxH,8BAA8B,CAACP,SAAD,CAFuB,CAAvD;AAIA9H,qBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqBrJ,cAArB,CACdmK,SAAS,CAACvB,UAAV,CAAqB6B,OAArB,EADc,EAEd+I,YAFc,EAGdpB,WAHc,CAAhB;AAKD;AACF,KAnCD,MAmCO;AACL,UAAM5Q,QAAQ,GAAG1d,YAAY,CAACuvB,UAAD,CAA7B;;AACA,UAAI7R,QAAQ,KAAK,WAAjB,EAA8B;AAC5B77B,cAAM,CACJqe,aAAa,CAACqvB,UAAD,CAAb,KAA8B,CAD1B,EAEJ,uDAFI,CAAN;AAIA,YAAMI,YAAY,GAAGH,YAAY,CAAC7I,OAAb,EAArB;AACAkH,kBAAU,GAAGxH,SAAS,CAACF,WAAV,CAAsBQ,OAAtB,EAAb,CAN4B;;AAQ5B,YAAMiJ,eAAe,GAAGhD,8CAA8C,CACpEwB,WADoE,EAEpEmB,UAFoE,EAGpEI,YAHoE,EAIpE9B,UAJoE,CAAtE;;AAMA,YAAI+B,eAAe,IAAI,IAAvB,EAA6B;AAC3BrR,uBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqB3U,cAArB,CACd+e,YADc,EAEdC,eAFc,CAAhB;AAID,SALD,MAKO;;AAELrR,uBAAa,GAAGiR,YAAY,CAAC7I,OAAb,EAAhB;AACD;AACF,OAvBD,MAuBO;AACL,YAAMkJ,eAAe,GAAG1vB,YAAY,CAACovB,UAAD,CAApC,CADK;;AAGL,YAAIO,aAAJ;;AACA,YAAIN,YAAY,CAAChL,kBAAb,CAAgC9G,QAAhC,CAAJ,EAA+C;AAC7CmQ,oBAAU,GAAGxH,SAAS,CAACF,WAAV,CAAsBQ,OAAtB,EAAb;AACA,cAAMoJ,gBAAgB,GACpBnD,8CAA8C,CAC5CwB,WAD4C,EAE5CmB,UAF4C,EAG5CC,YAAY,CAAC7I,OAAb,EAH4C,EAI5CkH,UAJ4C,CADhD;;AAOA,cAAIkC,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BD,yBAAa,GAAGN,YAAY,CACzB7I,OADa,GAEbjR,iBAFa,CAEKgI,QAFL,EAGb3M,WAHa,CAGD8e,eAHC,EAGgBE,gBAHhB,CAAhB;AAID,WALD,MAKO;;AAELD,yBAAa,GAAGN,YAAY,CAAC7I,OAAb,GAAuBjR,iBAAvB,CAAyCgI,QAAzC,CAAhB;AACD;AACF,SAlBD,MAkBO;AACLoS,uBAAa,GAAG/C,6BAA6B,CAC3CqB,WAD2C,EAE3C1Q,QAF2C,EAG3C2I,SAAS,CAACF,WAHiC,CAA7C;AAKD;;AACD,YAAI2J,aAAa,IAAI,IAArB,EAA2B;AACzBvR,uBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqBxU,WAArB,CACdye,YAAY,CAAC7I,OAAb,EADc,EAEdjJ,QAFc,EAGdoS,aAHc,EAIdD,eAJc,EAKd3V,MALc,EAMdoU,WANc,CAAhB;AAQD,SATD,MASO;;AAEL/P,uBAAa,GAAGiR,YAAY,CAAC7I,OAAb,EAAhB;AACD;AACF;AACF;;AACD,WAAOP,wBAAwB,CAC7BC,SAD6B,EAE7B9H,aAF6B,EAG7BiR,YAAY,CAACjL,kBAAb,MAAqCxjB,WAAW,CAACwuB,UAAD,CAHnB,EAI7BvB,aAAa,CAACzI,MAAd,CAAqByK,YAArB,EAJ6B,CAA/B;AAMD;AACF;;AAED,SAASrB,iCAAT,CACEX,aADF,EAEEE,YAFF,EAGEqB,UAHF,EAIEU,WAJF,EAKE7B,WALF,EAMEC,aANF,EAOEE,gBAPF,EAQED,WARF,EAQqC;AAEnC,MAAM4B,aAAa,GAAGhC,YAAY,CAAC/H,WAAnC;AACA,MAAIgK,cAAJ;AACA,MAAMC,YAAY,GAAG7B,gBAAgB,GACjCP,aAAa,CAACzI,MADmB,GAEjCyI,aAAa,CAACzI,MAAd,CAAqBpI,gBAArB,EAFJ;;AAGA,MAAIpc,WAAW,CAACwuB,UAAD,CAAf,EAA6B;AAC3BY,kBAAc,GAAGC,YAAY,CAAClU,cAAb,CACfgU,aAAa,CAACvJ,OAAd,EADe,EAEfsJ,WAFe,EAGf,IAHe,CAAjB;AAKD,GAND,MAMO,IAAIG,YAAY,CAACJ,YAAb,MAA+B,CAACE,aAAa,CAACxB,UAAd,EAApC,EAAgE;;AAErE,QAAM2B,aAAa,GAAGH,aAAa,CAChCvJ,OADmB,GAEnB5V,WAFmB,CAEPwe,UAFO,EAEKU,WAFL,CAAtB;AAGAE,kBAAc,GAAGC,YAAY,CAAClU,cAAb,CACfgU,aAAa,CAACvJ,OAAd,EADe,EAEf0J,aAFe,EAGf,IAHe,CAAjB;AAKD,GAVM,MAUA;AACL,QAAM3S,QAAQ,GAAG1d,YAAY,CAACuvB,UAAD,CAA7B;;AACA,QACE,CAACW,aAAa,CAACI,iBAAd,CAAgCf,UAAhC,CAAD,IACArvB,aAAa,CAACqvB,UAAD,CAAb,GAA4B,CAF9B,EAGE;;AAEA,aAAOrB,YAAP;AACD;;AACD,QAAM2B,eAAe,GAAG1vB,YAAY,CAACovB,UAAD,CAApC;AACA,QAAM7e,SAAS,GAAGwf,aAAa,CAACvJ,OAAd,GAAwBjR,iBAAxB,CAA0CgI,QAA1C,CAAlB;AACA,QAAM/M,YAAY,GAAGD,SAAS,CAACK,WAAV,CAAsB8e,eAAtB,EAAuCI,WAAvC,CAArB;;AACA,QAAIvS,QAAQ,KAAK,WAAjB,EAA8B;AAC5ByS,oBAAc,GAAGC,YAAY,CAACxf,cAAb,CACfsf,aAAa,CAACvJ,OAAd,EADe,EAEfhW,YAFe,CAAjB;AAID,KALD,MAKO;AACLwf,oBAAc,GAAGC,YAAY,CAACrf,WAAb,CACfmf,aAAa,CAACvJ,OAAd,EADe,EAEfjJ,QAFe,EAGf/M,YAHe,EAIfkf,eAJe,EAKfrC,wBALe,EAMf,IANe,CAAjB;AAQD;AACF;;AACD,MAAMtH,YAAY,GAAGM,yBAAyB,CAC5C0H,YAD4C,EAE5CiC,cAF4C,EAG5CD,aAAa,CAAC3L,kBAAd,MAAsCxjB,WAAW,CAACwuB,UAAD,CAHL,EAI5Ca,YAAY,CAACJ,YAAb,EAJ4C,CAA9C;AAMA,MAAM9V,MAAM,GAAG,IAAIuT,4BAAJ,CACbW,WADa,EAEblI,YAFa,EAGbmI,aAHa,CAAf;AAKA,SAAOiB,+CAA+C,CACpDtB,aADoD,EAEpD9H,YAFoD,EAGpDqJ,UAHoD,EAIpDnB,WAJoD,EAKpDlU,MALoD,EAMpDoU,WANoD,CAAtD;AAQD;;AAED,SAASG,+BAAT,CACET,aADF,EAEEE,YAFF,EAGEqB,UAHF,EAIEU,WAJF,EAKE7B,WALF,EAMEC,aANF,EAOEC,WAPF,EAOqC;AAEnC,MAAMkB,YAAY,GAAGtB,YAAY,CAACpJ,UAAlC;AACA,MAAIoB,YAAJ,EAAkB3H,aAAlB;AACA,MAAMrE,MAAM,GAAG,IAAIuT,4BAAJ,CACbW,WADa,EAEbF,YAFa,EAGbG,aAHa,CAAf;;AAKA,MAAIttB,WAAW,CAACwuB,UAAD,CAAf,EAA6B;AAC3BhR,iBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqBrJ,cAArB,CACdgS,YAAY,CAACpJ,UAAb,CAAwB6B,OAAxB,EADc,EAEdsJ,WAFc,EAGd3B,WAHc,CAAhB;AAKApI,gBAAY,GAAGE,wBAAwB,CACrC8H,YADqC,EAErC3P,aAFqC,EAGrC,IAHqC,EAIrCyP,aAAa,CAACzI,MAAd,CAAqByK,YAArB,EAJqC,CAAvC;AAMD,GAZD,MAYO;AACL,QAAMtS,QAAQ,GAAG1d,YAAY,CAACuvB,UAAD,CAA7B;;AACA,QAAI7R,QAAQ,KAAK,WAAjB,EAA8B;AAC5Ba,mBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqB3U,cAArB,CACdsd,YAAY,CAACpJ,UAAb,CAAwB6B,OAAxB,EADc,EAEdsJ,WAFc,CAAhB;AAIA/J,kBAAY,GAAGE,wBAAwB,CACrC8H,YADqC,EAErC3P,aAFqC,EAGrCiR,YAAY,CAACjL,kBAAb,EAHqC,EAIrCiL,YAAY,CAACd,UAAb,EAJqC,CAAvC;AAMD,KAXD,MAWO;AACL,UAAMmB,eAAe,GAAG1vB,YAAY,CAACovB,UAAD,CAApC;AACA,UAAMrU,QAAQ,GAAGsU,YAAY,CAAC7I,OAAb,GAAuBjR,iBAAvB,CAAyCgI,QAAzC,CAAjB;AACA,UAAI5C,QAAJ;;AACA,UAAI/Z,WAAW,CAAC8uB,eAAD,CAAf,EAAkC;;AAEhC/U,gBAAQ,GAAGmV,WAAX;AACD,OAHD,MAGO;AACL,YAAMvf,SAAS,GAAGwJ,MAAM,CAACqW,gBAAP,CAAwB7S,QAAxB,CAAlB;;AACA,YAAIhN,SAAS,IAAI,IAAjB,EAAuB;AACrB,cACEtQ,WAAW,CAACyvB,eAAD,CAAX,KAAiC,WAAjC,IACAnf,SAAS,CAACiF,QAAV,CAAmBjV,UAAU,CAACmvB,eAAD,CAA7B,EAAgD/kB,OAAhD,EAFF,EAGE;;;AAGAgQ,oBAAQ,GAAGpK,SAAX;AACD,WAPD,MAOO;AACLoK,oBAAQ,GAAGpK,SAAS,CAACK,WAAV,CAAsB8e,eAAtB,EAAuCI,WAAvC,CAAX;AACD;AACF,SAXD,MAWO;;AAELnV,kBAAQ,GAAGvF,YAAY,CAACzH,UAAxB;AACD;AACF;;AACD,UAAI,CAACoN,QAAQ,CAACvJ,MAAT,CAAgBmJ,QAAhB,CAAL,EAAgC;AAC9B,YAAM0V,YAAY,GAAGxC,aAAa,CAACzI,MAAd,CAAqBxU,WAArB,CACnBye,YAAY,CAAC7I,OAAb,EADmB,EAEnBjJ,QAFmB,EAGnB5C,QAHmB,EAInB+U,eAJmB,EAKnB3V,MALmB,EAMnBoU,WANmB,CAArB;AAQApI,oBAAY,GAAGE,wBAAwB,CACrC8H,YADqC,EAErCsC,YAFqC,EAGrChB,YAAY,CAACjL,kBAAb,EAHqC,EAIrCyJ,aAAa,CAACzI,MAAd,CAAqByK,YAArB,EAJqC,CAAvC;AAMD,OAfD,MAeO;AACL9J,oBAAY,GAAGgI,YAAf;AACD;AACF;AACF;;AACD,SAAOhI,YAAP;AACD;;AAED,SAASuK,0BAAT,CACEpK,SADF,EAEE3I,QAFF,EAEkB;AAEhB,SAAO2I,SAAS,CAACvB,UAAV,CAAqBN,kBAArB,CAAwC9G,QAAxC,CAAP;AACD;;AAED,SAASkR,2BAAT,CACEZ,aADF,EAEE3H,SAFF,EAGEpmB,IAHF,EAIE+pB,eAJF,EAKEoE,WALF,EAMEjI,WANF,EAOEmI,WAPF,EAOqC;;;;;;;AAQnC,MAAIoC,YAAY,GAAGrK,SAAnB;AACA2D,iBAAe,CAAC2G,OAAhB,CAAwB,UAAC3J,YAAD,EAAetW,SAAf,EAAwB;AAC9C,QAAMsa,SAAS,GAAGpqB,SAAS,CAACX,IAAD,EAAO+mB,YAAP,CAA3B;;AACA,QAAIyJ,0BAA0B,CAACpK,SAAD,EAAYrmB,YAAY,CAACgrB,SAAD,CAAxB,CAA9B,EAAoE;AAClE0F,kBAAY,GAAGjC,+BAA+B,CAC5CT,aAD4C,EAE5C0C,YAF4C,EAG5C1F,SAH4C,EAI5Cta,SAJ4C,EAK5C0d,WAL4C,EAM5CjI,WAN4C,EAO5CmI,WAP4C,CAA9C;AASD;AACF,GAbD;AAeAtE,iBAAe,CAAC2G,OAAhB,CAAwB,UAAC3J,YAAD,EAAetW,SAAf,EAAwB;AAC9C,QAAMsa,SAAS,GAAGpqB,SAAS,CAACX,IAAD,EAAO+mB,YAAP,CAA3B;;AACA,QAAI,CAACyJ,0BAA0B,CAACpK,SAAD,EAAYrmB,YAAY,CAACgrB,SAAD,CAAxB,CAA/B,EAAqE;AACnE0F,kBAAY,GAAGjC,+BAA+B,CAC5CT,aAD4C,EAE5C0C,YAF4C,EAG5C1F,SAH4C,EAI5Cta,SAJ4C,EAK5C0d,WAL4C,EAM5CjI,WAN4C,EAO5CmI,WAP4C,CAA9C;AASD;AACF,GAbD;AAeA,SAAOoC,YAAP;AACD;;AAED,SAASE,uBAAT,CACE5C,aADF,EAEE1hB,IAFF,EAGEmf,KAHF,EAG4B;AAE1BA,OAAK,CAACkF,OAAN,CAAc,UAAC3J,YAAD,EAAetW,SAAf,EAAwB;AACpCpE,QAAI,GAAGA,IAAI,CAACyE,WAAL,CAAiBiW,YAAjB,EAA+BtW,SAA/B,CAAP;AACD,GAFD;AAGA,SAAOpE,IAAP;AACD;;AAED,SAASuiB,6BAAT,CACEb,aADF,EAEE3H,SAFF,EAGEpmB,IAHF,EAIE+pB,eAJF,EAKEoE,WALF,EAMEjI,WANF,EAOEoI,gBAPF,EAQED,WARF,EAQqC;;;AAInC,MACEjI,SAAS,CAACF,WAAV,CAAsBQ,OAAtB,GAAgC7b,OAAhC,MACA,CAACub,SAAS,CAACF,WAAV,CAAsB5B,kBAAtB,EAFH,EAGE;AACA,WAAO8B,SAAP;AACD,GATkC;;;;;;;;AAiBnC,MAAIqK,YAAY,GAAGrK,SAAnB;AACA,MAAIwK,aAAJ;;AACA,MAAI9vB,WAAW,CAACd,IAAD,CAAf,EAAuB;AACrB4wB,iBAAa,GAAG7G,eAAhB;AACD,GAFD,MAEO;AACL6G,iBAAa,GAAG,IAAI9J,aAAJ,CAAwB,IAAxB,EAA8BQ,OAA9B,CACdtnB,IADc,EAEd+pB,eAFc,CAAhB;AAID;;AACD,MAAM6D,UAAU,GAAGxH,SAAS,CAACF,WAAV,CAAsBQ,OAAtB,EAAnB;AACAkK,eAAa,CAACxY,QAAd,CAAuBrK,gBAAvB,CAAwC,UAAC0P,QAAD,EAAWhK,SAAX,EAAoB;AAC1D,QAAIma,UAAU,CAAC1S,QAAX,CAAoBuC,QAApB,CAAJ,EAAmC;AACjC,UAAMoT,WAAW,GAAGzK,SAAS,CAACF,WAAV,CACjBQ,OADiB,GAEjBjR,iBAFiB,CAECgI,QAFD,CAApB;AAGA,UAAM5C,QAAQ,GAAG8V,uBAAuB,CACtC5C,aADsC,EAEtC8C,WAFsC,EAGtCpd,SAHsC,CAAxC;AAKAgd,kBAAY,GAAG/B,iCAAiC,CAC9CX,aAD8C,EAE9C0C,YAF8C,EAG9C,IAAIlxB,IAAJ,CAASke,QAAT,CAH8C,EAI9C5C,QAJ8C,EAK9CsT,WAL8C,EAM9CjI,WAN8C,EAO9CoI,gBAP8C,EAQ9CD,WAR8C,CAAhD;AAUD;AACF,GArBD;AAsBAuC,eAAa,CAACxY,QAAd,CAAuBrK,gBAAvB,CAAwC,UAAC0P,QAAD,EAAWqT,cAAX,EAAyB;AAC/D,QAAMC,kBAAkB,GACtB,CAAC3K,SAAS,CAACF,WAAV,CAAsB3B,kBAAtB,CAAyC9G,QAAzC,CAAD,IACAqT,cAAc,CAAClyC,KAAf,KAAyB8mB,SAF3B;;AAGA,QAAI,CAACkoB,UAAU,CAAC1S,QAAX,CAAoBuC,QAApB,CAAD,IAAkC,CAACsT,kBAAvC,EAA2D;AACzD,UAAMF,WAAW,GAAGzK,SAAS,CAACF,WAAV,CACjBQ,OADiB,GAEjBjR,iBAFiB,CAECgI,QAFD,CAApB;AAGA,UAAM5C,QAAQ,GAAG8V,uBAAuB,CACtC5C,aADsC,EAEtC8C,WAFsC,EAGtCC,cAHsC,CAAxC;AAKAL,kBAAY,GAAG/B,iCAAiC,CAC9CX,aAD8C,EAE9C0C,YAF8C,EAG9C,IAAIlxB,IAAJ,CAASke,QAAT,CAH8C,EAI9C5C,QAJ8C,EAK9CsT,WAL8C,EAM9CjI,WAN8C,EAO9CoI,gBAP8C,EAQ9CD,WAR8C,CAAhD;AAUD;AACF,GAxBD;AA0BA,SAAOoC,YAAP;AACD;;AAED,SAAS3B,yBAAT,CACEf,aADF,EAEE3H,SAFF,EAGE4K,OAHF,EAIExN,YAJF,EAKE2K,WALF,EAMEC,aANF,EAOEC,WAPF,EAOqC;AAEnC,MAAIzB,0BAA0B,CAACuB,WAAD,EAAc6C,OAAd,CAA1B,IAAoD,IAAxD,EAA8D;AAC5D,WAAO5K,SAAP;AACD,GAJkC;;;AAOnC,MAAMkI,gBAAgB,GAAGlI,SAAS,CAACF,WAAV,CAAsBuI,UAAtB,EAAzB,CAPmC;;;AAWnC,MAAMvI,WAAW,GAAGE,SAAS,CAACF,WAA9B;;AACA,MAAI1C,YAAY,CAAC5kC,KAAb,IAAsB,IAA1B,EAAgC;;AAE9B,QACGkiB,WAAW,CAACkwB,OAAD,CAAX,IAAwB9K,WAAW,CAAC5B,kBAAZ,EAAzB,IACA4B,WAAW,CAACmK,iBAAZ,CAA8BW,OAA9B,CAFF,EAGE;AACA,aAAOtC,iCAAiC,CACtCX,aADsC,EAEtC3H,SAFsC,EAGtC4K,OAHsC,EAItC9K,WAAW,CAACQ,OAAZ,GAAsBhR,QAAtB,CAA+Bsb,OAA/B,CAJsC,EAKtC7C,WALsC,EAMtCC,aANsC,EAOtCE,gBAPsC,EAQtCD,WARsC,CAAxC;AAUD,KAdD,MAcO,IAAIvtB,WAAW,CAACkwB,OAAD,CAAf,EAA0B;;;AAG/B,UAAIjH,eAAe,GAAG,IAAIjD,aAAJ,CAAwB,IAAxB,CAAtB;AACAZ,iBAAW,CAACQ,OAAZ,GAAsBxQ,YAAtB,CAAmChJ,SAAnC,EAA8C,UAAC9tB,IAAD,EAAOitB,IAAP,EAAW;AACvD0d,uBAAe,GAAGA,eAAe,CAAC7nC,GAAhB,CAAoB,IAAIqd,IAAJ,CAASngB,IAAT,CAApB,EAAoCitB,IAApC,CAAlB;AACD,OAFD;AAGA,aAAOuiB,6BAA6B,CAClCb,aADkC,EAElC3H,SAFkC,EAGlC4K,OAHkC,EAIlCjH,eAJkC,EAKlCoE,WALkC,EAMlCC,aANkC,EAOlCE,gBAPkC,EAQlCD,WARkC,CAApC;AAUD,KAjBM,MAiBA;AACL,aAAOjI,SAAP;AACD;AACF,GApCD,MAoCO;;AAEL,QAAI2D,gBAAe,GAAG,IAAIjD,aAAJ,CAAwB,IAAxB,CAAtB;;AACAtD,gBAAY,CAACkN,OAAb,CAAqB,UAACO,SAAD,EAAYryC,KAAZ,EAAiB;AACpC,UAAMsyC,eAAe,GAAGvwB,SAAS,CAACqwB,OAAD,EAAUC,SAAV,CAAjC;;AACA,UAAI/K,WAAW,CAACmK,iBAAZ,CAA8Ba,eAA9B,CAAJ,EAAoD;AAClDnH,wBAAe,GAAGA,gBAAe,CAAC7nC,GAAhB,CAChB+uC,SADgB,EAEhB/K,WAAW,CAACQ,OAAZ,GAAsBhR,QAAtB,CAA+Bwb,eAA/B,CAFgB,CAAlB;AAID;AACF,KARD;AASA,WAAOtC,6BAA6B,CAClCb,aADkC,EAElC3H,SAFkC,EAGlC4K,OAHkC,EAIlCjH,gBAJkC,EAKlCoE,WALkC,EAMlCC,aANkC,EAOlCE,gBAPkC,EAQlCD,WARkC,CAApC;AAUD;AACF;;AAED,SAASW,2BAAT,CACEjB,aADF,EAEE3H,SAFF,EAGEpmB,IAHF,EAIEmuB,WAJF,EAKEE,WALF,EAKqC;AAEnC,MAAM8C,aAAa,GAAG/K,SAAS,CAACF,WAAhC;AACA,MAAMD,YAAY,GAAGM,yBAAyB,CAC5CH,SAD4C,EAE5C+K,aAAa,CAACzK,OAAd,EAF4C,EAG5CyK,aAAa,CAAC7M,kBAAd,MAAsCxjB,WAAW,CAACd,IAAD,CAHL,EAI5CmxB,aAAa,CAAC1C,UAAd,EAJ4C,CAA9C;AAMA,SAAOY,+CAA+C,CACpDtB,aADoD,EAEpD9H,YAFoD,EAGpDjmB,IAHoD,EAIpDmuB,WAJoD,EAKpDZ,wBALoD,EAMpDc,WANoD,CAAtD;AAQD;;AAED,SAASU,4BAAT,CACEhB,aADF,EAEE3H,SAFF,EAGEpmB,IAHF,EAIEmuB,WAJF,EAKEhD,mBALF,EAMEkD,WANF,EAMqC;AAEnC,MAAI/H,QAAJ;;AACA,MAAIsG,0BAA0B,CAACuB,WAAD,EAAcnuB,IAAd,CAA1B,IAAiD,IAArD,EAA2D;AACzD,WAAOomB,SAAP;AACD,GAFD,MAEO;AACL,QAAMnM,MAAM,GAAG,IAAIuT,4BAAJ,CACbW,WADa,EAEb/H,SAFa,EAGb+E,mBAHa,CAAf;AAKA,QAAMvN,aAAa,GAAGwI,SAAS,CAACvB,UAAV,CAAqB6B,OAArB,EAAtB;AACA,QAAIpI,aAAJ;;AACA,QAAIxd,WAAW,CAACd,IAAD,CAAX,IAAqBD,YAAY,CAACC,IAAD,CAAZ,KAAuB,WAAhD,EAA6D;AAC3D,UAAIyM,OAAJ;;AACA,UAAI2Z,SAAS,CAACF,WAAV,CAAsB5B,kBAAtB,EAAJ,EAAgD;AAC9C7X,eAAO,GAAG+f,kCAAkC,CAC1C2B,WAD0C,EAE1CxH,8BAA8B,CAACP,SAAD,CAFY,CAA5C;AAID,OALD,MAKO;AACL,YAAMgL,cAAc,GAAGhL,SAAS,CAACF,WAAV,CAAsBQ,OAAtB,EAAvB;AACA9kC,cAAM,CACJwvC,cAAc,YAAY9b,YADtB,EAEJ,+CAFI,CAAN;AAIA7I,eAAO,GAAGigB,qCAAqC,CAC7CyB,WAD6C,EAE7CiD,cAF6C,CAA/C;AAID;;AACD3kB,aAAO,GAAGA,OAAV;AACA6R,mBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqBrJ,cAArB,CACd2B,aADc,EAEdnR,OAFc,EAGd4hB,WAHc,CAAhB;AAKD,KAxBD,MAwBO;AACL,UAAM5Q,QAAQ,GAAG1d,YAAY,CAACC,IAAD,CAA7B;AACA,UAAI6a,QAAQ,GAAGiS,6BAA6B,CAC1CqB,WAD0C,EAE1C1Q,QAF0C,EAG1C2I,SAAS,CAACF,WAHgC,CAA5C;;AAKA,UACErL,QAAQ,IAAI,IAAZ,IACAuL,SAAS,CAACF,WAAV,CAAsB3B,kBAAtB,CAAyC9G,QAAzC,CAFF,EAGE;AACA5C,gBAAQ,GAAG+C,aAAa,CAACnI,iBAAd,CAAgCgI,QAAhC,CAAX;AACD;;AACD,UAAI5C,QAAQ,IAAI,IAAhB,EAAsB;AACpByD,qBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqBxU,WAArB,CACd8M,aADc,EAEdH,QAFc,EAGd5C,QAHc,EAId3a,YAAY,CAACF,IAAD,CAJE,EAKdia,MALc,EAMdoU,WANc,CAAhB;AAQD,OATD,MASO,IAAIjI,SAAS,CAACvB,UAAV,CAAqB6B,OAArB,GAA+BxL,QAA/B,CAAwCuC,QAAxC,CAAJ,EAAuD;;AAE5Da,qBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqBxU,WAArB,CACd8M,aADc,EAEdH,QAFc,EAGdnI,YAAY,CAACzH,UAHC,EAId3N,YAAY,CAACF,IAAD,CAJE,EAKdia,MALc,EAMdoU,WANc,CAAhB;AAQD,OAVM,MAUA;AACL/P,qBAAa,GAAGV,aAAhB;AACD;;AACD,UACEU,aAAa,CAACzT,OAAd,MACAub,SAAS,CAACF,WAAV,CAAsB5B,kBAAtB,EAFF,EAGE;;AAEAgC,gBAAQ,GAAGkG,kCAAkC,CAC3C2B,WAD2C,EAE3CxH,8BAA8B,CAACP,SAAD,CAFa,CAA7C;;AAIA,YAAIE,QAAQ,CAACrW,UAAT,EAAJ,EAA2B;AACzBqO,uBAAa,GAAGyP,aAAa,CAACzI,MAAd,CAAqBrJ,cAArB,CACdqC,aADc,EAEdgI,QAFc,EAGd+H,WAHc,CAAhB;AAKD;AACF;AACF;;AACD/H,YAAQ,GACNF,SAAS,CAACF,WAAV,CAAsB5B,kBAAtB,MACAsI,0BAA0B,CAACuB,WAAD,EAAcruB,YAAY,EAA1B,CAA1B,IAA2D,IAF7D;AAGA,WAAOqmB,wBAAwB,CAC7BC,SAD6B,EAE7B9H,aAF6B,EAG7BgI,QAH6B,EAI7ByH,aAAa,CAACzI,MAAd,CAAqByK,YAArB,EAJ6B,CAA/B;AAMD;AACH;AC/2BA;;;;;;;;;;;;;;;;;AAiDA;;;;;;;;;;;IASasB,I;AAMX,gBAAoB5M,MAApB,EAA0C6M,gBAA1C,EAAqE;AAAA;;AAAjD;AAHpB,+BAA2C,EAA3C;AAIE,QAAMplC,MAAM,GAAG,KAAKu4B,MAAL,CAAYte,YAA3B;AAEA,QAAMorB,WAAW,GAAG,IAAI5W,aAAJ,CAAkBzuB,MAAM,CAACggB,QAAP,EAAlB,CAApB;AACA,QAAMoZ,MAAM,GAAGjG,wBAAwB,CAACnzB,MAAD,CAAvC;AAEA,SAAKslC,UAAL,GAAkB3D,gBAAgB,CAACvI,MAAD,CAAlC;AAEA,QAAMmM,kBAAkB,GAAGH,gBAAgB,CAACpL,WAA5C;AACA,QAAMwL,iBAAiB,GAAGJ,gBAAgB,CAACzM,UAA3C,CATmE;;AAYnE,QAAM2B,UAAU,GAAG+K,WAAW,CAACtV,cAAZ,CACjB3G,YAAY,CAACzH,UADI,EAEjB4jB,kBAAkB,CAAC/K,OAAnB,EAFiB,EAGjB,IAHiB,CAAnB;AAKA,QAAML,SAAS,GAAGf,MAAM,CAACrJ,cAAP,CAChB3G,YAAY,CAACzH,UADG,EAEhB6jB,iBAAiB,CAAChL,OAAlB,EAFgB,EAGhB,IAHgB,CAAlB;AAKA,QAAMwJ,cAAc,GAAG,IAAIhM,SAAJ,CACrBsC,UADqB,EAErBiL,kBAAkB,CAACnN,kBAAnB,EAFqB,EAGrBiN,WAAW,CAACxB,YAAZ,EAHqB,CAAvB;AAKA,QAAMzR,aAAa,GAAG,IAAI4F,SAAJ,CACpBmC,SADoB,EAEpBqL,iBAAiB,CAACpN,kBAAlB,EAFoB,EAGpBgB,MAAM,CAACyK,YAAP,EAHoB,CAAtB;AAMA,SAAKrC,UAAL,GAAkBzH,YAAY,CAAC3H,aAAD,EAAgB4R,cAAhB,CAA9B;AACA,SAAKyB,eAAL,GAAuB,IAAInN,cAAJ,CAAmB,KAAKC,MAAxB,CAAvB;AACD;;;;SAED,eAAS;AACP,aAAO,KAAKA,MAAZ;AACD;;;;;;SAGamN,mBAAmBC,MAAU;AAC3C,SAAOA,IAAI,CAACnE,UAAL,CAAgBxH,WAAhB,CAA4BQ,OAA5B,EAAP;AACD;;SAEeoL,oBAAoBD,MAAU;AAC5C,SAAOpL,6BAA6B,CAACoL,IAAI,CAACnE,UAAN,CAApC;AACD;;SAEeqE,2BACdF,MACA7xB,MAAU;AAEV,MAAMgyB,KAAK,GAAGrL,8BAA8B,CAACkL,IAAI,CAACnE,UAAN,CAA5C;;AACA,MAAIsE,KAAJ,EAAW;;;AAGT,QACEH,IAAI,CAACrqC,KAAL,CAAW2e,YAAX,CAAwBE,YAAxB,MACC,CAACvF,WAAW,CAACd,IAAD,CAAZ,IACC,CAACgyB,KAAK,CAACvc,iBAAN,CAAwB1V,YAAY,CAACC,IAAD,CAApC,EAA4C6K,OAA5C,EAHL,EAIE;AACA,aAAOmnB,KAAK,CAACtc,QAAN,CAAe1V,IAAf,CAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;SAEeiyB,YAAYJ,MAAU;AACpC,SAAOA,IAAI,CAACK,mBAAL,CAAyBhxC,MAAzB,KAAoC,CAA3C;AACD;;SAEeixC,yBACdN,MACAO,mBAAoC;AAEpCP,MAAI,CAACK,mBAAL,CAAyBltC,IAAzB,CAA8BotC,iBAA9B;AACD;AAED;;;;;;;SAKgBC,4BACdR,MACAO,mBACAE,aAAmB;AAEnB,MAAMC,YAAY,GAAkB,EAApC;;AACA,MAAID,WAAJ,EAAiB;AACf1wC,UAAM,CACJwwC,iBAAiB,IAAI,IADjB,EAEJ,iDAFI,CAAN;AAIA,QAAMpyB,IAAI,GAAG6xB,IAAI,CAACrqC,KAAL,CAAWE,KAAxB;AACAmqC,QAAI,CAACK,mBAAL,CAAyBnQ,OAAzB,CAAiC,sBAAY;AAC3C,UAAMyQ,UAAU,GAAG9M,YAAY,CAAC+M,iBAAb,CAA+BH,WAA/B,EAA4CtyB,IAA5C,CAAnB;;AACA,UAAIwyB,UAAJ,EAAgB;AACdD,oBAAY,CAACvtC,IAAb,CAAkBwtC,UAAlB;AACD;AACF,KALD;AAMD;;AAED,MAAIJ,iBAAJ,EAAuB;AACrB,QAAIM,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIzxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4wC,IAAI,CAACK,mBAAL,CAAyBhxC,MAA7C,EAAqD,EAAED,CAAvD,EAA0D;AACxD,UAAM0xC,QAAQ,GAAGd,IAAI,CAACK,mBAAL,CAAyBjxC,CAAzB,CAAjB;;AACA,UAAI,CAAC0xC,QAAQ,CAAC7W,OAAT,CAAiBsW,iBAAjB,CAAL,EAA0C;AACxCM,iBAAS,CAAC1tC,IAAV,CAAe2tC,QAAf;AACD,OAFD,MAEO,IAAIP,iBAAiB,CAACQ,cAAlB,EAAJ,EAAwC;;AAE7CF,iBAAS,GAAGA,SAAS,CAACG,MAAV,CAAiBhB,IAAI,CAACK,mBAAL,CAAyB1xB,KAAzB,CAA+Bvf,CAAC,GAAG,CAAnC,CAAjB,CAAZ;AACA;AACD;AACF;;AACD4wC,QAAI,CAACK,mBAAL,GAA2BQ,SAA3B;AACD,GAbD,MAaO;AACLb,QAAI,CAACK,mBAAL,GAA2B,EAA3B;AACD;;AACD,SAAOK,YAAP;AACD;AAED;;;;;SAGgBO,mBACdjB,MACA3D,WACAC,aACAhD,qBAAgC;AAEhC,MACE+C,SAAS,CAACjiC,IAAV,KAAmB+2B,aAAa,CAACiB,KAAjC,IACAiK,SAAS,CAACjU,MAAV,CAAiBlU,OAAjB,KAA6B,IAF/B,EAGE;AACAnkB,UAAM,CACJ+kC,8BAA8B,CAACkL,IAAI,CAACnE,UAAN,CAD1B,EAEJ,2DAFI,CAAN;AAIA9rC,UAAM,CACJ6kC,6BAA6B,CAACoL,IAAI,CAACnE,UAAN,CADzB,EAEJ,yDAFI,CAAN;AAID;;AAED,MAAMO,YAAY,GAAG4D,IAAI,CAACnE,UAA1B;AACA,MAAMjlB,MAAM,GAAGulB,2BAA2B,CACxC6D,IAAI,CAACL,UADmC,EAExCvD,YAFwC,EAGxCC,SAHwC,EAIxCC,WAJwC,EAKxChD,mBALwC,CAA1C;AAOA2C,4BAA0B,CAAC+D,IAAI,CAACL,UAAN,EAAkB/oB,MAAM,CAAC2d,SAAzB,CAA1B;AAEAxkC,QAAM,CACJ6mB,MAAM,CAAC2d,SAAP,CAAiBF,WAAjB,CAA6B5B,kBAA7B,MACE,CAAC2J,YAAY,CAAC/H,WAAb,CAAyB5B,kBAAzB,EAFC,EAGJ,yDAHI,CAAN;AAMAuN,MAAI,CAACnE,UAAL,GAAkBjlB,MAAM,CAAC2d,SAAzB;AAEA,SAAO2M,6BAA6B,CAClClB,IADkC,EAElCppB,MAAM,CAACmc,OAF2B,EAGlCnc,MAAM,CAAC2d,SAAP,CAAiBvB,UAAjB,CAA4B6B,OAA5B,EAHkC,EAIlC,IAJkC,CAApC;AAMD;;SAEesM,qBACdnB,MACAnM,cAA+B;AAE/B,MAAMW,SAAS,GAAGwL,IAAI,CAACnE,UAAL,CAAgB7I,UAAlC;AACA,MAAMoO,cAAc,GAAa,EAAjC;;AACA,MAAI,CAAC5M,SAAS,CAACK,OAAV,GAAoBzW,UAApB,EAAL,EAAuC;AACrC,QAAMijB,SAAS,GAAG7M,SAAS,CAACK,OAAV,EAAlB;AACAwM,aAAS,CAAChd,YAAV,CAAuBhE,cAAvB,EAAuC,UAACvzB,GAAD,EAAM8xB,SAAN,EAAe;AACpDwiB,oBAAc,CAACjuC,IAAf,CAAoBs1B,gBAAgB,CAAC37B,GAAD,EAAM8xB,SAAN,CAApC;AACD,KAFD;AAGD;;AACD,MAAI4V,SAAS,CAAC/B,kBAAV,EAAJ,EAAoC;AAClC2O,kBAAc,CAACjuC,IAAf,CAAoBo1B,WAAW,CAACiM,SAAS,CAACK,OAAV,EAAD,CAA/B;AACD;;AACD,SAAOqM,6BAA6B,CAClClB,IADkC,EAElCoB,cAFkC,EAGlC5M,SAAS,CAACK,OAAV,EAHkC,EAIlChB,YAJkC,CAApC;AAMD;;AAED,SAASqN,6BAAT,CACElB,IADF,EAEEjN,OAFF,EAGEC,UAHF,EAIEuN,iBAJF,EAIuC;AAErC,MAAMhN,aAAa,GAAGgN,iBAAiB,GACnC,CAACA,iBAAD,CADmC,GAEnCP,IAAI,CAACK,mBAFT;AAGA,SAAOxN,sCAAsC,CAC3CmN,IAAI,CAACF,eADsC,EAE3C/M,OAF2C,EAG3CC,UAH2C,EAI3CO,aAJ2C,CAA7C;AAMF;ACnRA;;;;;;;;;;;;;;;;;;AA4CA,IAAI+N,sBAAJ;AAEA;;;;;;;;;;;IAUaC,S,6BAAb;AAAA;;;;;;;;AAOW,eAA2B,IAAInvB,GAAJ,EAA3B;AACV,C;;SAEeovB,iCACdpmB,KAAyB;AAEzBrrB,QAAM,CACJ,CAACuxC,sBADG,EAEJ,iDAFI,CAAN;AAIAA,wBAAoB,GAAGlmB,GAAvBkmB;AACD;;AAED,SAASG,gCAAT,GAAyC;AACvC1xC,QAAM,CAACuxC,sBAAD,EAAuB,kCAAvB,CAAN;AACA,SAAOA,sBAAP;AACD;;SAEeI,iBAAiBC,WAAoB;AACnD,SAAOA,SAAS,CAACC,KAAV,CAAgBhgC,IAAhB,KAAyB,CAAhC;AACD;;SAEeigC,wBACdF,WACAtF,WACAC,aACAwF,wBAAmC;AAEnC,MAAM5tB,OAAO,GAAGmoB,SAAS,CAACjU,MAAV,CAAiBlU,OAAjC;;AACA,MAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB,QAAM8rB,IAAI,GAAG2B,SAAS,CAACC,KAAV,CAAgBrxC,GAAhB,CAAoB2jB,OAApB,CAAb;AACAnkB,UAAM,CAACiwC,IAAI,IAAI,IAAT,EAAe,8CAAf,CAAN;AACA,WAAOiB,kBAAkB,CACvBjB,IADuB,EAEvB3D,SAFuB,EAGvBC,WAHuB,EAIvBwF,sBAJuB,CAAzB;AAMD,GATD,MASO;AACL,QAAI5O,MAAM,GAAY,EAAtB;;AADK,gDAGcyO,SAAS,CAACC,KAAV,CAAgBhoB,MAAhB,EAHd;AAAA;;AAAA;AAGL,6DAA6C;AAAA,YAAlComB,KAAkC;AAC3C9M,cAAM,GAAGA,MAAM,CAAC8N,MAAP,CACPC,kBAAkB,CAACjB,KAAD,EAAO3D,SAAP,EAAkBC,WAAlB,EAA+BwF,sBAA/B,CADX,CAAT;AAGD;AAPI;AAAA;AAAA;AAAA;AAAA;;AASL,WAAO5O,MAAP;AACD;AACF;AAED;;;;;;;;;;;SASgB6O,iBACdJ,WACAhsC,OACA2mC,aACAjI,aACA2N,qBAA4B;AAE5B,MAAM9tB,OAAO,GAAGve,KAAK,CAACwe,gBAAtB;AACA,MAAM6rB,IAAI,GAAG2B,SAAS,CAACC,KAAV,CAAgBrxC,GAAhB,CAAoB2jB,OAApB,CAAb;;AACA,MAAI,CAAC8rB,IAAL,EAAW;;AAET,QAAIhN,UAAU,GAAG2H,kCAAkC,CACjD2B,WADiD,EAEjD0F,mBAAmB,GAAG3N,WAAH,GAAiB,IAFa,CAAnD;AAIA,QAAI4N,kBAAkB,GAAG,KAAzB;;AACA,QAAIjP,UAAJ,EAAgB;AACdiP,wBAAkB,GAAG,IAArB;AACD,KAFD,MAEO,IAAI5N,WAAW,YAAY5Q,YAA3B,EAAyC;AAC9CuP,gBAAU,GAAG6H,qCAAqC,CAChDyB,WADgD,EAEhDjI,WAFgD,CAAlD;AAIA4N,wBAAkB,GAAG,KAArB;AACD,KANM,MAMA;AACLjP,gBAAU,GAAGvP,YAAY,CAACzH,UAA1B;AACAimB,wBAAkB,GAAG,KAArB;AACD;;AACD,QAAM1N,SAAS,GAAGH,YAAY,CAC5B,IAAI/B,SAAJ,CAAcW,UAAd,EAA0BiP,kBAA1B,EAA8C,KAA9C,CAD4B,EAE5B,IAAI5P,SAAJ,CAAcgC,WAAd,EAA2B2N,mBAA3B,EAAgD,KAAhD,CAF4B,CAA9B;AAIA,WAAO,IAAIxC,IAAJ,CAAS7pC,KAAT,EAAgB4+B,SAAhB,CAAP;AACD;;AACD,SAAOyL,IAAP;AACD;AAED;;;;;;;;;;;;SAUgBkC,8BACdP,WACAhsC,OACA4qC,mBACAjE,aACAjI,aACA2N,qBAA4B;AAE5B,MAAMhC,IAAI,GAAG+B,gBAAgB,CAC3BJ,SAD2B,EAE3BhsC,KAF2B,EAG3B2mC,WAH2B,EAI3BjI,WAJ2B,EAK3B2N,mBAL2B,CAA7B;;AAOA,MAAI,CAACL,SAAS,CAACC,KAAV,CAAgBvtB,GAAhB,CAAoB1e,KAAK,CAACwe,gBAA1B,CAAL,EAAkD;AAChDwtB,aAAS,CAACC,KAAV,CAAgBvxC,GAAhB,CAAoBsF,KAAK,CAACwe,gBAA1B,EAA4C6rB,IAA5C;AACD,GAX2B;;;AAa5BM,0BAAwB,CAACN,IAAD,EAAOO,iBAAP,CAAxB;AACA,SAAOY,oBAAoB,CAACnB,IAAD,EAAOO,iBAAP,CAA3B;AACD;AAED;;;;;;;;;;;;SAUgB4B,iCACdR,WACAhsC,OACA4qC,mBACAE,aAAmB;AAEnB,MAAMvsB,OAAO,GAAGve,KAAK,CAACwe,gBAAtB;AACA,MAAMiuB,OAAO,GAAmB,EAAhC;AACA,MAAI1B,YAAY,GAAY,EAA5B;AACA,MAAM2B,eAAe,GAAGC,wBAAwB,CAACX,SAAD,CAAhD;;AACA,MAAIztB,OAAO,KAAK,SAAhB,EAA2B;;AAAA,gDAESytB,SAAS,CAACC,KAAV,CAAgBW,OAAhB,EAFT;AAAA;;AAAA;AAEzB,6DAA6D;AAAA;AAAA,YAAjDC,WAAiD;AAAA,YAApCxC,IAAoC;;AAC3DU,oBAAY,GAAGA,YAAY,CAACM,MAAb,CACbR,2BAA2B,CAACR,IAAD,EAAOO,iBAAP,EAA0BE,WAA1B,CADd,CAAf;;AAGA,YAAIL,WAAW,CAACJ,IAAD,CAAf,EAAuB;AACrB2B,mBAAS,CAACC,KAAV,CAAgB9+B,MAAhB,CAAuB0/B,WAAvB,EADqB;;AAIrB,cAAI,CAACxC,IAAI,CAACrqC,KAAL,CAAW2e,YAAX,CAAwBE,YAAxB,EAAL,EAA6C;AAC3C4tB,mBAAO,CAACjvC,IAAR,CAAa6sC,IAAI,CAACrqC,KAAlB;AACD;AACF;AACF;AAdwB;AAAA;AAAA;AAAA;AAAA;AAe1B,GAfD,MAeO;;AAEL,QAAMqqC,MAAI,GAAG2B,SAAS,CAACC,KAAV,CAAgBrxC,GAAhB,CAAoB2jB,OAApB,CAAb;;AACA,QAAI8rB,MAAJ,EAAU;AACRU,kBAAY,GAAGA,YAAY,CAACM,MAAb,CACbR,2BAA2B,CAACR,MAAD,EAAOO,iBAAP,EAA0BE,WAA1B,CADd,CAAf;;AAGA,UAAIL,WAAW,CAACJ,MAAD,CAAf,EAAuB;AACrB2B,iBAAS,CAACC,KAAV,CAAgB9+B,MAAhB,CAAuBoR,OAAvB,EADqB;;AAIrB,YAAI,CAAC8rB,MAAI,CAACrqC,KAAL,CAAW2e,YAAX,CAAwBE,YAAxB,EAAL,EAA6C;AAC3C4tB,iBAAO,CAACjvC,IAAR,CAAa6sC,MAAI,CAACrqC,KAAlB;AACD;AACF;AACF;AACF;;AAED,MAAI0sC,eAAe,IAAI,CAACC,wBAAwB,CAACX,SAAD,CAAhD,EAA6D;;AAE3DS,WAAO,CAACjvC,IAAR,CACE,KAAKsuC,gCAAgC,EAArC,EAAyC9rC,KAAK,CAAC8sC,KAA/C,EAAsD9sC,KAAK,CAACE,KAA5D,CADF;AAGD;;AAED,SAAO;AAAEusC,WAAO,EAAPA,OAAF;AAAWlP,UAAM,EAAEwN;AAAnB,GAAP;AACD;;SAEegC,uBAAuBf,WAAoB;AACzD,MAAM/qB,MAAM,GAAG,EAAf;;AADyD,8CAEtC+qB,SAAS,CAACC,KAAV,CAAgBhoB,MAAhB,EAFsC;AAAA;;AAAA;AAEzD,2DAA6C;AAAA,UAAlComB,IAAkC;;AAC3C,UAAI,CAACA,IAAI,CAACrqC,KAAL,CAAW2e,YAAX,CAAwBE,YAAxB,EAAL,EAA6C;AAC3CoC,cAAM,CAACzjB,IAAP,CAAY6sC,IAAZ;AACD;AACF;AANwD;AAAA;AAAA;AAAA;AAAA;;AAOzD,SAAOppB,MAAP;AACD;AAED;;;;;;SAIgB+rB,gCACdhB,WACAxzB,MAAU;AAEV,MAAIkmB,WAAW,GAAgB,IAA/B;;AAFU,8CAGSsN,SAAS,CAACC,KAAV,CAAgBhoB,MAAhB,EAHT;AAAA;;AAAA;AAGV,2DAA6C;AAAA,UAAlComB,IAAkC;AAC3C3L,iBAAW,GAAGA,WAAW,IAAI6L,0BAA0B,CAACF,IAAD,EAAO7xB,IAAP,CAAvD;AACD;AALS;AAAA;AAAA;AAAA;AAAA;;AAMV,SAAOkmB,WAAP;AACD;;SAEeuO,sBACdjB,WACAhsC,OAAmB;AAEnB,MAAM0E,MAAM,GAAG1E,KAAK,CAAC2e,YAArB;;AACA,MAAIja,MAAM,CAACma,YAAP,EAAJ,EAA2B;AACzB,WAAOquB,wBAAwB,CAAClB,SAAD,CAA/B;AACD,GAFD,MAEO;AACL,QAAMztB,OAAO,GAAGve,KAAK,CAACwe,gBAAtB;AACA,WAAOwtB,SAAS,CAACC,KAAV,CAAgBrxC,GAAhB,CAAoB2jB,OAApB,CAAP;AACD;AACF;;SAEe4uB,4BACdnB,WACAhsC,OAAmB;AAEnB,SAAOitC,qBAAqB,CAACjB,SAAD,EAAYhsC,KAAZ,CAArB,IAA2C,IAAlD;AACD;;SAEe2sC,yBAAyBX,WAAoB;AAC3D,SAAOkB,wBAAwB,CAAClB,SAAD,CAAxB,IAAuC,IAA9C;AACD;;SAEekB,yBAAyBlB,WAAoB;AAAA,8CACxCA,SAAS,CAACC,KAAV,CAAgBhoB,MAAhB,EADwC;AAAA;;AAAA;AAC3D,2DAA6C;AAAA,UAAlComB,IAAkC;;AAC3C,UAAIA,IAAI,CAACrqC,KAAL,CAAW2e,YAAX,CAAwBE,YAAxB,EAAJ,EAA4C;AAC1C,eAAOwrB,IAAP;AACD;AACF;AAL0D;AAAA;AAAA;AAAA;AAAA;;AAM3D,SAAO,IAAP;AACF;ACxTA;;;;;;;;;;;;;;;;;;AAyEA,IAAIsB,oBAAJ;;yCAGElmB,KAAyB;AAEzBrrB,QAAM,CACJ,CAACuxC,oBADG,EAEJ,iDAFI,CAAN;AAIAA,sBAAoB,GAAGlmB,GAAvB;AACD;;AAED,SAAS2nB,+BAAT,GAAwC;AACtChzC,QAAM,CAACuxC,oBAAD,EAAuB,kCAAvB,CAAN;AACA,SAAOA,oBAAP;AACD;AAaD;;;;;AAGA,IAAI0B,qBAAqB,GAAG,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;IAqBaC,Q;;;;;AAkBX,kBAAmBC,eAAnB,EAAkD;AAAA;;AAA/B;;;;;AAdnB,wBAA2C,IAAIjO,aAAJ,CAA6B,IAA7B,CAA3C;;;;;AAKA,2BAA+ByB,YAAY,EAA3C;AAES,uBAAqC,IAAItkB,GAAJ,EAArC;AACA,uBAAqC,IAAIA,GAAJ,EAArC;AAM6C,C;AAGxD;;;;;;;SAKgB+wB,2BACdC,UACAj1B,MACAk1B,SACAxL,SACA1mB,SAAiB;;AAGjBymB,uBAAqB,CACnBwL,QAAQ,CAACE,iBADU,EAEnBn1B,IAFmB,EAGnBk1B,OAHmB,EAInBxL,OAJmB,EAKnB1mB,OALmB,CAArB;;AAQA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,EAAP;AACD,GAFD,MAEO;AACL,WAAOoyB,mCAAmC,CACxCH,QADwC,EAExC,IAAInR,SAAJ,CAAcb,sBAAsB,EAApC,EAAwCjjB,IAAxC,EAA8Ck1B,OAA9C,CAFwC,CAA1C;AAID;AACF;AAED;;;;;;;SAKgBG,uBACdJ,UACAj1B,MACA+pB,iBACAL,SAAe;;AAGfI,mBAAiB,CAACmL,QAAQ,CAACE,iBAAV,EAA6Bn1B,IAA7B,EAAmC+pB,eAAnC,EAAoDL,OAApD,CAAjB;AAEA,MAAM4L,UAAU,GAAGxO,aAAa,CAACyO,UAAd,CAAyBxL,eAAzB,CAAnB;AAEA,SAAOqL,mCAAmC,CACxCH,QADwC,EAExC,IAAIjR,KAAJ,CAAUf,sBAAsB,EAAhC,EAAoCjjB,IAApC,EAA0Cs1B,UAA1C,CAFwC,CAA1C;AAID;AAED;;;;;;;;SAMgBE,qBACdP,UACAvL,SACuB;AAAA,MAAvBjG,MAAuB,uEAAL,KAAK;AAEvB,MAAMvwB,KAAK,GAAG82B,iBAAiB,CAACiL,QAAQ,CAACE,iBAAV,EAA6BzL,OAA7B,CAA/B;AACA,MAAM+L,gBAAgB,GAAGvL,oBAAoB,CAC3C+K,QAAQ,CAACE,iBADkC,EAE3CzL,OAF2C,CAA7C;;AAIA,MAAI,CAAC+L,gBAAL,EAAuB;AACrB,WAAO,EAAP;AACD,GAFD,MAEO;AACL,QAAIjS,YAAY,GAAG,IAAIsD,aAAJ,CAA2B,IAA3B,CAAnB;;AACA,QAAI5zB,KAAK,CAAC2lB,IAAN,IAAc,IAAlB,EAAwB;;AAEtB2K,kBAAY,GAAGA,YAAY,CAACthC,GAAb,CAAiB4d,YAAY,EAA7B,EAAiC,IAAjC,CAAf;AACD,KAHD,MAGO;AACLta,UAAI,CAAC0N,KAAK,CAACklB,QAAP,EAAiB,UAACpa,UAAD,EAAmB;AACtCwlB,oBAAY,GAAGA,YAAY,CAACthC,GAAb,CAAiB,IAAIqd,IAAJ,CAASvB,UAAT,CAAjB,EAAuC,IAAvC,CAAf;AACD,OAFG,CAAJ;AAGD;;AACD,WAAOo3B,mCAAmC,CACxCH,QADwC,EAExC,IAAI1R,YAAJ,CAAiBrwB,KAAK,CAAC8M,IAAvB,EAA6BwjB,YAA7B,EAA2CC,MAA3C,CAFwC,CAA1C;AAID;AACF;AAED;;;;;;;SAKgBiS,6BACdT,UACAj1B,MACAk1B,SAAa;AAEb,SAAOE,mCAAmC,CACxCH,QADwC,EAExC,IAAInR,SAAJ,CAAcT,wBAAwB,EAAtC,EAA0CrjB,IAA1C,EAAgDk1B,OAAhD,CAFwC,CAA1C;AAID;AAED;;;;;;;SAKgBS,yBACdV,UACAj1B,MACA+pB,iBAAsC;AAEtC,MAAMuL,UAAU,GAAGxO,aAAa,CAACyO,UAAd,CAAyBxL,eAAzB,CAAnB;AAEA,SAAOqL,mCAAmC,CACxCH,QADwC,EAExC,IAAIjR,KAAJ,CAAUX,wBAAwB,EAAlC,EAAsCrjB,IAAtC,EAA4Cs1B,UAA5C,CAFwC,CAA1C;AAID;AAED;;;;;;;SAKgBM,4BACdX,UACAj1B,MAAU;AAEV,SAAOo1B,mCAAmC,CACxCH,QADwC,EAExC,IAAIrR,cAAJ,CAAmBP,wBAAwB,EAA3C,EAA+CrjB,IAA/C,CAFwC,CAA1C;AAID;AAED;;;;;;;SAKgB61B,kCACdZ,UACAj1B,MACA8F,KAAW;AAEX,MAAMgwB,QAAQ,GAAGC,uBAAuB,CAACd,QAAD,EAAWnvB,GAAX,CAAxC;;AACA,MAAIgwB,QAAJ,EAAc;AACZ,QAAMpxB,CAAC,GAAGsxB,sBAAsB,CAACF,QAAD,CAAhC;AACA,QAAMG,SAAS,GAAGvxB,CAAC,CAAC1E,IAApB;AAAA,QACE+F,OAAO,GAAGrB,CAAC,CAACqB,OADd;AAEA,QAAMghB,YAAY,GAAGhmB,eAAe,CAACk1B,SAAD,EAAYj2B,IAAZ,CAApC;AACA,QAAMk2B,EAAE,GAAG,IAAItS,cAAJ,CACTN,mCAAmC,CAACvd,OAAD,CAD1B,EAETghB,YAFS,CAAX;AAIA,WAAOoP,6BAA6B,CAAClB,QAAD,EAAWgB,SAAX,EAAsBC,EAAtB,CAApC;AACD,GAVD,MAUO;;AAEL,WAAO,EAAP;AACD;AACF;AAED;;;;;;;;;;;;SAUgBE,gCACdnB,UACAztC,OACA4qC,mBACAE,aAAmB;;AAGnB,MAAMtyB,IAAI,GAAGxY,KAAK,CAACE,KAAnB;AACA,MAAM2uC,cAAc,GAAGpB,QAAQ,CAACqB,cAAT,CAAwBl0C,GAAxB,CAA4B4d,IAA5B,CAAvB;AACA,MAAIuyB,YAAY,GAAY,EAA5B,CALmB;;;;AASnB,MACE8D,cAAc,KACb7uC,KAAK,CAACwe,gBAAN,KAA2B,SAA3B,IACC2uB,2BAA2B,CAAC0B,cAAD,EAAiB7uC,KAAjB,CAFf,CADhB,EAIE;AACA,QAAM+uC,gBAAgB,GAAGvC,gCAAgC,CACvDqC,cADuD,EAEvD7uC,KAFuD,EAGvD4qC,iBAHuD,EAIvDE,WAJuD,CAAzD;;AAMA,QAAIiB,gBAAgB,CAAC8C,cAAD,CAApB,EAAsC;AACpCpB,cAAQ,CAACqB,cAAT,GAA0BrB,QAAQ,CAACqB,cAAT,CAAwBn0C,MAAxB,CAA+B6d,IAA/B,CAA1B;AACD;;AACD,QAAMi0B,OAAO,GAAGsC,gBAAgB,CAACtC,OAAjC;AACA1B,gBAAY,GAAGgE,gBAAgB,CAACxR,MAAhC,CAXA;;;;;;;AAkBA,QAAMyR,eAAe,GACnB,CAAC,CAAD,KACAvC,OAAO,CAAC9J,SAAR,CAAkB,eAAK;AACrB,aAAO3iC,KAAK,CAAC2e,YAAN,CAAmBE,YAAnB,EAAP;AACD,KAFD,CAFF;AAKA,QAAMowB,OAAO,GAAGxB,QAAQ,CAACqB,cAAT,CAAwBI,UAAxB,CACd12B,IADc,EAEd,UAAC+mB,YAAD,EAAe4P,eAAf;AAAA,aACExC,wBAAwB,CAACwC,eAAD,CAD1B;AAAA,KAFc,CAAhB;;AAMA,QAAIH,eAAe,IAAI,CAACC,OAAxB,EAAiC;AAC/B,UAAM9S,OAAO,GAAGsR,QAAQ,CAACqB,cAAT,CAAwB3S,OAAxB,CAAgC3jB,IAAhC,CAAhB,CAD+B;;;AAI/B,UAAI,CAAC2jB,OAAO,CAAC9Y,OAAR,EAAL,EAAwB;;AAEtB,YAAM+rB,QAAQ,GAAGC,uCAAuC,CAAClT,OAAD,CAAxD,CAFsB;;AAKtB,aAAK,IAAI1iC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG21C,QAAQ,CAAC11C,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACxC,cAAM4wC,IAAI,GAAG+E,QAAQ,CAAC31C,CAAD,CAArB;AAAA,cACE61C,QAAQ,GAAGjF,IAAI,CAACrqC,KADlB;AAEA,cAAM6B,QAAQ,GAAG0tC,8BAA8B,CAAC9B,QAAD,EAAWpD,IAAX,CAA/C;AACAoD,kBAAQ,CAACF,eAAT,CAAyBiC,cAAzB,CACEC,0BAA0B,CAACH,QAAD,CAD5B,EAEEI,oBAAoB,CAACjC,QAAD,EAAW6B,QAAX,CAFtB,EAGEztC,QAAQ,CAACkd,MAHX,EAIEld,QAAQ,CAAC4U,UAJX;AAMD;AAGF;AACF,KApDD;;;;;AAwDA,QAAI,CAACw4B,OAAD,IAAYxC,OAAO,CAAC/yC,MAAR,GAAiB,CAA7B,IAAkC,CAACoxC,WAAvC,EAAoD;;;AAGlD,UAAIkE,eAAJ,EAAqB;;AAEnB,YAAMW,UAAU,GAAkB,IAAlC;AACAlC,gBAAQ,CAACF,eAAT,CAAyBqC,aAAzB,CACEH,0BAA0B,CAACzvC,KAAD,CAD5B,EAEE2vC,UAFF;AAID,OAPD,MAOO;AACLlD,eAAO,CAAClS,OAAR,CAAgB,UAACsV,aAAD,EAA4B;AAC1C,cAAMC,WAAW,GAAGrC,QAAQ,CAACsC,aAAT,CAAuBn1C,GAAvB,CAClBo1C,qBAAqB,CAACH,aAAD,CADH,CAApB;AAGApC,kBAAQ,CAACF,eAAT,CAAyBqC,aAAzB,CACEH,0BAA0B,CAACI,aAAD,CAD5B,EAEEC,WAFF;AAID,SARD;AASD;AACF,KA7ED;;;AA+EAG,uBAAmB,CAACxC,QAAD,EAAWhB,OAAX,CAAnB;AAGD;;AACD,SAAO1B,YAAP;AACD;AAED;;;;;;;SAKgBmF,kCACdzC,UACAj1B,MACA6Y,MACA/S,KAAW;AAEX,MAAMgwB,QAAQ,GAAGC,uBAAuB,CAACd,QAAD,EAAWnvB,GAAX,CAAxC;;AACA,MAAIgwB,QAAQ,IAAI,IAAhB,EAAsB;AACpB,QAAMpxB,CAAC,GAAGsxB,sBAAsB,CAACF,QAAD,CAAhC;AACA,QAAMG,SAAS,GAAGvxB,CAAC,CAAC1E,IAApB;AAAA,QACE+F,OAAO,GAAGrB,CAAC,CAACqB,OADd;AAEA,QAAMghB,YAAY,GAAGhmB,eAAe,CAACk1B,SAAD,EAAYj2B,IAAZ,CAApC;AACA,QAAMk2B,EAAE,GAAG,IAAIpS,SAAJ,CACTR,mCAAmC,CAACvd,OAAD,CAD1B,EAETghB,YAFS,EAGTlO,IAHS,CAAX;AAKA,WAAOsd,6BAA6B,CAAClB,QAAD,EAAWgB,SAAX,EAAsBC,EAAtB,CAApC;AACD,GAXD,MAWO;;AAEL,WAAO,EAAP;AACD;AACF;AAED;;;;;;;SAKgByB,8BACd1C,UACAj1B,MACA+pB,iBACAjkB,KAAW;AAEX,MAAMgwB,QAAQ,GAAGC,uBAAuB,CAACd,QAAD,EAAWnvB,GAAX,CAAxC;;AACA,MAAIgwB,QAAJ,EAAc;AACZ,QAAMpxB,CAAC,GAAGsxB,sBAAsB,CAACF,QAAD,CAAhC;AACA,QAAMG,SAAS,GAAGvxB,CAAC,CAAC1E,IAApB;AAAA,QACE+F,OAAO,GAAGrB,CAAC,CAACqB,OADd;AAEA,QAAMghB,YAAY,GAAGhmB,eAAe,CAACk1B,SAAD,EAAYj2B,IAAZ,CAApC;AACA,QAAMs1B,UAAU,GAAGxO,aAAa,CAACyO,UAAd,CAAyBxL,eAAzB,CAAnB;AACA,QAAMmM,EAAE,GAAG,IAAIlS,KAAJ,CACTV,mCAAmC,CAACvd,OAAD,CAD1B,EAETghB,YAFS,EAGTuO,UAHS,CAAX;AAKA,WAAOa,6BAA6B,CAAClB,QAAD,EAAWgB,SAAX,EAAsBC,EAAtB,CAApC;AACD,GAZD,MAYO;;AAEL,WAAO,EAAP;AACD;AACF;AAED;;;;;;;SAKgB0B,6BACd3C,UACAztC,OACA4qC,mBAAoC;AAEpC,MAAMpyB,IAAI,GAAGxY,KAAK,CAACE,KAAnB;AAEA,MAAIw+B,WAAW,GAAgB,IAA/B;AACA,MAAI2R,wBAAwB,GAAG,KAA/B,CALoC;;;AAQpC5C,UAAQ,CAACqB,cAAT,CAAwBwB,aAAxB,CAAsC93B,IAAtC,EAA4C,UAAC+3B,eAAD,EAAkBC,EAAlB,EAAoB;AAC9D,QAAMjR,YAAY,GAAGhmB,eAAe,CAACg3B,eAAD,EAAkB/3B,IAAlB,CAApC;AACAkmB,eAAW,GACTA,WAAW,IAAIsO,+BAA+B,CAACwD,EAAD,EAAKjR,YAAL,CADhD;AAEA8Q,4BAAwB,GACtBA,wBAAwB,IAAI1D,wBAAwB,CAAC6D,EAAD,CADtD;AAED,GAND;AAOA,MAAIxE,SAAS,GAAGyB,QAAQ,CAACqB,cAAT,CAAwBl0C,GAAxB,CAA4B4d,IAA5B,CAAhB;;AACA,MAAI,CAACwzB,SAAL,EAAgB;AACdA,aAAS,GAAG,IAAIJ,SAAJ,EAAZ;AACA6B,YAAQ,CAACqB,cAAT,GAA0BrB,QAAQ,CAACqB,cAAT,CAAwBp0C,GAAxB,CAA4B8d,IAA5B,EAAkCwzB,SAAlC,CAA1B;AACD,GAHD,MAGO;AACLqE,4BAAwB,GACtBA,wBAAwB,IAAI1D,wBAAwB,CAACX,SAAD,CADtD;AAEAtN,eAAW,GACTA,WAAW,IAAIsO,+BAA+B,CAAChB,SAAD,EAAY1zB,YAAY,EAAxB,CADhD;AAED;;AAED,MAAI+zB,mBAAJ;;AACA,MAAI3N,WAAW,IAAI,IAAnB,EAAyB;AACvB2N,uBAAmB,GAAG,IAAtB;AACD,GAFD,MAEO;AACLA,uBAAmB,GAAG,KAAtB;AACA3N,eAAW,GAAG5Q,YAAY,CAACzH,UAA3B;AACA,QAAM8V,OAAO,GAAGsR,QAAQ,CAACqB,cAAT,CAAwB3S,OAAxB,CAAgC3jB,IAAhC,CAAhB;AACA2jB,WAAO,CAACsU,YAAR,CAAqB,UAACznB,SAAD,EAAY0nB,cAAZ,EAA0B;AAC7C,UAAM9J,aAAa,GAAGoG,+BAA+B,CACnD0D,cADmD,EAEnDp4B,YAAY,EAFuC,CAArD;;AAIA,UAAIsuB,aAAJ,EAAmB;AACjBlI,mBAAW,GAAGA,WAAW,CAACtV,oBAAZ,CACZJ,SADY,EAEZ4d,aAFY,CAAd;AAID;AACF,KAXD;AAYD;;AAED,MAAM+J,iBAAiB,GAAGxD,2BAA2B,CAACnB,SAAD,EAAYhsC,KAAZ,CAArD;;AACA,MAAI,CAAC2wC,iBAAD,IAAsB,CAAC3wC,KAAK,CAAC2e,YAAN,CAAmBE,YAAnB,EAA3B,EAA8D;;AAE5D,QAAMyvB,QAAQ,GAAG0B,qBAAqB,CAAChwC,KAAD,CAAtC;AACA5F,UAAM,CACJ,CAACqzC,QAAQ,CAACsC,aAAT,CAAuBrxB,GAAvB,CAA2B4vB,QAA3B,CADG,EAEJ,wCAFI,CAAN;AAIA,QAAMhwB,GAAG,GAAGsyB,wBAAwB,EAApC;AACAnD,YAAQ,CAACsC,aAAT,CAAuBr1C,GAAvB,CAA2B4zC,QAA3B,EAAqChwB,GAArC;AACAmvB,YAAQ,CAACoD,aAAT,CAAuBn2C,GAAvB,CAA2B4jB,GAA3B,EAAgCgwB,QAAhC;AACD;;AACD,MAAM3H,WAAW,GAAG5E,oBAAoB,CAAC0L,QAAQ,CAACE,iBAAV,EAA6Bn1B,IAA7B,CAAxC;AACA,MAAI+kB,MAAM,GAAGgP,6BAA6B,CACxCP,SADwC,EAExChsC,KAFwC,EAGxC4qC,iBAHwC,EAIxCjE,WAJwC,EAKxCjI,WALwC,EAMxC2N,mBANwC,CAA1C;;AAQA,MAAI,CAACsE,iBAAD,IAAsB,CAACN,wBAA3B,EAAqD;AACnD,QAAMhG,IAAI,GAAG4C,qBAAqB,CAACjB,SAAD,EAAYhsC,KAAZ,CAAlC;AACAu9B,UAAM,GAAGA,MAAM,CAAC8N,MAAP,CAAcyF,sBAAsB,CAACrD,QAAD,EAAWztC,KAAX,EAAkBqqC,IAAlB,CAApC,CAAT;AACD;;AACD,SAAO9M,MAAP;AACD;AAED;;;;;;;;;;;;;SAWgBwT,+BACdtD,UACAj1B,MACAorB,mBAA4B;AAE5B,MAAMoN,iBAAiB,GAAG,IAA1B;AACA,MAAMnP,SAAS,GAAG4L,QAAQ,CAACE,iBAA3B;AACA,MAAMjP,WAAW,GAAG+O,QAAQ,CAACqB,cAAT,CAAwBI,UAAxB,CAClB12B,IADkB,EAElB,UAACwnB,SAAD,EAAYgM,SAAZ,EAAqB;AACnB,QAAMzM,YAAY,GAAGhmB,eAAe,CAACymB,SAAD,EAAYxnB,IAAZ,CAApC;AACA,QAAMkmB,WAAW,GAAGsO,+BAA+B,CACjDhB,SADiD,EAEjDzM,YAFiD,CAAnD;;AAIA,QAAIb,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;AACF,GAXiB,CAApB;AAaA,SAAO+E,+BAA+B,CACpC5B,SADoC,EAEpCrpB,IAFoC,EAGpCkmB,WAHoC,EAIpCkF,iBAJoC,EAKpCoN,iBALoC,CAAtC;AAOD;;SAEeC,uBACdxD,UACAztC,OAAmB;AAEnB,MAAMwY,IAAI,GAAGxY,KAAK,CAACE,KAAnB;AACA,MAAIw+B,WAAW,GAAgB,IAA/B,CAHmB;;;AAMnB+O,UAAQ,CAACqB,cAAT,CAAwBwB,aAAxB,CAAsC93B,IAAtC,EAA4C,UAAC+3B,eAAD,EAAkBC,EAAlB,EAAoB;AAC9D,QAAMjR,YAAY,GAAGhmB,eAAe,CAACg3B,eAAD,EAAkB/3B,IAAlB,CAApC;AACAkmB,eAAW,GACTA,WAAW,IAAIsO,+BAA+B,CAACwD,EAAD,EAAKjR,YAAL,CADhD;AAED,GAJD;AAKA,MAAIyM,SAAS,GAAGyB,QAAQ,CAACqB,cAAT,CAAwBl0C,GAAxB,CAA4B4d,IAA5B,CAAhB;;AACA,MAAI,CAACwzB,SAAL,EAAgB;AACdA,aAAS,GAAG,IAAIJ,SAAJ,EAAZ;AACA6B,YAAQ,CAACqB,cAAT,GAA0BrB,QAAQ,CAACqB,cAAT,CAAwBp0C,GAAxB,CAA4B8d,IAA5B,EAAkCwzB,SAAlC,CAA1B;AACD,GAHD,MAGO;AACLtN,eAAW,GACTA,WAAW,IAAIsO,+BAA+B,CAAChB,SAAD,EAAY1zB,YAAY,EAAxB,CADhD;AAED;;AACD,MAAM+zB,mBAAmB,GAAG3N,WAAW,IAAI,IAA3C;AACA,MAAMwS,eAAe,GAAqB7E,mBAAmB,GACzD,IAAI3P,SAAJ,CAAcgC,WAAd,EAA2B,IAA3B,EAAiC,KAAjC,CADyD,GAEzD,IAFJ;AAGA,MAAMiI,WAAW,GAAwB5E,oBAAoB,CAC3D0L,QAAQ,CAACE,iBADkD,EAE3D3tC,KAAK,CAACE,KAFqD,CAA7D;AAIA,MAAMmqC,IAAI,GAAS+B,gBAAgB,CACjCJ,SADiC,EAEjChsC,KAFiC,EAGjC2mC,WAHiC,EAIjC0F,mBAAmB,GAAG6E,eAAe,CAAChS,OAAhB,EAAH,GAA+BpR,YAAY,CAACzH,UAJ9B,EAKjCgmB,mBALiC,CAAnC;AAOA,SAAO/B,mBAAmB,CAACD,IAAD,CAA1B;AACD;AAED;;;;;;;;;;;;;;;AAaA,SAASuD,mCAAT,CACEH,QADF,EAEE/G,SAFF,EAEsB;AAEpB,SAAOyK,6BAA6B,CAClCzK,SADkC,EAElC+G,QAAQ,CAACqB,cAFyB;;AAGjB,MAHiB,EAIlC/M,oBAAoB,CAAC0L,QAAQ,CAACE,iBAAV,EAA6Br1B,YAAY,EAAzC,CAJc,CAApC;AAMD;AAED;;;;;AAGA,SAAS64B,6BAAT,CACEzK,SADF,EAEE0K,aAFF,EAGE1S,WAHF,EAIEiI,WAJF,EAI2B;AAEzB,MAAIrtB,WAAW,CAACotB,SAAS,CAACluB,IAAX,CAAf,EAAiC;AAC/B,WAAO64B,wCAAwC,CAC7C3K,SAD6C,EAE7C0K,aAF6C,EAG7C1S,WAH6C,EAI7CiI,WAJ6C,CAA/C;AAMD,GAPD,MAOO;AACL,QAAMqF,SAAS,GAAGoF,aAAa,CAACx2C,GAAd,CAAkB0d,YAAY,EAA9B,CAAlB,CADK;;AAIL,QAAIomB,WAAW,IAAI,IAAf,IAAuBsN,SAAS,IAAI,IAAxC,EAA8C;AAC5CtN,iBAAW,GAAGsO,+BAA+B,CAAChB,SAAD,EAAY1zB,YAAY,EAAxB,CAA7C;AACD;;AAED,QAAIilB,MAAM,GAAY,EAAtB;AACA,QAAMvU,SAAS,GAAGzQ,YAAY,CAACmuB,SAAS,CAACluB,IAAX,CAA9B;AACA,QAAM84B,cAAc,GAAG5K,SAAS,CAAC6K,iBAAV,CAA4BvoB,SAA5B,CAAvB;AACA,QAAMiD,SAAS,GAAGmlB,aAAa,CAACxgB,QAAd,CAAuBh2B,GAAvB,CAA2BouB,SAA3B,CAAlB;;AACA,QAAIiD,SAAS,IAAIqlB,cAAjB,EAAiC;AAC/B,UAAME,gBAAgB,GAAG9S,WAAW,GAChCA,WAAW,CAACzQ,iBAAZ,CAA8BjF,SAA9B,CADgC,GAEhC,IAFJ;AAGA,UAAMyoB,gBAAgB,GAAGjM,iBAAiB,CAACmB,WAAD,EAAc3d,SAAd,CAA1C;AACAuU,YAAM,GAAGA,MAAM,CAAC8N,MAAP,CACP8F,6BAA6B,CAC3BG,cAD2B,EAE3BrlB,SAF2B,EAG3BulB,gBAH2B,EAI3BC,gBAJ2B,CADtB,CAAT;AAQD;;AAED,QAAIzF,SAAJ,EAAe;AACbzO,YAAM,GAAGA,MAAM,CAAC8N,MAAP,CACPa,uBAAuB,CAACF,SAAD,EAAYtF,SAAZ,EAAuBC,WAAvB,EAAoCjI,WAApC,CADhB,CAAT;AAGD;;AAED,WAAOnB,MAAP;AACD;AACF;AAED;;;;;AAGA,SAAS8T,wCAAT,CACE3K,SADF,EAEE0K,aAFF,EAGE1S,WAHF,EAIEiI,WAJF,EAI2B;AAEzB,MAAMqF,SAAS,GAAGoF,aAAa,CAACx2C,GAAd,CAAkB0d,YAAY,EAA9B,CAAlB,CAFyB;;AAKzB,MAAIomB,WAAW,IAAI,IAAf,IAAuBsN,SAAS,IAAI,IAAxC,EAA8C;AAC5CtN,eAAW,GAAGsO,+BAA+B,CAAChB,SAAD,EAAY1zB,YAAY,EAAxB,CAA7C;AACD;;AAED,MAAIilB,MAAM,GAAY,EAAtB;AACA6T,eAAa,CAACxgB,QAAd,CAAuBrK,gBAAvB,CAAwC,UAACyC,SAAD,EAAYiD,SAAZ,EAAqB;AAC3D,QAAMulB,gBAAgB,GAAG9S,WAAW,GAChCA,WAAW,CAACzQ,iBAAZ,CAA8BjF,SAA9B,CADgC,GAEhC,IAFJ;AAGA,QAAMyoB,gBAAgB,GAAGjM,iBAAiB,CAACmB,WAAD,EAAc3d,SAAd,CAA1C;AACA,QAAMsoB,cAAc,GAAG5K,SAAS,CAAC6K,iBAAV,CAA4BvoB,SAA5B,CAAvB;;AACA,QAAIsoB,cAAJ,EAAoB;AAClB/T,YAAM,GAAGA,MAAM,CAAC8N,MAAP,CACPgG,wCAAwC,CACtCC,cADsC,EAEtCrlB,SAFsC,EAGtCulB,gBAHsC,EAItCC,gBAJsC,CADjC,CAAT;AAQD;AACF,GAhBD;;AAkBA,MAAIzF,SAAJ,EAAe;AACbzO,UAAM,GAAGA,MAAM,CAAC8N,MAAP,CACPa,uBAAuB,CAACF,SAAD,EAAYtF,SAAZ,EAAuBC,WAAvB,EAAoCjI,WAApC,CADhB,CAAT;AAGD;;AAED,SAAOnB,MAAP;AACD;;AAED,SAASgS,8BAAT,CACE9B,QADF,EAEEpD,IAFF,EAEY;AAEV,MAAMrqC,KAAK,GAAGqqC,IAAI,CAACrqC,KAAnB;AACA,MAAMse,GAAG,GAAGoxB,oBAAoB,CAACjC,QAAD,EAAWztC,KAAX,CAAhC;AAEA,SAAO;AACL+e,UAAM,EAAE;AACN,UAAMyrB,KAAK,GAAGJ,kBAAkB,CAACC,IAAD,CAAlB,IAA4Bvc,YAAY,CAACzH,UAAvD;AACA,aAAOmkB,KAAK,CAAC9zB,IAAN,EAAP;AACD,KAJI;AAKLD,cAAU,EAAE,oBAACyI,MAAD,EAAe;AACzB,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB,YAAIZ,GAAJ,EAAS;AACP,iBAAO+vB,iCAAiC,CAACZ,QAAD,EAAWztC,KAAK,CAACE,KAAjB,EAAwBoe,GAAxB,CAAxC;AACD,SAFD,MAEO;AACL,iBAAO8vB,2BAA2B,CAACX,QAAD,EAAWztC,KAAK,CAACE,KAAjB,CAAlC;AACD;AACF,OAND,MAMO;;;AAGL,YAAMlF,OAAK,GAAG8E,kBAAkB,CAACof,MAAD,EAASlf,KAAT,CAAhC;;AACA,eAAO4uC,+BAA+B,CACpCnB,QADoC,EAEpCztC,KAFoC;;AAGd,YAHc,EAIpChF,OAJoC,CAAtC;AAMD;AACF;AAvBI,GAAP;AAyBD;AAED;;;;;AAGA,SAAS00C,oBAAT,CACEjC,QADF,EAEEztC,KAFF,EAEqB;AAEnB,MAAMsuC,QAAQ,GAAG0B,qBAAqB,CAAChwC,KAAD,CAAtC;AACA,SAAOytC,QAAQ,CAACsC,aAAT,CAAuBn1C,GAAvB,CAA2B0zC,QAA3B,CAAP;AACD;AAED;;;;;AAGA,SAAS0B,qBAAT,CAA+BhwC,KAA/B,EAAkD;AAChD,SAAOA,KAAK,CAACE,KAAN,CAAYpI,QAAZ,KAAyB,GAAzB,GAA+BkI,KAAK,CAACwe,gBAA5C;AACD;AAED;;;;;AAGA,SAAS+vB,uBAAT,CACEd,QADF,EAEEnvB,GAFF,EAEa;AAEX,SAAOmvB,QAAQ,CAACoD,aAAT,CAAuBj2C,GAAvB,CAA2B0jB,GAA3B,CAAP;AACD;AAED;;;;;AAGA,SAASkwB,sBAAT,CAAgCF,QAAhC,EAAgD;AAI9C,MAAMoD,UAAU,GAAGpD,QAAQ,CAAC/yC,OAAT,CAAiB,GAAjB,CAAnB;AACAnB,QAAM,CACJs3C,UAAU,KAAK,CAAC,CAAhB,IAAqBA,UAAU,GAAGpD,QAAQ,CAAC50C,MAAT,GAAkB,CADhD,EAEJ,eAFI,CAAN;AAIA,SAAO;AACL6kB,WAAO,EAAE+vB,QAAQ,CAAChvC,MAAT,CAAgBoyC,UAAU,GAAG,CAA7B,CADJ;AAELl5B,QAAI,EAAE,IAAIT,IAAJ,CAASu2B,QAAQ,CAAChvC,MAAT,CAAgB,CAAhB,EAAmBoyC,UAAnB,CAAT;AAFD,GAAP;AAID;AAED;;;;;AAGA,SAAS/C,6BAAT,CACElB,QADF,EAEEgB,SAFF,EAGE/H,SAHF,EAGsB;AAEpB,MAAMsF,SAAS,GAAGyB,QAAQ,CAACqB,cAAT,CAAwBl0C,GAAxB,CAA4B6zC,SAA5B,CAAlB;AACAr0C,QAAM,CAAC4xC,SAAD,EAAY,sDAAZ,CAAN;AACA,MAAMrF,WAAW,GAAG5E,oBAAoB,CACtC0L,QAAQ,CAACE,iBAD6B,EAEtCc,SAFsC,CAAxC;AAIA,SAAOvC,uBAAuB,CAACF,SAAD,EAAYtF,SAAZ,EAAuBC,WAAvB,EAAoC,IAApC,CAA9B;AACD;AAED;;;;;;AAIA,SAAS0I,uCAAT,CACElT,OADF,EACmC;AAEjC,SAAOA,OAAO,CAACwV,IAAR,CAAqB,UAACpS,YAAD,EAAeqS,mBAAf,EAAoCC,QAApC,EAA4C;AACtE,QAAID,mBAAmB,IAAIjF,wBAAwB,CAACiF,mBAAD,CAAnD,EAA0E;AACxE,UAAME,YAAY,GAAG5E,wBAAwB,CAAC0E,mBAAD,CAA7C;AACA,aAAO,CAACE,YAAD,CAAP;AACD,KAHD,MAGO;;AAEL,UAAI7F,KAAK,GAAW,EAApB;;AACA,UAAI2F,mBAAJ,EAAyB;AACvB3F,aAAK,GAAGc,sBAAsB,CAAC6E,mBAAD,CAA9B;AACD;;AACD5zC,UAAI,CAAC6zC,QAAD,EAAW,UAACE,IAAD,EAAeC,UAAf,EAAiC;AAC9C/F,aAAK,GAAGA,KAAK,CAACZ,MAAN,CAAa2G,UAAb,CAAR;AACD,OAFG,CAAJ;AAGA,aAAO/F,KAAP;AACD;AACF,GAfM,CAAP;AAgBD;AAED;;;;;;;AAKA,SAASwD,0BAAT,CAAoCzvC,KAApC,EAAuD;AACrD,MAAIA,KAAK,CAAC2e,YAAN,CAAmBE,YAAnB,MAAqC,CAAC7e,KAAK,CAAC2e,YAAN,CAAmBC,SAAnB,EAA1C,EAA0E;;;;AAIxE,WAAO,KAAKwuB,+BAA+B,EAApC,EAAwCptC,KAAK,CAAC8sC,KAA9C,EAAqD9sC,KAAK,CAACE,KAA3D,CAAP;AACD,GALD,MAKO;AACL,WAAOF,KAAP;AACD;AACF;;AAED,SAASiwC,mBAAT,CAA6BxC,QAA7B,EAAiDvpB,OAAjD,EAAwE;AACtE,OAAK,IAAI9J,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8J,OAAO,CAACxqB,MAA5B,EAAoC,EAAE0gB,CAAtC,EAAyC;AACvC,QAAM63B,YAAY,GAAG/tB,OAAO,CAAC9J,CAAD,CAA5B;;AACA,QAAI,CAAC63B,YAAY,CAACtzB,YAAb,CAA0BE,YAA1B,EAAL,EAA+C;;AAE7C,UAAMqzB,eAAe,GAAGlC,qBAAqB,CAACiC,YAAD,CAA7C;AACA,UAAME,eAAe,GAAG1E,QAAQ,CAACsC,aAAT,CAAuBn1C,GAAvB,CAA2Bs3C,eAA3B,CAAxB;AACAzE,cAAQ,CAACsC,aAAT,CAAuB5iC,MAAvB,CAA8B+kC,eAA9B;AACAzE,cAAQ,CAACoD,aAAT,CAAuB1jC,MAAvB,CAA8BglC,eAA9B;AACD;AACF;AACF;AAED;;;;;AAGA,SAASvB,wBAAT,GAAiC;AAC/B,SAAOvD,qBAAqB,EAA5B;AACD;AAED;;;;;;;AAKA,SAASyD,sBAAT,CACErD,QADF,EAEEztC,KAFF,EAGEqqC,IAHF,EAGY;AAEV,MAAM7xB,IAAI,GAAGxY,KAAK,CAACE,KAAnB;AACA,MAAMoe,GAAG,GAAGoxB,oBAAoB,CAACjC,QAAD,EAAWztC,KAAX,CAAhC;AACA,MAAM6B,QAAQ,GAAG0tC,8BAA8B,CAAC9B,QAAD,EAAWpD,IAAX,CAA/C;AAEA,MAAM9M,MAAM,GAAGkQ,QAAQ,CAACF,eAAT,CAAyBiC,cAAzB,CACbC,0BAA0B,CAACzvC,KAAD,CADb,EAEbse,GAFa,EAGbzc,QAAQ,CAACkd,MAHI,EAIbld,QAAQ,CAAC4U,UAJI,CAAf;AAOA,MAAM0lB,OAAO,GAAGsR,QAAQ,CAACqB,cAAT,CAAwB3S,OAAxB,CAAgC3jB,IAAhC,CAAhB,CAbU;;;AAgBV,MAAI8F,GAAJ,EAAS;AACPlkB,UAAM,CACJ,CAACuyC,wBAAwB,CAACxQ,OAAO,CAAC/kC,KAAT,CADrB,EAEJ,mDAFI,CAAN;AAID,GALD,MAKO;;AAEL,QAAMg7C,aAAa,GAAGjW,OAAO,CAACwV,IAAR,CACpB,UAACpS,YAAD,EAAeqS,mBAAf,EAAoCC,QAApC,EAA4C;AAC1C,UACE,CAACv4B,WAAW,CAACimB,YAAD,CAAZ,IACAqS,mBADA,IAEAjF,wBAAwB,CAACiF,mBAAD,CAH1B,EAIE;AACA,eAAO,CAAC1E,wBAAwB,CAAC0E,mBAAD,CAAxB,CAA8C5xC,KAA/C,CAAP;AACD,OAND,MAMO;;AAEL,YAAIkkB,OAAO,GAAmB,EAA9B;;AACA,YAAI0tB,mBAAJ,EAAyB;AACvB1tB,iBAAO,GAAGA,OAAO,CAACmnB,MAAR,CACR0B,sBAAsB,CAAC6E,mBAAD,CAAtB,CAA4CnuB,GAA5C,CACE,cAAI;AAAA,mBAAI4mB,IAAI,CAACrqC,KAAT;AAAA,WADN,CADQ,CAAV;AAKD;;AACDhC,YAAI,CAAC6zC,QAAD,EAAW,UAACE,IAAD,EAAeM,YAAf,EAA2C;AACxDnuB,iBAAO,GAAGA,OAAO,CAACmnB,MAAR,CAAegH,YAAf,CAAV;AACD,SAFG,CAAJ;AAGA,eAAOnuB,OAAP;AACD;AACF,KAvBmB,CAAtB;;AAyBA,SAAK,IAAIzqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG24C,aAAa,CAAC14C,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,UAAM64C,WAAW,GAAGF,aAAa,CAAC34C,CAAD,CAAjC;AACAg0C,cAAQ,CAACF,eAAT,CAAyBqC,aAAzB,CACEH,0BAA0B,CAAC6C,WAAD,CAD5B,EAEE5C,oBAAoB,CAACjC,QAAD,EAAW6E,WAAX,CAFtB;AAID;AACF;;AACD,SAAO/U,MAAP;AACF;AC/9BA;;;;;;;;;;;;;;;;;;IAyCMgV,qB;AACJ,iCAAqB5V,KAArB,EAAgC;AAAA;;AAAX;AAAe;;;;WAEpC,2BAAkB3T,SAAlB,EAAmC;AACjC,UAAMjO,KAAK,GAAG,KAAK4hB,KAAL,CAAW1O,iBAAX,CAA6BjF,SAA7B,CAAd;AACA,aAAO,IAAIupB,qBAAJ,CAA0Bx3B,KAA1B,CAAP;AACD;;;WAED,gBAAI;AACF,aAAO,KAAK4hB,KAAZ;AACD;;;;;;IAGG6V,qB;AAIJ,iCAAY/E,QAAZ,EAAgCj1B,IAAhC,EAA0C;AAAA;;AACxC,SAAKi6B,SAAL,GAAiBhF,QAAjB;AACA,SAAKiF,KAAL,GAAal6B,IAAb;AACD;;;;WAED,2BAAkBwQ,SAAlB,EAAmC;AACjC,UAAMuX,SAAS,GAAGpnB,SAAS,CAAC,KAAKu5B,KAAN,EAAa1pB,SAAb,CAA3B;AACA,aAAO,IAAIwpB,qBAAJ,CAA0B,KAAKC,SAA/B,EAA0ClS,SAA1C,CAAP;AACD;;;WAED,gBAAI;AACF,aAAOwQ,8BAA8B,CAAC,KAAK0B,SAAN,EAAiB,KAAKC,KAAtB,CAArC;AACD;;;;;AAGH;;;;;AAGO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAChC1uB,MADgC,EAGxB;AAERA,QAAM,GAAGA,MAAM,IAAI,EAAnB;AACAA,QAAM,CAAC,WAAD,CAAN,GAAsBA,MAAM,CAAC,WAAD,CAAN,IAAuB,IAAIzC,IAAJ,GAAWC,OAAX,EAA7C;AACA,SAAOwC,MAAP;AACD,CARM;AAUP;;;;;;AAIO,IAAM2uB,wBAAwB,GAAG,SAA3BA,wBAA2B,CACtCx7C,KADsC,EAEtCy7C,WAFsC,EAGtCC,YAHsC,EAGA;AAEtC,MAAI,CAAC17C,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACvC,WAAOA,KAAP;AACD;;AACDgD,QAAM,CAAC,SAAShD,KAAV,EAAiB,2CAAjB,CAAN;;AAEA,MAAI,OAAOA,KAAK,CAAC,KAAD,CAAZ,KAAwB,QAA5B,EAAsC;AACpC,WAAO27C,0BAA0B,CAAC37C,KAAK,CAAC,KAAD,CAAN,EAAey7C,WAAf,EAA4BC,YAA5B,CAAjC;AACD,GAFD,MAEO,IAAI,OAAO17C,KAAK,CAAC,KAAD,CAAZ,KAAwB,QAA5B,EAAsC;AAC3C,WAAO47C,2BAA2B,CAAC57C,KAAK,CAAC,KAAD,CAAN,EAAey7C,WAAf,CAAlC;AACD,GAFM,MAEA;AACLz4C,UAAM,CAAC,KAAD,EAAQ,8BAA8B64C,IAAI,CAACz7C,SAAL,CAAeJ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAtC,CAAN;AACD;AACF,CAjBM;;AAmBP,IAAM27C,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCrE,EADiC,EAEjCvD,QAFiC,EAGjC2H,YAHiC,EAGK;AAEtC,UAAQpE,EAAR;AACE,SAAK,WAAL;AACE,aAAOoE,YAAY,CAAC,WAAD,CAAnB;;AACF;AACE14C,YAAM,CAAC,KAAD,EAAQ,8BAA8Bs0C,EAAtC,CAAN;AAJJ;AAMD,CAXD;;AAaA,IAAMsE,2BAA2B,GAAG,SAA9BA,2BAA8B,CAClCtE,EADkC,EAElCvD,QAFkC,EAGlC+H,MAHkC,EAGF;AAEhC,MAAI,CAACxE,EAAE,CAACzwC,cAAH,CAAkB,WAAlB,CAAL,EAAqC;AACnC7D,UAAM,CAAC,KAAD,EAAQ,8BAA8B64C,IAAI,CAACz7C,SAAL,CAAek3C,EAAf,EAAmB,IAAnB,EAAyB,CAAzB,CAAtC,CAAN;AACD;;AACD,MAAMprB,KAAK,GAAGorB,EAAE,CAAC,WAAD,CAAhB;;AACA,MAAI,OAAOprB,KAAP,KAAiB,QAArB,EAA+B;AAC7BlpB,UAAM,CAAC,KAAD,EAAQ,iCAAiCkpB,KAAzC,CAAN;AACD;;AAED,MAAM6vB,YAAY,GAAGhI,QAAQ,CAACtmB,IAAT,EAArB;AACAzqB,QAAM,CACJ+4C,YAAY,KAAK,IAAjB,IAAyB,OAAOA,YAAP,KAAwB,WAD7C,EAEJ,4CAFI,CAAN,CAXgC;;AAiBhC,MAAI,CAACA,YAAY,CAAC1qB,UAAb,EAAL,EAAgC;AAC9B,WAAOnF,KAAP;AACD;;AAED,MAAM8vB,IAAI,GAAGD,YAAb;AACA,MAAMN,WAAW,GAAGO,IAAI,CAAC5pB,QAAL,EAApB;;AACA,MAAI,OAAOqpB,WAAP,KAAuB,QAA3B,EAAqC;AACnC,WAAOvvB,KAAP;AACD,GAzB+B;;;AA4BhC,SAAOuvB,WAAW,GAAGvvB,KAArB;AACD,CAhCD;AAkCA;;;;;;;;;AAOO,IAAM+vB,wBAAwB,GAAG,SAA3BA,wBAA2B,CACtC76B,IADsC,EAEtCqM,IAFsC,EAGtC4oB,QAHsC,EAItCqF,YAJsC,EAIf;AAEvB,SAAOQ,oBAAoB,CACzBzuB,IADyB,EAEzB,IAAI2tB,qBAAJ,CAA0B/E,QAA1B,EAAoCj1B,IAApC,CAFyB,EAGzBs6B,YAHyB,CAA3B;AAKD,CAXM;AAaP;;;;;;;AAKO,IAAMS,4BAA4B,GAAG,SAA/BA,4BAA+B,CAC1C1uB,IAD0C,EAE1CsmB,QAF0C,EAG1C2H,YAH0C,EAGnB;AAEvB,SAAOQ,oBAAoB,CACzBzuB,IADyB,EAEzB,IAAI0tB,qBAAJ,CAA0BpH,QAA1B,CAFyB,EAGzB2H,YAHyB,CAA3B;AAKD,CAVM;;AAYP,SAASQ,oBAAT,CACEzuB,IADF,EAEEguB,WAFF,EAGEC,YAHF,EAGyB;AAEvB,MAAMU,MAAM,GAAG3uB,IAAI,CAAC6D,WAAL,GAAmBjD,GAAnB,EAAf;AAMA,MAAM6C,QAAQ,GAAGsqB,wBAAwB,CACvCY,MADuC,EAEvCX,WAAW,CAAC5kB,iBAAZ,CAA8B,WAA9B,CAFuC,EAGvC6kB,YAHuC,CAAzC;AAKA,MAAI7tB,OAAJ;;AAEA,MAAIJ,IAAI,CAAC4D,UAAL,EAAJ,EAAuB;AACrB,QAAMgrB,QAAQ,GAAG5uB,IAAjB;AACA,QAAMztB,KAAK,GAAGw7C,wBAAwB,CACpCa,QAAQ,CAACjqB,QAAT,EADoC,EAEpCqpB,WAFoC,EAGpCC,YAHoC,CAAtC;;AAKA,QACE17C,KAAK,KAAKq8C,QAAQ,CAACjqB,QAAT,EAAV,IACAlB,QAAQ,KAAKmrB,QAAQ,CAAC/qB,WAAT,GAAuBjD,GAAvB,EAFf,EAGE;AACA,aAAO,IAAImD,QAAJ,CAAaxxB,KAAb,EAAoB+yB,YAAY,CAAC7B,QAAD,CAAhC,CAAP;AACD,KALD,MAKO;AACL,aAAOzD,IAAP;AACD;AACF,GAfD,MAeO;AACL,QAAM6uB,YAAY,GAAG7uB,IAArB;AACAI,WAAO,GAAGyuB,YAAV;;AACA,QAAIprB,QAAQ,KAAKorB,YAAY,CAAChrB,WAAb,GAA2BjD,GAA3B,EAAjB,EAAmD;AACjDR,aAAO,GAAGA,OAAO,CAACkE,cAAR,CAAuB,IAAIP,QAAJ,CAAaN,QAAb,CAAvB,CAAV;AACD;;AACDorB,gBAAY,CAAChlB,YAAb,CAA0BhE,cAA1B,EAA0C,UAAC1B,SAAD,EAAYC,SAAZ,EAAqB;AAC7D,UAAMC,YAAY,GAAGoqB,oBAAoB,CACvCrqB,SADuC,EAEvC4pB,WAAW,CAAC5kB,iBAAZ,CAA8BjF,SAA9B,CAFuC,EAGvC8pB,YAHuC,CAAzC;;AAKA,UAAI5pB,YAAY,KAAKD,SAArB,EAAgC;AAC9BhE,eAAO,GAAGA,OAAO,CAACmE,oBAAR,CAA6BJ,SAA7B,EAAwCE,YAAxC,CAAV;AACD;AACF,KATD;AAUA,WAAOjE,OAAP;AACD;AACH;ACpPA;;;;;;;;;;;;;;;;;AAiCA;;;;;;;IAKa0uB,I;;;;;;AAMX,gBAG4D;AAAA,MAFjD/7C,IAEiD,uEAFlC,EAEkC;AAAA,MADjDg8C,MACiD,uEADxB,IACwB;AAAA,MAAnD/uB,IAAmD,uEAA/B;AAAE+L,YAAQ,EAAE,EAAZ;AAAgBijB,cAAU,EAAE;AAA5B,GAA+B;;AAAA;;AAFjD;AACA;AACF;AACL,C;AAGN;;;;;;;;SAMgBC,YAAe7Z,MAAe8Z,SAAsB;;AAElE,MAAIv7B,IAAI,GAAGu7B,OAAO,YAAYh8B,IAAnB,GAA0Bg8B,OAA1B,GAAoC,IAAIh8B,IAAJ,CAASg8B,OAAT,CAA/C;AACA,MAAIh5B,KAAK,GAAGkf,IAAZ;AAAA,MACE9M,IAAI,GAAG5U,YAAY,CAACC,IAAD,CADrB;;AAEA,SAAO2U,IAAI,KAAK,IAAhB,EAAsB;AACpB,QAAMlE,SAAS,GAAGzE,OAAO,CAACzJ,KAAK,CAAC8J,IAAN,CAAW+L,QAAZ,EAAsBzD,IAAtB,CAAP,IAAsC;AACtDyD,cAAQ,EAAE,EAD4C;AAEtDijB,gBAAU,EAAE;AAF0C,KAAxD;AAIA94B,SAAK,GAAG,IAAI44B,IAAJ,CAAYxmB,IAAZ,EAAkBpS,KAAlB,EAAyBkO,SAAzB,CAAR;AACAzQ,QAAI,GAAGE,YAAY,CAACF,IAAD,CAAnB;AACA2U,QAAI,GAAG5U,YAAY,CAACC,IAAD,CAAnB;AACD;;AAED,SAAOuC,KAAP;AACD;AAED;;;;;;;SAKgBi5B,aAAgB/Z,MAAa;AAC3C,SAAOA,IAAI,CAACpV,IAAL,CAAUztB,KAAjB;AACD;AAED;;;;;;;SAKgB68C,aAAgBha,MAAe7iC,OAAoB;AACjE6iC,MAAI,CAACpV,IAAL,CAAUztB,KAAV,GAAkBA,KAAlB;AACA88C,mBAAiB,CAACja,IAAD,CAAjB;AACD;AAED;;;;;SAGgBka,gBAAmBla,MAAa;AAC9C,SAAOA,IAAI,CAACpV,IAAL,CAAUgvB,UAAV,GAAuB,CAA9B;AACD;AAED;;;;;SAGgBO,YAAena,MAAa;AAC1C,SAAO+Z,YAAY,CAAC/Z,IAAD,CAAZ,KAAuB/b,SAAvB,IAAoC,CAACi2B,eAAe,CAACla,IAAD,CAA3D;AACD;AAED;;;;;;;SAKgBoa,iBACdpa,MACAnd,QAA+B;AAE/B9e,MAAI,CAACi8B,IAAI,CAACpV,IAAL,CAAU+L,QAAX,EAAqB,UAAC7V,KAAD,EAAgBkR,SAAhB,EAAsC;AAC7DnP,UAAM,CAAC,IAAI62B,IAAJ,CAAY54B,KAAZ,EAAmBkf,IAAnB,EAAyBhO,SAAzB,CAAD,CAAN;AACD,GAFG,CAAJ;AAGD;AAED;;;;;;;;;;;SASgBqoB,sBACdra,MACAnd,QACAy3B,aACAC,eAAuB;AAEvB,MAAID,WAAW,IAAI,CAACC,aAApB,EAAmC;AACjC13B,UAAM,CAACmd,IAAD,CAAN;AACD;;AAEDoa,kBAAgB,CAACpa,IAAD,EAAO,eAAK;AAC1Bqa,yBAAqB,CAACv5B,KAAD,EAAQ+B,MAAR,EAAgB,IAAhB,EAAsB03B,aAAtB,CAArB;AACD,GAFe,CAAhB;;AAIA,MAAID,WAAW,IAAIC,aAAnB,EAAkC;AAChC13B,UAAM,CAACmd,IAAD,CAAN;AACD;AACF;AAED;;;;;;;;;;SAQgBwa,oBACdxa,MACAnd,QACAy3B,aAAqB;AAErB,MAAI1vB,IAAI,GAAG0vB,WAAW,GAAGta,IAAH,GAAUA,IAAI,CAAC2Z,MAArC;;AACA,SAAO/uB,IAAI,KAAK,IAAhB,EAAsB;AACpB,QAAI/H,MAAM,CAAC+H,IAAD,CAAV,EAAkB;AAChB,aAAO,IAAP;AACD;;AACDA,QAAI,GAAGA,IAAI,CAAC+uB,MAAZ;AACD;;AACD,SAAO,KAAP;AACD;AAsBD;;;;;SAGgBc,YAAeza,MAAa;AAC1C,SAAO,IAAIliB,IAAJ,CACLkiB,IAAI,CAAC2Z,MAAL,KAAgB,IAAhB,GACI3Z,IAAI,CAACriC,IADT,GAEI88C,WAAW,CAACza,IAAI,CAAC2Z,MAAN,CAAX,GAA2B,GAA3B,GAAiC3Z,IAAI,CAACriC,IAHrC,CAAP;AAKD;AAED;;;;;AAGA,SAASs8C,iBAAT,CAA8Bja,IAA9B,EAA2C;AACzC,MAAIA,IAAI,CAAC2Z,MAAL,KAAgB,IAApB,EAA0B;AACxBe,mBAAe,CAAC1a,IAAI,CAAC2Z,MAAN,EAAc3Z,IAAI,CAACriC,IAAnB,EAAyBqiC,IAAzB,CAAf;AACD;AACF;AAED;;;;;;;;AAMA,SAAS0a,eAAT,CAA4B1a,IAA5B,EAA2CjR,SAA3C,EAA8DjO,KAA9D,EAA4E;AAC1E,MAAM65B,UAAU,GAAGR,WAAW,CAACr5B,KAAD,CAA9B;AACA,MAAM85B,WAAW,GAAG58C,QAAQ,CAACgiC,IAAI,CAACpV,IAAL,CAAU+L,QAAX,EAAqB5H,SAArB,CAA5B;;AACA,MAAI4rB,UAAU,IAAIC,WAAlB,EAA+B;AAC7B,WAAO5a,IAAI,CAACpV,IAAL,CAAU+L,QAAV,CAAmB5H,SAAnB,CAAP;AACAiR,QAAI,CAACpV,IAAL,CAAUgvB,UAAV;AACAK,qBAAiB,CAACja,IAAD,CAAjB;AACD,GAJD,MAIO,IAAI,CAAC2a,UAAD,IAAe,CAACC,WAApB,EAAiC;AACtC5a,QAAI,CAACpV,IAAL,CAAU+L,QAAV,CAAmB5H,SAAnB,IAAgCjO,KAAK,CAAC8J,IAAtC;AACAoV,QAAI,CAACpV,IAAL,CAAUgvB,UAAV;AACAK,qBAAiB,CAACja,IAAD,CAAjB;AACD;AACH;ACvOA;;;;;;;;;;;;;;;;;AAyCA;;;;;AAGO,IAAM6a,kBAAkB,GAAG,gCAA3B;AAEP;;;;;AAIO,IAAMC,mBAAmB,GAAG,8BAA5B;AAEP;;;;AAGO,IAAMC,cAAc,GAAG,KAAK,IAAL,GAAY,IAAnC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAU99C,GAAV,EAAsB;AAC9C,SACE,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACuC,MAAJ,KAAe,CAA1C,IAA+C,CAACo7C,kBAAkB,CAACr1C,IAAnB,CAAwBtI,GAAxB,CADlD;AAGD,CAJM;;AAMA,IAAM+9C,iBAAiB,GAAG,SAApBA,iBAAoB,CAAU1+B,UAAV,EAA4B;AAC3D,SACE,OAAOA,UAAP,KAAsB,QAAtB,IACAA,UAAU,CAAC9c,MAAX,KAAsB,CADtB,IAEA,CAACq7C,mBAAmB,CAACt1C,IAApB,CAAyB+W,UAAzB,CAHH;AAKD,CANM;;AAQA,IAAM2+B,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAU3+B,UAAV,EAA4B;AAC/D,MAAIA,UAAJ,EAAgB;;AAEdA,cAAU,GAAGA,UAAU,CAACwN,OAAX,CAAmB,kBAAnB,EAAuC,GAAvC,CAAb;AACD;;AAED,SAAOkxB,iBAAiB,CAAC1+B,UAAD,CAAxB;AACD,CAPM;;AASA,IAAM4+B,eAAe,GAAG,SAAlBA,eAAkB,CAAU9sB,QAAV,EAA2B;AACxD,SACEA,QAAQ,KAAK,IAAb,IACA,OAAOA,QAAP,KAAoB,QADpB,IAEC,OAAOA,QAAP,KAAoB,QAApB,IAAgC,CAAC9sB,mBAAmB,CAAC8sB,QAAD,CAFrD,IAGCA,QAAQ,IACP,OAAOA,QAAP,KAAoB,QADrB;AAGCrwB,UAAQ,CAACqwB,QAAD,EAAkB,KAAlB,CAPZ;AASD,CAVM;AAYP;;;;;AAGO,IAAM+sB,uBAAuB,GAAG,SAA1BA,uBAA0B,CACrCC,MADqC,EAErCl+C,KAFqC,EAGrCohB,IAHqC,EAIrClX,QAJqC,EAIpB;AAEjB,MAAIA,QAAQ,IAAIlK,KAAK,KAAK8mB,SAA1B,EAAqC;AACnC;AACD;;AAEDq3B,sBAAoB,CAACC,WAAc,CAACF,MAAD,EAAS,OAAT,CAAf,EAAkCl+C,KAAlC,EAAyCohB,IAAzC,CAApB;AACD,CAXM;AAaP;;;;;AAGO,IAAM+8B,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCE,WADkC,EAElCh6C,IAFkC,EAGlCi3C,KAHkC,EAGN;AAE5B,MAAMl6B,IAAI,GACRk6B,KAAK,YAAY36B,IAAjB,GAAwB,IAAIuC,cAAJ,CAAmBo4B,KAAnB,EAA0B+C,WAA1B,CAAxB,GAAiE/C,KADnE;;AAGA,MAAIj3C,IAAI,KAAKyiB,SAAb,EAAwB;AACtB,UAAM,IAAIhjB,KAAJ,CACJu6C,WAAW,GAAG,qBAAd,GAAsCt6B,2BAA2B,CAAC3C,IAAD,CAD7D,CAAN;AAGD;;AACD,MAAI,OAAO/c,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAIP,KAAJ,CACJu6C,WAAW,GACT,sBADF,GAEEt6B,2BAA2B,CAAC3C,IAAD,CAF7B,GAGE,mBAHF,GAIE/c,IAAI,CAAC3D,QAAL,EALE,CAAN;AAOD;;AACD,MAAI0D,mBAAmB,CAACC,IAAD,CAAvB,EAA+B;AAC7B,UAAM,IAAIP,KAAJ,CACJu6C,WAAW,GACT,WADF,GAEEh6C,IAAI,CAAC3D,QAAL,EAFF,GAGE,GAHF,GAIEqjB,2BAA2B,CAAC3C,IAAD,CALzB,CAAN;AAOD,GA3B2B;;;AA8B5B,MACE,OAAO/c,IAAP,KAAgB,QAAhB,IACAA,IAAI,CAAC/B,MAAL,GAAcs7C,cAAc,GAAG,CAD/B,IAEAr6B,YAAY,CAAClf,IAAD,CAAZ,GAAqBu5C,cAHvB,EAIE;AACA,UAAM,IAAI95C,KAAJ,CACJu6C,WAAW,GACT,iCADF,GAEET,cAFF,GAGE,cAHF,GAIE75B,2BAA2B,CAAC3C,IAAD,CAJ7B,GAKE,KALF,GAME/c,IAAI,CAACsC,SAAL,CAAe,CAAf,EAAkB,EAAlB,CANF,GAOE,OARE,CAAN;AAUD,GA7C2B;;;;AAiD5B,MAAItC,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AACpC,QAAIi6C,WAAW,GAAG,KAAlB;AACA,QAAIC,cAAc,GAAG,KAArB;AACA33C,QAAI,CAACvC,IAAD,EAAO,UAACtE,GAAD,EAAcC,KAAd,EAA4B;AACrC,UAAID,GAAG,KAAK,QAAZ,EAAsB;AACpBu+C,mBAAW,GAAG,IAAd;AACD,OAFD,MAEO,IAAIv+C,GAAG,KAAK,WAAR,IAAuBA,GAAG,KAAK,KAAnC,EAA0C;AAC/Cw+C,sBAAc,GAAG,IAAjB;;AACA,YAAI,CAACV,UAAU,CAAC99C,GAAD,CAAf,EAAsB;AACpB,gBAAM,IAAI+D,KAAJ,CACJu6C,WAAW,GACT,4BADF,GAEEt+C,GAFF,GAGE,IAHF,GAIEgkB,2BAA2B,CAAC3C,IAAD,CAJ7B,GAKE,oCALF,GAME,oDAPE,CAAN;AASD;AACF;;AAEDqC,wBAAkB,CAACrC,IAAD,EAAOrhB,GAAP,CAAlB;AACAo+C,0BAAoB,CAACE,WAAD,EAAcr+C,KAAd,EAAqBohB,IAArB,CAApB;AACAwC,uBAAiB,CAACxC,IAAD,CAAjB;AACD,KArBG,CAAJ;;AAuBA,QAAIk9B,WAAW,IAAIC,cAAnB,EAAmC;AACjC,YAAM,IAAIz6C,KAAJ,CACJu6C,WAAW,GACT,2BADF,GAEEt6B,2BAA2B,CAAC3C,IAAD,CAF7B,GAGE,kCAJE,CAAN;AAMD;AACF;AACF,CAvFM;AAyFP;;;;;AAGO,IAAMo9B,0BAA0B,GAAG,SAA7BA,0BAA6B,CACxCH,WADwC,EAExCI,UAFwC,EAEtB;AAElB,MAAIp8C,CAAJ,EAAOq8C,OAAP;;AACA,OAAKr8C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGo8C,UAAU,CAACn8C,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCq8C,WAAO,GAAGD,UAAU,CAACp8C,CAAD,CAApB;AACA,QAAM6D,IAAI,GAAGwb,SAAS,CAACg9B,OAAD,CAAtB;;AACA,SAAK,IAAI17B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9c,IAAI,CAAC5D,MAAzB,EAAiC0gB,CAAC,EAAlC,EAAsC;AACpC,UAAI9c,IAAI,CAAC8c,CAAD,CAAJ,KAAY,WAAZ,IAA2BA,CAAC,KAAK9c,IAAI,CAAC5D,MAAL,GAAc,CAAnD,EAAsD,CAAtD,KAEO,IAAI,CAACu7C,UAAU,CAAC33C,IAAI,CAAC8c,CAAD,CAAL,CAAf,EAA0B;AAC/B,cAAM,IAAIlf,KAAJ,CACJu6C,WAAW,GACT,2BADF,GAEEn4C,IAAI,CAAC8c,CAAD,CAFN,GAGE,YAHF,GAIE07B,OAAO,CAACh+C,QAAR,EAJF,GAKE,mCALF,GAME,oDAPE,CAAN;AASD;AACF;AACF,GArBiB;;;;;AA0BlB+9C,YAAU,CAACp4C,IAAX,CAAgBmc,WAAhB;AACA,MAAIm8B,QAAQ,GAAgB,IAA5B;;AACA,OAAKt8C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGo8C,UAAU,CAACn8C,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCq8C,WAAO,GAAGD,UAAU,CAACp8C,CAAD,CAApB;;AACA,QAAIs8C,QAAQ,KAAK,IAAb,IAAqB17B,YAAY,CAAC07B,QAAD,EAAWD,OAAX,CAArC,EAA0D;AACxD,YAAM,IAAI56C,KAAJ,CACJu6C,WAAW,GACT,kBADF,GAEEM,QAAQ,CAACj+C,QAAT,EAFF,GAGE,oCAHF,GAIEg+C,OAAO,CAACh+C,QAAR,EALE,CAAN;AAOD;;AACDi+C,YAAQ,GAAGD,OAAX;AACD;AACF,CA3CM;AA6CP;;;;;;AAIO,IAAME,4BAA4B,GAAG,SAA/BA,4BAA+B,CAC1CV,MAD0C,EAE1C75C,IAF0C,EAG1C+c,IAH0C,EAI1ClX,QAJ0C,EAIzB;AAEjB,MAAIA,QAAQ,IAAI7F,IAAI,KAAKyiB,SAAzB,EAAoC;AAClC;AACD;;AAED,MAAMu3B,aAAW,GAAGD,WAAc,CAACF,MAAD,EAAS,QAAT,CAAlC;;AAEA,MAAI,EAAE75C,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA1B,KAAuC7B,KAAK,CAACC,OAAN,CAAc4B,IAAd,CAA3C,EAAgE;AAC9D,UAAM,IAAIP,KAAJ,CACJu6C,aAAW,GAAG,wDADV,CAAN;AAGD;;AAED,MAAMI,UAAU,GAAW,EAA3B;AACA73C,MAAI,CAACvC,IAAD,EAAO,UAACtE,GAAD,EAAcC,KAAd,EAA4B;AACrC,QAAM0+C,OAAO,GAAG,IAAI/9B,IAAJ,CAAS5gB,GAAT,CAAhB;AACAo+C,wBAAoB,CAACE,aAAD,EAAcr+C,KAAd,EAAqB+hB,SAAS,CAACX,IAAD,EAAOs9B,OAAP,CAA9B,CAApB;;AACA,QAAIn9B,WAAW,CAACm9B,OAAD,CAAX,KAAyB,WAA7B,EAA0C;AACxC,UAAI,CAACV,eAAe,CAACh+C,KAAD,CAApB,EAA6B;AAC3B,cAAM,IAAI8D,KAAJ,CACJu6C,aAAW,GACT,iCADFA,GAEEK,OAAO,CAACh+C,QAAR,EAFF29C,GAGE,2BAHFA,GAIE,qEALE,CAAN;AAOD;AACF;;AACDI,cAAU,CAACr4C,IAAX,CAAgBs4C,OAAhB;AACD,GAfG,CAAJ;AAgBAF,4BAA0B,CAACH,aAAD,EAAcI,UAAd,CAA1B;AACD,CApCM;;AAsCA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BX,MAD8B,EAE9BhtB,QAF8B,EAG9BhnB,QAH8B,EAGb;AAEjB,MAAIA,QAAQ,IAAIgnB,QAAQ,KAAKpK,SAA7B,EAAwC;AACtC;AACD;;AACD,MAAI1iB,mBAAmB,CAAC8sB,QAAD,CAAvB,EAAmC;AACjC,UAAM,IAAIptB,KAAJ,CACJs6C,WAAc,CAACF,MAAD,EAAS,UAAT,CAAdE,GACE,KADFA,GAEEltB,QAAQ,CAACxwB,QAAT,EAFF09C,GAGE,oEAHFA,GAIE,yBALE,CAAN;AAOD,GAbgB;;;AAejB,MAAI,CAACJ,eAAe,CAAC9sB,QAAD,CAApB,EAAgC;AAC9B,UAAM,IAAIptB,KAAJ,CACJs6C,WAAc,CAACF,MAAD,EAAS,UAAT,CAAdE,GACE,oCADFA,GAEE,mDAHE,CAAN;AAKD;AACF,CAzBM;;AA2BA,IAAMU,WAAW,GAAG,SAAdA,WAAc,CACzBZ,MADyB,EAEzBa,YAFyB,EAGzBh/C,GAHyB,EAIzBmK,QAJyB,EAIR;AAEjB,MAAIA,QAAQ,IAAInK,GAAG,KAAK+mB,SAAxB,EAAmC;AACjC;AACD;;AACD,MAAI,CAAC+2B,UAAU,CAAC99C,GAAD,CAAf,EAAsB;AACpB,UAAM,IAAI+D,KAAJ,CACJs6C,WAAc,CAACF,MAAD,EAASa,YAAT,CAAdX,GACE,wBADFA,GAEEr+C,GAFFq+C,GAGE,kDAHFA,GAIE,kDALE,CAAN;AAOD;AACF,CAlBM;AAoBP;;;;;IAGaY,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCd,MADgC,EAEhCa,YAFgC,EAGhC3/B,UAHgC,EAIhClV,QAJgC,EAIf;AAEjB,MAAIA,QAAQ,IAAIkV,UAAU,KAAK0H,SAA/B,EAA0C;AACxC;AACD;;AAED,MAAI,CAACg3B,iBAAiB,CAAC1+B,UAAD,CAAtB,EAAoC;AAClC,UAAM,IAAItb,KAAJ,CACJs6C,WAAc,CAACF,MAAD,EAASa,YAAT,CAAdX,GACE,yBADFA,GAEEh/B,UAFFg/B,GAGE,yCAHFA,GAIE,2CALE,CAAN;AAOD;AACH;;AAEO,IAAMa,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpCf,MADoC,EAEpCa,YAFoC,EAGpC3/B,UAHoC,EAIpClV,QAJoC,EAInB;AAEjB,MAAIkV,UAAJ,EAAgB;;AAEdA,cAAU,GAAGA,UAAU,CAACwN,OAAX,CAAmB,kBAAnB,EAAuC,GAAvC,CAAb;AACD;;AAEDoyB,oBAAkB,CAACd,MAAD,EAASa,YAAT,EAAuB3/B,UAAvB,EAAmClV,QAAnC,CAAlB;AACD,CAZM;AAcP;;;;;IAGag1C,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUhB,MAAV,EAA0B98B,IAA1B,EAAoC;AACtE,MAAID,YAAY,CAACC,IAAD,CAAZ,KAAuB,OAA3B,EAAoC;AAClC,UAAM,IAAItd,KAAJ,CAAUo6C,MAAM,GAAG,2CAAnB,CAAN;AACD;AACH;;AAEO,IAAMiB,WAAW,GAAG,SAAdA,WAAc,CACzBjB,MADyB,EAEzBkB,SAFyB,EAEoB;;AAG7C,MAAMhgC,UAAU,GAAGggC,SAAS,CAACh+B,IAAV,CAAe1gB,QAAf,EAAnB;;AACA,MACE,EAAE,OAAO0+C,SAAS,CAAClyC,QAAV,CAAmBd,IAA1B,KAAmC,QAArC,KACAgzC,SAAS,CAAClyC,QAAV,CAAmBd,IAAnB,CAAwB9J,MAAxB,KAAmC,CADnC,IAEC,CAACu7C,UAAU,CAACuB,SAAS,CAAClyC,QAAV,CAAmBZ,SAApB,CAAX,IACC8yC,SAAS,CAAClyC,QAAV,CAAmBd,IAAnB,CAAwB2U,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,MAA0C,WAH5C,IAIC3B,UAAU,CAAC9c,MAAX,KAAsB,CAAtB,IAA2B,CAACy7C,qBAAqB,CAAC3+B,UAAD,CALpD,EAME;AACA,UAAM,IAAItb,KAAJ,CACJs6C,WAAc,CAACF,MAAD,EAAS,KAAT,CAAdE,GACE,mCADFA,GAEE,qDAHE,CAAN;AAKD;AACF,CAnBM;AChYP;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;IAaaiB,U,6BAAb;AAAA;;AACE,qBAA2B,EAA3B;;;;;AAKA,yBAAkB,CAAlB;AACD,C;AAED;;;;;SAGgBC,sBACdC,YACAC,eAAsB;;AAGtB,MAAIC,QAAQ,GAAqB,IAAjC;;AACA,OAAK,IAAIp9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGm9C,aAAa,CAACl9C,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,QAAMgC,IAAI,GAAGm7C,aAAa,CAACn9C,CAAD,CAA1B;AACA,QAAM+e,IAAI,GAAG/c,IAAI,CAACq7C,OAAL,EAAb;;AACA,QAAID,QAAQ,KAAK,IAAb,IAAqB,CAAC38B,UAAU,CAAC1B,IAAD,EAAOq+B,QAAQ,CAACr+B,IAAhB,CAApC,EAA2D;AACzDm+B,gBAAU,CAACI,WAAX,CAAuBv5C,IAAvB,CAA4Bq5C,QAA5B;AACAA,cAAQ,GAAG,IAAX;AACD;;AAED,QAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,cAAQ,GAAG;AAAEtZ,cAAM,EAAE,EAAV;AAAc/kB,YAAI,EAAJA;AAAd,OAAX;AACD;;AAEDq+B,YAAQ,CAACtZ,MAAT,CAAgB//B,IAAhB,CAAqB/B,IAArB;AACD;;AACD,MAAIo7C,QAAJ,EAAc;AACZF,cAAU,CAACI,WAAX,CAAuBv5C,IAAvB,CAA4Bq5C,QAA5B;AACD;AACF;AAED;;;;;;;;;;;SASgBG,4BACdL,YACAn+B,MACAo+B,eAAsB;AAEtBF,uBAAqB,CAACC,UAAD,EAAaC,aAAb,CAArB;AACAK,8CAA4C,CAACN,UAAD,EAAa,mBAAS;AAAA,WAChEz8B,UAAU,CAACg9B,SAAD,EAAY1+B,IAAZ,CADsD;AAAA,GAAtB,CAA5C;AAGD;AAED;;;;;;;;;;;SASgB2+B,oCACdR,YACAS,aACAR,eAAsB;AAEtBF,uBAAqB,CAACC,UAAD,EAAaC,aAAb,CAArB;AACAK,8CAA4C,CAC1CN,UAD0C,EAE1C,mBAAS;AAAA,WACPt8B,YAAY,CAAC68B,SAAD,EAAYE,WAAZ,CAAZ,IACA/8B,YAAY,CAAC+8B,WAAD,EAAcF,SAAd,CAFL;AAAA,GAFiC,CAA5C;AAMD;;AAED,SAASD,4CAAT,CACEN,UADF,EAEEnX,SAFF,EAEoC;AAElCmX,YAAU,CAACU,eAAX;AAEA,MAAIC,OAAO,GAAG,IAAd;;AACA,OAAK,IAAI79C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGk9C,UAAU,CAACI,WAAX,CAAuBr9C,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACtD,QAAM89C,SAAS,GAAGZ,UAAU,CAACI,WAAX,CAAuBt9C,CAAvB,CAAlB;;AACA,QAAI89C,SAAJ,EAAe;AACb,UAAML,SAAS,GAAGK,SAAS,CAAC/+B,IAA5B;;AACA,UAAIgnB,SAAS,CAAC0X,SAAD,CAAb,EAA0B;AACxBM,sBAAc,CAACb,UAAU,CAACI,WAAX,CAAuBt9C,CAAvB,CAAD,CAAd;AACAk9C,kBAAU,CAACI,WAAX,CAAuBt9C,CAAvB,IAA4B,IAA5B;AACD,OAHD,MAGO;AACL69C,eAAO,GAAG,KAAV;AACD;AACF;AACF;;AAED,MAAIA,OAAJ,EAAa;AACXX,cAAU,CAACI,WAAX,GAAyB,EAAzB;AACD;;AAEDJ,YAAU,CAACU,eAAX;AACD;AAOD;;;;;AAGA,SAASG,cAAT,CAAwBD,SAAxB,EAA4C;AAC1C,OAAK,IAAI99C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG89C,SAAS,CAACha,MAAV,CAAiB7jC,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,QAAM2d,SAAS,GAAGmgC,SAAS,CAACha,MAAV,CAAiB9jC,CAAjB,CAAlB;;AACA,QAAI2d,SAAS,KAAK,IAAlB,EAAwB;AACtBmgC,eAAS,CAACha,MAAV,CAAiB9jC,CAAjB,IAAsB,IAAtB;AACA,UAAMg+C,OAAO,GAAGrgC,SAAS,CAACsgC,cAAV,EAAhB;;AACA,UAAI39C,MAAJ,EAAY;AACVS,WAAG,CAAC,YAAY4c,SAAS,CAACtf,QAAV,EAAb,CAAH;AACD;;AACD2I,oBAAc,CAACg3C,OAAD,CAAd;AACD;AACF;AACH;AClKA;;;;;;;;;;;;;;;;;;AA2GA,IAAME,gBAAgB,GAAG,gBAAzB;AAEA;;;;;;AAKA,IAAMC,uBAAuB,GAAG,EAAhC;AA4CA;;;;IAGaC,I;AA0BX,gBACSrlC,SADT,EAESslC,gBAFT,EAGSz7B,kBAHT,EAIS07B,iBAJT,EAIiD;AAAA;;AAHxC;AACA;AACA;AACA;AA1BT,2BAAkB,CAAlB;AAKA,0BAAuC,IAAvC;AACA,uBAAc,IAAItB,UAAJ,EAAd;AACA,wBAAe,CAAf;AAIA,wCAAyE,IAAzE;;;AAGA,yBAAoC7c,qBAAqB,EAAzD;;;AAGA,iCAAwB,IAAI+Z,IAAJ,EAAxB,CASiD;;AANjD,iCAAqD,IAArD,CAMiD;;AAG/C,SAAKx8C,GAAL,GAAW,KAAKqb,SAAL,CAAepO,WAAf,EAAX;AACD;;;;;;;;WAKD,oBAAQ;AACN,aACE,CAAC,KAAKoO,SAAL,CAAe/O,MAAf,GAAwB,UAAxB,GAAqC,SAAtC,IAAmD,KAAK+O,SAAL,CAAehP,IADpE;AAGD;;;;;;SAGaw0C,UACdC,MACAC,OACAC,cAAqB;AAErBF,MAAI,CAACxwC,MAAL,GAAcC,yBAAyB,CAACuwC,IAAI,CAACzlC,SAAN,CAAvC;;AAEA,MAAIylC,IAAI,CAACH,gBAAL,IAAyBn3C,YAAY,EAAzC,EAA6C;AAC3Cs3C,QAAI,CAAC/c,OAAL,GAAe,IAAIpC,kBAAJ,CACbmf,IAAI,CAACzlC,SADQ,EAEb,UACEgE,UADF,EAEE/a,IAFF,EAGE28C,OAHF,EAIE95B,GAJF,EAIoB;AAElB+5B,sBAAgB,CAACJ,IAAD,EAAOzhC,UAAP,EAAmB/a,IAAnB,EAAyB28C,OAAzB,EAAkC95B,GAAlC,CAAhB;AACD,KATY,EAUb25B,IAAI,CAAC57B,kBAVQ,EAWb47B,IAAI,CAACF,iBAXQ,CAAf,CAD2C;;AAgB3C17C,cAAU,CAAC;AAAA,aAAMi8C,mBAAmB,CAACL,IAAD;AAAK;AAAuB,UAA5B,CAAzB;AAAA,KAAD,EAA6D,CAA7D,CAAV;AACD,GAjBD,MAiBO;;AAEL,QAAI,OAAOE,YAAP,KAAwB,WAAxB,IAAuCA,YAAY,KAAK,IAA5D,EAAkE;AAChE,UAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpC,cAAM,IAAIj9C,KAAJ,CACJ,oEADI,CAAN;AAGD;;AACD,UAAI;AACF1D,iBAAS,CAAC2gD,YAAD,CAAT;AACD,OAFD,CAEE,OAAO7/C,CAAP,EAAU;AACV,cAAM,IAAI4C,KAAJ,CAAU,oCAAoC5C,CAA9C,CAAN;AACD;AACF;;AAED2/C,QAAI,CAACM,qBAAL,GAA6B,IAAIt8B,oBAAJ,CAC3Bg8B,IAAI,CAACzlC,SADsB,EAE3B0lC,KAF2B,EAG3B,UACE1hC,UADF,EAEE/a,IAFF,EAGE28C,OAHF,EAIE95B,GAJF,EAIoB;AAElB+5B,sBAAgB,CAACJ,IAAD,EAAOzhC,UAAP,EAAmB/a,IAAnB,EAAyB28C,OAAzB,EAAkC95B,GAAlC,CAAhB;AACD,KAV0B,EAW3B,UAACk6B,aAAD,EAAuB;AACrBF,yBAAmB,CAACL,IAAD,EAAOO,aAAP,CAAnB;AACD,KAb0B,EAc3B,UAACvX,OAAD,EAAgB;AACdwX,4BAAsB,CAACR,IAAD,EAAOhX,OAAP,CAAtB;AACD,KAhB0B,EAiB3BgX,IAAI,CAAC57B,kBAjBsB,EAkB3B47B,IAAI,CAACF,iBAlBsB,EAmB3BI,YAnB2B,CAA7B;AAsBAF,QAAI,CAAC/c,OAAL,GAAe+c,IAAI,CAACM,qBAApB;AACD;;AAEDN,MAAI,CAAC57B,kBAAL,CAAwBq8B,sBAAxB,CAA+C,eAAK;AAClDT,QAAI,CAAC/c,OAAL,CAAayd,gBAAb,CAA8BhiC,KAA9B;AACD,GAFD;AAIAshC,MAAI,CAACF,iBAAL,CAAuBW,sBAAvB,CAA8C,gBAAM;AAClDT,QAAI,CAAC/c,OAAL,CAAa0d,oBAAb,CAAkC33B,MAAM,CAACtK,KAAzC;AACD,GAFD,EAjEqB;;;AAuErBshC,MAAI,CAACY,cAAL,GAAsBzzC,+BAA+B,CACnD6yC,IAAI,CAACzlC,SAD8C,EAEnD;AAAA,WAAM,IAAIwoB,aAAJ,CAAkBid,IAAI,CAACxwC,MAAvB,EAA+BwwC,IAAI,CAAC/c,OAApC,CAAN;AAAA,GAFmD,CAArD,CAvEqB;;AA6ErB+c,MAAI,CAACa,SAAL,GAAiB,IAAIrf,cAAJ,EAAjB;AACAwe,MAAI,CAACc,aAAL,GAAqB,IAAIzL,QAAJ,CAAa;AAChCkC,kBAAc,EAAE,wBAACxvC,KAAD,EAAQse,GAAR,EAAaD,aAAb,EAA4B5H,UAA5B,EAAsC;AACpD,UAAIuiC,UAAU,GAAY,EAA1B;AACA,UAAMn0B,IAAI,GAAGozB,IAAI,CAACa,SAAL,CAAe5Z,OAAf,CAAuBl/B,KAAK,CAACE,KAA7B,CAAb,CAFoD;;;AAKpD,UAAI,CAAC2kB,IAAI,CAACxB,OAAL,EAAL,EAAqB;AACnB21B,kBAAU,GAAG9K,4BAA4B,CACvC+J,IAAI,CAACc,aADkC,EAEvC/4C,KAAK,CAACE,KAFiC,EAGvC2kB,IAHuC,CAAzC;AAKAxoB,kBAAU,CAAC;AACToa,oBAAU,CAAC,IAAD,CAAV;AACD,SAFS,EAEP,CAFO,CAAV;AAGD;;AACD,aAAOuiC,UAAP;AACD,KAjB+B;AAkBhCpJ,iBAAa,EAAE,0BAAQ;AAlBS,GAAb,CAArB;AAoBAqJ,gBAAc,CAAChB,IAAD,EAAO,WAAP,EAAoB,KAApB,CAAd;AAEAA,MAAI,CAACiB,eAAL,GAAuB,IAAI5L,QAAJ,CAAa;AAClCkC,kBAAc,EAAE,wBAACxvC,KAAD,EAAQse,GAAR,EAAaD,aAAb,EAA4B5H,UAA5B,EAAsC;AACpDwhC,UAAI,CAAC/c,OAAL,CAAa5a,MAAb,CAAoBtgB,KAApB,EAA2Bqe,aAA3B,EAA0CC,GAA1C,EAA+C,UAACY,MAAD,EAASzjB,IAAT,EAAa;AAC1D,YAAM8hC,MAAM,GAAG9mB,UAAU,CAACyI,MAAD,EAASzjB,IAAT,CAAzB;AACA07C,2CAAmC,CACjCc,IAAI,CAACkB,WAD4B,EAEjCn5C,KAAK,CAACE,KAF2B,EAGjCq9B,MAHiC,CAAnC;AAKD,OAPD,EADoD;;AAUpD,aAAO,EAAP;AACD,KAZiC;AAalCqS,iBAAa,EAAE,uBAAC5vC,KAAD,EAAQse,GAAR,EAAW;AACxB25B,UAAI,CAAC/c,OAAL,CAAake,QAAb,CAAsBp5C,KAAtB,EAA6Bse,GAA7B;AACD;AAfiC,GAAb,CAAvB;AAiBD;AAED;;;;;SAGgB+6B,eAAepB,MAAU;AACvC,MAAMqB,UAAU,GAAGrB,IAAI,CAACa,SAAL,CAAe5Z,OAAf,CAAuB,IAAInnB,IAAJ,CAAS,wBAAT,CAAvB,CAAnB;AACA,MAAMwhC,MAAM,GAAID,UAAU,CAAC7zB,GAAX,MAA+B,CAA/C;AACA,SAAO,IAAIjE,IAAJ,GAAWC,OAAX,KAAuB83B,MAA9B;AACD;AAED;;;;;SAGgBC,yBAAyBvB,MAAU;AACjD,SAAOtF,kBAAkB,CAAC;AACxB58B,aAAS,EAAEsjC,cAAc,CAACpB,IAAD;AADD,GAAD,CAAzB;AAGD;AAED;;;;;AAGA,SAASI,gBAAT,CACEJ,IADF,EAEEzhC,UAFF,EAGE/a,IAHF,EAIE28C,OAJF,EAKE95B,GALF,EAKoB;;AAGlB25B,MAAI,CAACwB,eAAL;AACA,MAAMjhC,IAAI,GAAG,IAAIT,IAAJ,CAASvB,UAAT,CAAb;AACA/a,MAAI,GAAGw8C,IAAI,CAACyB,4BAAL,GACHzB,IAAI,CAACyB,4BAAL,CAAkCljC,UAAlC,EAA8C/a,IAA9C,CADG,GAEHA,IAFJ;AAGA,MAAI8hC,MAAM,GAAG,EAAb;;AACA,MAAIjf,GAAJ,EAAS;AACP,QAAI85B,OAAJ,EAAa;AACX,UAAMuB,cAAc,GAAGl2B,GAAG,CACxBhoB,IADwB,EAExB,UAACm+C,GAAD;AAAA,eAAkBzvB,YAAY,CAACyvB,GAAD,CAA9B;AAAA,OAFwB,CAA1B;AAIArc,YAAM,GAAG4S,6BAA6B,CACpC8H,IAAI,CAACiB,eAD+B,EAEpC1gC,IAFoC,EAGpCmhC,cAHoC,EAIpCr7B,GAJoC,CAAtC;AAMD,KAXD,MAWO;AACL,UAAMu7B,UAAU,GAAG1vB,YAAY,CAAC1uB,IAAD,CAA/B;AACA8hC,YAAM,GAAG2S,iCAAiC,CACxC+H,IAAI,CAACiB,eADmC,EAExC1gC,IAFwC,EAGxCqhC,UAHwC,EAIxCv7B,GAJwC,CAA1C;AAMD;AACF,GArBD,MAqBO,IAAI85B,OAAJ,EAAa;AAClB,QAAM7V,eAAe,GAAG9e,GAAG,CACzBhoB,IADyB,EAEzB,UAACm+C,GAAD;AAAA,aAAkBzvB,YAAY,CAACyvB,GAAD,CAA9B;AAAA,KAFyB,CAA3B;AAIArc,UAAM,GAAG4Q,wBAAwB,CAC/B8J,IAAI,CAACiB,eAD0B,EAE/B1gC,IAF+B,EAG/B+pB,eAH+B,CAAjC;AAKD,GAVM,MAUA;AACL,QAAMlR,IAAI,GAAGlH,YAAY,CAAC1uB,IAAD,CAAzB;AACA8hC,UAAM,GAAG2Q,4BAA4B,CAAC+J,IAAI,CAACiB,eAAN,EAAuB1gC,IAAvB,EAA6B6Y,IAA7B,CAArC;AACD;;AACD,MAAIiC,YAAY,GAAG9a,IAAnB;;AACA,MAAI+kB,MAAM,CAAC7jC,MAAP,GAAgB,CAApB,EAAuB;;;AAGrB45B,gBAAY,GAAGwmB,qBAAqB,CAAC7B,IAAD,EAAOz/B,IAAP,CAApC;AACD;;AACD2+B,qCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB7lB,YAAnB,EAAiCiK,MAAjC,CAAnC;AACD;;AAUD,SAAS+a,mBAAT,CAA6BL,IAA7B,EAAyCO,aAAzC,EAA+D;AAC7DS,gBAAc,CAAChB,IAAD,EAAO,WAAP,EAAoBO,aAApB,CAAd;;AACA,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3BuB,6BAAyB,CAAC9B,IAAD,CAAzB;AACD;AACF;;AAED,SAASQ,sBAAT,CAAgCR,IAAhC,EAA4ChX,OAA5C,EAA2D;AACzDjjC,MAAI,CAACijC,OAAD,EAAU,UAAC9pC,GAAD,EAAcC,KAAd,EAA4B;AACxC6hD,kBAAc,CAAChB,IAAD,EAAO9gD,GAAP,EAAYC,KAAZ,CAAd;AACD,GAFG,CAAJ;AAGD;;AAED,SAAS6hD,cAAT,CAAwBhB,IAAxB,EAAoCzhC,UAApC,EAAwDpf,KAAxD,EAAsE;AACpE,MAAMohB,IAAI,GAAG,IAAIT,IAAJ,CAAS,YAAYvB,UAArB,CAAb;AACA,MAAMyO,OAAO,GAAGkF,YAAY,CAAC/yB,KAAD,CAA5B;AACA6gD,MAAI,CAACa,SAAL,CAAekB,cAAf,CAA8BxhC,IAA9B,EAAoCyM,OAApC;AACA,MAAMsY,MAAM,GAAG2Q,4BAA4B,CACzC+J,IAAI,CAACc,aADoC,EAEzCvgC,IAFyC,EAGzCyM,OAHyC,CAA3C;AAKAkyB,qCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB3gC,IAAnB,EAAyB+kB,MAAzB,CAAnC;AACD;;AAED,SAAS0c,kBAAT,CAA4BhC,IAA5B,EAAsC;AACpC,SAAOA,IAAI,CAACiC,YAAL,EAAP;AACD;AAED;;;;;;;;;;;;;;;;;SAegBC,aAAalC,MAAYj4C,OAAmB;;AAE1D,MAAMo6C,MAAM,GAAGnJ,sBAAsB,CAACgH,IAAI,CAACiB,eAAN,EAAuBl5C,KAAvB,CAArC;;AACA,MAAIo6C,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAO34C,OAAO,CAACC,OAAR,CAAgB04C,MAAhB,CAAP;AACD;;AACD,SAAOnC,IAAI,CAAC/c,OAAL,CAAatgC,GAAb,CAAiBoF,KAAjB,EAAwBuB,IAAxB,CACL,iBAAO;AACL,QAAMsjB,IAAI,GAAGsF,YAAY,CAAC1U,OAAD,CAAZ,CAAgCme,SAAhC,CACX5zB,KAAK,CAAC2e,YAAN,CAAmB+F,QAAnB,EADW,CAAb;AAGA,QAAM6Y,MAAM,GAAG2Q,4BAA4B,CACzC+J,IAAI,CAACiB,eADoC,EAEzCl5C,KAAK,CAACE,KAFmC,EAGzC2kB,IAHyC,CAA3C;AAKAmyB,+BAA2B,CAACiB,IAAI,CAACkB,WAAN,EAAmBn5C,KAAK,CAACE,KAAzB,EAAgCq9B,MAAhC,CAA3B;AACA,WAAO97B,OAAO,CAACC,OAAR,CAAgBmjB,IAAhB,CAAP;AACD,GAZI,EAaL,aAAG;AACDw1B,WAAO,CAACpC,IAAD,EAAO,mBAAmBzgD,SAAS,CAACwI,KAAD,CAA5B,GAAsC,WAAtC,GAAoDs6C,GAA3D,CAAP;AACA,WAAO74C,OAAO,CAACE,MAAR,CAAe,IAAIzG,KAAJ,CAAUo/C,GAAV,CAAf,CAAP;AACD,GAhBI,CAAP;AAkBD;;SAEeC,oBACdtC,MACAz/B,MACAgiC,QACAlsB,aACA7X,YAAyE;AAEzE4jC,SAAO,CAACpC,IAAD,EAAO,KAAP,EAAc;AACnBz/B,QAAI,EAAEA,IAAI,CAAC1gB,QAAL,EADa;AAEnBV,SAAK,EAAEojD,MAFY;AAGnBlyB,YAAQ,EAAEgG;AAHS,GAAd,CAAP,CAFyE;;;AAUzE,MAAMwkB,YAAY,GAAG0G,wBAAwB,CAACvB,IAAD,CAA7C;AACA,MAAMwC,iBAAiB,GAAGtwB,YAAY,CAACqwB,MAAD,EAASlsB,WAAT,CAAtC;AACA,MAAM6c,QAAQ,GAAG4F,8BAA8B,CAACkH,IAAI,CAACiB,eAAN,EAAuB1gC,IAAvB,CAA/C;AACA,MAAMyM,OAAO,GAAGsuB,4BAA4B,CAC1CkH,iBAD0C,EAE1CtP,QAF0C,EAG1C2H,YAH0C,CAA5C;AAMA,MAAM5Q,OAAO,GAAG+X,kBAAkB,CAAChC,IAAD,CAAlC;AACA,MAAM1a,MAAM,GAAGiQ,0BAA0B,CACvCyK,IAAI,CAACiB,eADkC,EAEvC1gC,IAFuC,EAGvCyM,OAHuC,EAIvCid,OAJuC,EAKvC,IALuC,CAAzC;AAOAwU,uBAAqB,CAACuB,IAAI,CAACkB,WAAN,EAAmB5b,MAAnB,CAArB;AACA0a,MAAI,CAAC/c,OAAL,CAAa1X,GAAb,CACEhL,IAAI,CAAC1gB,QAAL,EADF,EAEE2iD,iBAAiB,CAACh1B,GAAlB;AAAqB;AAAa,MAAlC,CAFF,EAGE,UAACvG,MAAD,EAASgC,WAAT,EAAoB;AAClB,QAAMw5B,OAAO,GAAGx7B,MAAM,KAAK,IAA3B;;AACA,QAAI,CAACw7B,OAAL,EAAc;AACZv/C,UAAI,CAAC,YAAYqd,IAAZ,GAAmB,WAAnB,GAAiC0G,MAAlC,CAAJ;AACD;;AAED,QAAMy7B,WAAW,GAAG3M,oBAAoB,CACtCiK,IAAI,CAACiB,eADiC,EAEtChX,OAFsC,EAGtC,CAACwY,OAHqC,CAAxC;AAKAvD,uCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB3gC,IAAnB,EAAyBmiC,WAAzB,CAAnC;AACAC,8BAA0B,CAAC3C,IAAD,EAAOxhC,UAAP,EAAmByI,MAAnB,EAA2BgC,WAA3B,CAA1B;AACD,GAhBH;AAkBA,MAAMoS,YAAY,GAAGunB,qBAAqB,CAAC5C,IAAD,EAAOz/B,IAAP,CAA1C;AACAshC,uBAAqB,CAAC7B,IAAD,EAAO3kB,YAAP,CAArB,CA/CyE;;AAiDzE6jB,qCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB7lB,YAAnB,EAAiC,EAAjC,CAAnC;AACD;;SAEewnB,WACd7C,MACAz/B,MACAuiC,iBACAtkC,YAAyE;AAEzE4jC,SAAO,CAACpC,IAAD,EAAO,QAAP,EAAiB;AAAEz/B,QAAI,EAAEA,IAAI,CAAC1gB,QAAL,EAAR;AAAyBV,SAAK,EAAE2jD;AAAhC,GAAjB,CAAP,CAFyE;;AAKzE,MAAI3Z,KAAK,GAAG,IAAZ;AACA,MAAM0R,YAAY,GAAG0G,wBAAwB,CAACvB,IAAD,CAA7C;AACA,MAAM1V,eAAe,GAA0B,EAA/C;AACAvkC,MAAI,CAAC+8C,eAAD,EAAkB,UAACC,UAAD,EAAqBC,YAArB,EAA0C;AAC9D7Z,SAAK,GAAG,KAAR;AACAmB,mBAAe,CAACyY,UAAD,CAAf,GAA8B3H,wBAAwB,CACpDl6B,SAAS,CAACX,IAAD,EAAOwiC,UAAP,CAD2C,EAEpD7wB,YAAY,CAAC8wB,YAAD,CAFwC,EAGpDhD,IAAI,CAACiB,eAH+C,EAIpDpG,YAJoD,CAAtD;AAMD,GARG,CAAJ;;AAUA,MAAI,CAAC1R,KAAL,EAAY;AACV,QAAMc,OAAO,GAAG+X,kBAAkB,CAAChC,IAAD,CAAlC;AACA,QAAM1a,MAAM,GAAGsQ,sBAAsB,CACnCoK,IAAI,CAACiB,eAD8B,EAEnC1gC,IAFmC,EAGnC+pB,eAHmC,EAInCL,OAJmC,CAArC;AAMAwU,yBAAqB,CAACuB,IAAI,CAACkB,WAAN,EAAmB5b,MAAnB,CAArB;AACA0a,QAAI,CAAC/c,OAAL,CAAa8I,KAAb,CACExrB,IAAI,CAAC1gB,QAAL,EADF,EAEEijD,eAFF,EAGE,UAAC77B,MAAD,EAASgC,WAAT,EAAoB;AAClB,UAAMw5B,OAAO,GAAGx7B,MAAM,KAAK,IAA3B;;AACA,UAAI,CAACw7B,OAAL,EAAc;AACZv/C,YAAI,CAAC,eAAeqd,IAAf,GAAsB,WAAtB,GAAoC0G,MAArC,CAAJ;AACD;;AAED,UAAMy7B,WAAW,GAAG3M,oBAAoB,CACtCiK,IAAI,CAACiB,eADiC,EAEtChX,OAFsC,EAGtC,CAACwY,OAHqC,CAAxC;AAKA,UAAMpnB,YAAY,GAChBqnB,WAAW,CAACjhD,MAAZ,GAAqB,CAArB,GAAyBogD,qBAAqB,CAAC7B,IAAD,EAAOz/B,IAAP,CAA9C,GAA6DA,IAD/D;AAEA2+B,yCAAmC,CACjCc,IAAI,CAACkB,WAD4B,EAEjC7lB,YAFiC,EAGjCqnB,WAHiC,CAAnC;AAKAC,gCAA0B,CAAC3C,IAAD,EAAOxhC,UAAP,EAAmByI,MAAnB,EAA2BgC,WAA3B,CAA1B;AACD,KAtBH;AAyBAljB,QAAI,CAAC+8C,eAAD,EAAkB,UAAC3D,WAAD,EAAoB;AACxC,UAAM9jB,YAAY,GAAGunB,qBAAqB,CACxC5C,IADwC,EAExC9+B,SAAS,CAACX,IAAD,EAAO4+B,WAAP,CAF+B,CAA1C;AAIA0C,2BAAqB,CAAC7B,IAAD,EAAO3kB,YAAP,CAArB;AACD,KANG,CAAJ,CAlCU;;AA2CV6jB,uCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB3gC,IAAnB,EAAyB,EAAzB,CAAnC;AACD,GA5CD,MA4CO;AACLhe,OAAG,CAAC,sDAAD,CAAH;AACAogD,8BAA0B,CAAC3C,IAAD,EAAOxhC,UAAP,EAAmB,IAAnB,EAAyByH,SAAzB,CAA1B;AACD;AACF;AAED;;;;;AAGA,SAAS67B,yBAAT,CAAmC9B,IAAnC,EAA6C;AAC3CoC,SAAO,CAACpC,IAAD,EAAO,oBAAP,CAAP;AAEA,MAAMnF,YAAY,GAAG0G,wBAAwB,CAACvB,IAAD,CAA7C;AACA,MAAMiD,wBAAwB,GAAGthB,qBAAqB,EAAtD;AACAO,+BAA6B,CAC3B8d,IAAI,CAAClwC,aADsB,EAE3BuQ,YAAY,EAFe,EAG3B,UAACE,IAAD,EAAOqM,IAAP,EAAW;AACT,QAAMs2B,QAAQ,GAAG9H,wBAAwB,CACvC76B,IADuC,EAEvCqM,IAFuC,EAGvCozB,IAAI,CAACiB,eAHkC,EAIvCpG,YAJuC,CAAzC;AAMAjZ,8BAA0B,CAACqhB,wBAAD,EAA2B1iC,IAA3B,EAAiC2iC,QAAjC,CAA1B;AACD,GAX0B,CAA7B;AAaA,MAAI5d,MAAM,GAAY,EAAtB;AAEApD,+BAA6B,CAC3B+gB,wBAD2B,EAE3B5iC,YAAY,EAFe,EAG3B,UAACE,IAAD,EAAO6Y,IAAP,EAAW;AACTkM,UAAM,GAAGA,MAAM,CAAC8N,MAAP,CACP6C,4BAA4B,CAAC+J,IAAI,CAACiB,eAAN,EAAuB1gC,IAAvB,EAA6B6Y,IAA7B,CADrB,CAAT;AAGA,QAAMiC,YAAY,GAAGunB,qBAAqB,CAAC5C,IAAD,EAAOz/B,IAAP,CAA1C;AACAshC,yBAAqB,CAAC7B,IAAD,EAAO3kB,YAAP,CAArB;AACD,GAT0B,CAA7B;AAYA2kB,MAAI,CAAClwC,aAAL,GAAqB6xB,qBAAqB,EAA1C;AACAud,qCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB7gC,YAAY,EAA/B,EAAmCilB,MAAnC,CAAnC;AACD;;SAEe6d,uBACdnD,MACAz/B,MACA/B,YAAyE;AAEzEwhC,MAAI,CAAC/c,OAAL,CAAamgB,kBAAb,CAAgC7iC,IAAI,CAAC1gB,QAAL,EAAhC,EAAiD,UAAConB,MAAD,EAASgC,WAAT,EAAoB;AACnE,QAAIhC,MAAM,KAAK,IAAf,EAAqB;AACnB8a,8BAAwB,CAACie,IAAI,CAAClwC,aAAN,EAAqByQ,IAArB,CAAxB;AACD;;AACDoiC,8BAA0B,CAAC3C,IAAD,EAAOxhC,UAAP,EAAmByI,MAAnB,EAA2BgC,WAA3B,CAA1B;AACD,GALD;AAMD;;SAEeo6B,oBACdrD,MACAz/B,MACAphB,OACAqf,YAAyE;AAEzE,MAAMwO,OAAO,GAAGkF,YAAY,CAAC/yB,KAAD,CAA5B;AACA6gD,MAAI,CAAC/c,OAAL,CAAaqgB,eAAb,CACE/iC,IAAI,CAAC1gB,QAAL,EADF,EAEEmtB,OAAO,CAACQ,GAAR;AAAW;AAAa,MAAxB,CAFF,EAGE,UAACvG,MAAD,EAASgC,WAAT,EAAoB;AAClB,QAAIhC,MAAM,KAAK,IAAf,EAAqB;AACnB2a,gCAA0B,CAACoe,IAAI,CAAClwC,aAAN,EAAqByQ,IAArB,EAA2ByM,OAA3B,CAA1B;AACD;;AACD21B,8BAA0B,CAAC3C,IAAD,EAAOxhC,UAAP,EAAmByI,MAAnB,EAA2BgC,WAA3B,CAA1B;AACD,GARH;AAUD;;SAEes6B,gCACdvD,MACAz/B,MACAphB,OACAkxB,UACA7R,YAAyE;AAEzE,MAAMwO,OAAO,GAAGkF,YAAY,CAAC/yB,KAAD,EAAQkxB,QAAR,CAA5B;AACA2vB,MAAI,CAAC/c,OAAL,CAAaqgB,eAAb,CACE/iC,IAAI,CAAC1gB,QAAL,EADF,EAEEmtB,OAAO,CAACQ,GAAR;AAAW;AAAa,MAAxB,CAFF,EAGE,UAACvG,MAAD,EAASgC,WAAT,EAAoB;AAClB,QAAIhC,MAAM,KAAK,IAAf,EAAqB;AACnB2a,gCAA0B,CAACoe,IAAI,CAAClwC,aAAN,EAAqByQ,IAArB,EAA2ByM,OAA3B,CAA1B;AACD;;AACD21B,8BAA0B,CAAC3C,IAAD,EAAOxhC,UAAP,EAAmByI,MAAnB,EAA2BgC,WAA3B,CAA1B;AACD,GARH;AAUD;;SAEeu6B,uBACdxD,MACAz/B,MACAuiC,iBACAtkC,YAAyE;AAEzE,MAAI4M,OAAO,CAAC03B,eAAD,CAAX,EAA8B;AAC5BvgD,OAAG,CAAC,qEAAD,CAAH;AACAogD,8BAA0B,CAAC3C,IAAD,EAAOxhC,UAAP,EAAmB,IAAnB,EAAyByH,SAAzB,CAA1B;AACA;AACD;;AAED+5B,MAAI,CAAC/c,OAAL,CAAawgB,iBAAb,CACEljC,IAAI,CAAC1gB,QAAL,EADF,EAEEijD,eAFF,EAGE,UAAC77B,MAAD,EAASgC,WAAT,EAAoB;AAClB,QAAIhC,MAAM,KAAK,IAAf,EAAqB;AACnBlhB,UAAI,CAAC+8C,eAAD,EAAkB,UAAC/xB,SAAD,EAAoBC,SAApB,EAAsC;AAC1D,YAAMC,YAAY,GAAGiB,YAAY,CAAClB,SAAD,CAAjC;AACA4Q,kCAA0B,CACxBoe,IAAI,CAAClwC,aADmB,EAExBoR,SAAS,CAACX,IAAD,EAAOwQ,SAAP,CAFe,EAGxBE,YAHwB,CAA1B;AAKD,OAPG,CAAJ;AAQD;;AACD0xB,8BAA0B,CAAC3C,IAAD,EAAOxhC,UAAP,EAAmByI,MAAnB,EAA2BgC,WAA3B,CAA1B;AACD,GAfH;AAiBD;;SAEey6B,6BACd1D,MACAj4C,OACA4qC,mBAAoC;AAEpC,MAAIrN,MAAJ;;AACA,MAAIhlB,YAAY,CAACvY,KAAK,CAACE,KAAP,CAAZ,KAA8B,OAAlC,EAA2C;AACzCq9B,UAAM,GAAG6S,4BAA4B,CACnC6H,IAAI,CAACc,aAD8B,EAEnC/4C,KAFmC,EAGnC4qC,iBAHmC,CAArC;AAKD,GAND,MAMO;AACLrN,UAAM,GAAG6S,4BAA4B,CACnC6H,IAAI,CAACiB,eAD8B,EAEnCl5C,KAFmC,EAGnC4qC,iBAHmC,CAArC;AAKD;;AACDoM,6BAA2B,CAACiB,IAAI,CAACkB,WAAN,EAAmBn5C,KAAK,CAACE,KAAzB,EAAgCq9B,MAAhC,CAA3B;AACD;;SAEeqe,gCACd3D,MACAj4C,OACA4qC,mBAAoC;;;AAIpC,MAAIrN,MAAJ;;AACA,MAAIhlB,YAAY,CAACvY,KAAK,CAACE,KAAP,CAAZ,KAA8B,OAAlC,EAA2C;AACzCq9B,UAAM,GAAGqR,+BAA+B,CACtCqJ,IAAI,CAACc,aADiC,EAEtC/4C,KAFsC,EAGtC4qC,iBAHsC,CAAxC;AAKD,GAND,MAMO;AACLrN,UAAM,GAAGqR,+BAA+B,CACtCqJ,IAAI,CAACiB,eADiC,EAEtCl5C,KAFsC,EAGtC4qC,iBAHsC,CAAxC;AAKD;;AACDoM,6BAA2B,CAACiB,IAAI,CAACkB,WAAN,EAAmBn5C,KAAK,CAACE,KAAzB,EAAgCq9B,MAAhC,CAA3B;AACD;;SAEese,cAAc5D,MAAU;AACtC,MAAIA,IAAI,CAACM,qBAAT,EAAgC;AAC9BN,QAAI,CAACM,qBAAL,CAA2Bp1B,SAA3B,CAAqCw0B,gBAArC;AACD;AACF;;SAEemE,WAAW7D,MAAU;AACnC,MAAIA,IAAI,CAACM,qBAAT,EAAgC;AAC9BN,QAAI,CAACM,qBAAL,CAA2BwD,MAA3B,CAAkCpE,gBAAlC;AACD;AACF;;AAsCD,SAAS0C,OAAT,CAAiBpC,IAAjB,EAAkD;AAChD,MAAIl9C,MAAM,GAAG,EAAb;;AACA,MAAIk9C,IAAI,CAACM,qBAAT,EAAgC;AAC9Bx9C,UAAM,GAAGk9C,IAAI,CAACM,qBAAL,CAA2B3/C,EAA3B,GAAgC,GAAzC;AACD;;AAJ+C,qCAAlBiC,OAAkB;AAAlBA,WAAkB;AAAA;;AAKhDL,KAAG,MAAH,UAAIO,MAAJ,SAAeF,OAAf;AACD;;SAEe+/C,2BACd3C,MACAxyC,UACAyZ,QACAgC,aAA2B;AAE3B,MAAIzb,QAAJ,EAAc;AACZhF,kBAAc,CAAC;AACb,UAAIye,MAAM,KAAK,IAAf,EAAqB;AACnBzZ,gBAAQ,CAAC,IAAD,CAAR;AACD,OAFD,MAEO;AACL,YAAM1F,IAAI,GAAG,CAACmf,MAAM,IAAI,OAAX,EAAoB/e,WAApB,EAAb;AACA,YAAI3G,OAAO,GAAGuG,IAAd;;AACA,YAAImhB,WAAJ,EAAiB;AACf1nB,iBAAO,IAAI,OAAO0nB,WAAlB;AACD;;AAED,YAAMlmB,OAAK,GAAG,IAAIE,KAAJ,CAAU1B,OAAV,CAAd,CAPK;;;AAUJwB,eAAa,CAAC+E,IAAd,GAAqBA,IAArB;AACD0F,gBAAQ,CAACzK,OAAD,CAAR;AACD;AACF,KAhBa,CAAd;AAiBD;AACF;AAED;;;;;;;;;;;;;SAWgBghD,qBACd/D,MACAz/B,MACAyjC,mBACAxlC,YACAylC,WACAC,cAAqB;AAErB9B,SAAO,CAACpC,IAAD,EAAO,oBAAoBz/B,IAA3B,CAAP,CAFqB;;AAKrB,MAAM4jC,WAAW,GAAgB;AAC/B5jC,QAAI,EAAJA,IAD+B;AAE/Btf,UAAM,EAAE+iD,iBAFuB;AAG/BxlC,cAAU,EAAVA,UAH+B;;AAK/ByI,UAAM,EAAE,IALuB;;;AAQ/Bm9B,SAAK,EAAE1jD,aAAa,EARW;;AAU/BwjD,gBAAY,EAAZA,YAV+B;;AAY/BG,cAAU,EAAE,CAZmB;;AAc/BJ,aAAS,EAATA,SAd+B;;AAgB/BK,eAAW,EAAE,IAhBkB;AAiB/BC,kBAAc,EAAE,IAjBe;AAkB/BC,wBAAoB,EAAE,IAlBS;AAmB/BC,4BAAwB,EAAE,IAnBK;AAoB/BC,iCAA6B,EAAE;AApBA,GAAjC,CALqB;;AA6BrB,MAAMC,YAAY,GAAGC,kBAAkB,CAAC5E,IAAD,EAAOz/B,IAAP,EAAa0F,SAAb,CAAvC;AACAk+B,aAAW,CAACK,oBAAZ,GAAmCG,YAAnC;AACA,MAAMpC,MAAM,GAAG4B,WAAW,CAACljD,MAAZ,CAAmB0jD,YAAY,CAACn3B,GAAb,EAAnB,CAAf;;AACA,MAAI+0B,MAAM,KAAKt8B,SAAf,EAA0B;;AAExBk+B,eAAW,CAACF,SAAZ;AACAE,eAAW,CAACM,wBAAZ,GAAuC,IAAvC;AACAN,eAAW,CAACO,6BAAZ,GAA4C,IAA5C;;AACA,QAAIP,WAAW,CAAC3lC,UAAhB,EAA4B;AAC1B2lC,iBAAW,CAAC3lC,UAAZ,CAAuB,IAAvB,EAA6B,KAA7B,EAAoC2lC,WAAW,CAACK,oBAAhD;AACD;AACF,GARD,MAQO;AACLlH,wBAAoB,CAClB,oCADkB,EAElBiF,MAFkB,EAGlB4B,WAAW,CAAC5jC,IAHM,CAApB,CADK;;AAQL4jC,eAAW,CAACl9B,MAAZ,GAAkB;AAAA;AAAlB;AACA,QAAM49B,SAAS,GAAGhJ,WAAW,CAACmE,IAAI,CAAC8E,qBAAN,EAA6BvkC,IAA7B,CAA7B;AACA,QAAMwkC,SAAS,GAAGhJ,YAAY,CAAC8I,SAAD,CAAZ,IAA2B,EAA7C;AACAE,aAAS,CAACx/C,IAAV,CAAe4+C,WAAf;AAEAnI,gBAAY,CAAC6I,SAAD,EAAYE,SAAZ,CAAZ,CAbK;;;;;AAmBL,QAAIC,eAAJ;;AACA,QACE,OAAOzC,MAAP,KAAkB,QAAlB,IACAA,MAAM,KAAK,IADX,IAEAviD,QAAQ,CAACuiD,MAAD,EAAS,WAAT,CAHV,EAIE;;AAEAyC,qBAAe,GAAGz4B,OAAO,CAACg2B,MAAD,EAAgB,WAAhB,CAAzB;AACApgD,YAAM,CACJg7C,eAAe,CAAC6H,eAAD,CADX,EAEJ,+CACE,wEAHE,CAAN;AAKD,KAZD,MAYO;AACL,UAAMC,WAAW,GACfnM,8BAA8B,CAACkH,IAAI,CAACiB,eAAN,EAAuB1gC,IAAvB,CAA9B,IACAsV,YAAY,CAACzH,UAFf;AAGA42B,qBAAe,GAAGC,WAAW,CAACx0B,WAAZ,GAA0BjD,GAA1B,EAAlB;AACD;;AAED,QAAMqtB,YAAY,GAAG0G,wBAAwB,CAACvB,IAAD,CAA7C;AACA,QAAMwC,iBAAiB,GAAGtwB,YAAY,CAACqwB,MAAD,EAASyC,eAAT,CAAtC;AACA,QAAMh4B,OAAO,GAAGsuB,4BAA4B,CAC1CkH,iBAD0C,EAE1CmC,YAF0C,EAG1C9J,YAH0C,CAA5C;AAKAsJ,eAAW,CAACM,wBAAZ,GAAuCjC,iBAAvC;AACA2B,eAAW,CAACO,6BAAZ,GAA4C13B,OAA5C;AACAm3B,eAAW,CAACI,cAAZ,GAA6BvC,kBAAkB,CAAChC,IAAD,CAA/C;AAEA,QAAM1a,MAAM,GAAGiQ,0BAA0B,CACvCyK,IAAI,CAACiB,eADkC,EAEvC1gC,IAFuC,EAGvCyM,OAHuC,EAIvCm3B,WAAW,CAACI,cAJ2B,EAKvCJ,WAAW,CAACD,YAL2B,CAAzC;AAOAhF,uCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB3gC,IAAnB,EAAyB+kB,MAAzB,CAAnC;AAEA4f,6BAAyB,CAAClF,IAAD,EAAOA,IAAI,CAAC8E,qBAAZ,CAAzB;AACD;AACF;AAED;;;;;AAGA,SAASF,kBAAT,CACE5E,IADF,EAEEz/B,IAFF,EAGE4kC,WAHF,EAGwB;AAEtB,SACErM,8BAA8B,CAACkH,IAAI,CAACiB,eAAN,EAAuB1gC,IAAvB,EAA6B4kC,WAA7B,CAA9B,IACAtvB,YAAY,CAACzH,UAFf;AAID;AAED;;;;;;;;;;;AASA,SAAS82B,yBAAT,CACElF,IADF,EAEwD;AAAA,MAAtDpzB,IAAsD,uEAA1BozB,IAAI,CAAC8E,qBAAqB;;;AAGtD,MAAI,CAACl4B,IAAL,EAAW;AACTw4B,2CAAuC,CAACpF,IAAD,EAAOpzB,IAAP,CAAvC;AACD;;AAED,MAAImvB,YAAY,CAACnvB,IAAD,CAAhB,EAAwB;AACtB,QAAMy4B,KAAK,GAAGC,yBAAyB,CAACtF,IAAD,EAAOpzB,IAAP,CAAvC;AACAzqB,UAAM,CAACkjD,KAAK,CAAC5jD,MAAN,GAAe,CAAhB,EAAmB,uCAAnB,CAAN;AAEA,QAAM8jD,MAAM,GAAGF,KAAK,CAACG,KAAN,CACb,UAACrB,WAAD;AAAA,aAA8BA,WAAW,CAACl9B,MAAZ,KAAkB,CAAhD;AAAA;AAAgD;AADnC,KAAf,CAJsB;;AAStB,QAAIs+B,MAAJ,EAAY;AACVE,8BAAwB,CAACzF,IAAD,EAAOvD,WAAW,CAAC7vB,IAAD,CAAlB,EAA0By4B,KAA1B,CAAxB;AACD;AACF,GAZD,MAYO,IAAInJ,eAAe,CAACtvB,IAAD,CAAnB,EAA2B;AAChCwvB,oBAAgB,CAACxvB,IAAD,EAAO,mBAAS;AAC9Bs4B,+BAAyB,CAAClF,IAAD,EAAOhvB,SAAP,CAAzB;AACD,KAFe,CAAhB;AAGD;AACF;AAED;;;;;;;;;AAOA,SAASy0B,wBAAT,CACEzF,IADF,EAEEz/B,IAFF,EAGE8kC,KAHF,EAGsB;;AAGpB,MAAMK,YAAY,GAAGL,KAAK,CAAC75B,GAAN,CAAU,aAAG;AAChC,WAAOm6B,GAAG,CAACpB,cAAX;AACD,GAFoB,CAArB;AAGA,MAAMqB,WAAW,GAAGhB,kBAAkB,CAAC5E,IAAD,EAAOz/B,IAAP,EAAamlC,YAAb,CAAtC;AACA,MAAIG,UAAU,GAAGD,WAAjB;AACA,MAAME,UAAU,GAAGF,WAAW,CAACnnC,IAAZ,EAAnB;;AACA,OAAK,IAAIjd,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6jD,KAAK,CAAC5jD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAMmkD,GAAG,GAAGN,KAAK,CAAC7jD,CAAD,CAAjB;AACAW,UAAM,CACJwjD,GAAG,CAAC1+B,MAAJ,KAAU;AAAA;AADN,MAEJ,+DAFI,CAAN;AAIA0+B,OAAG,CAAC1+B,MAAJ,GAAU;AAAA;AAAV;AACA0+B,OAAG,CAACtB,UAAJ;AACA,QAAM/c,YAAY,GAAGhmB,eAAe,CAACf,IAAD,EAAOolC,GAAG,CAACplC,IAAX,CAApC,CARqC;;AAUrCslC,cAAU,GAAGA,UAAU,CAACx0B,WAAX,CACXiW;AAAY;AADD,MAEXqe,GAAG,CAAClB,wBAFO,CAAb;AAID;;AAED,MAAMsB,UAAU,GAAGF,UAAU,CAACr4B,GAAX,CAAe,IAAf,CAAnB;AACA,MAAMw4B,UAAU,GAAGzlC,IAAnB,CA1BoB;;AA6BpBy/B,MAAI,CAAC/c,OAAL,CAAa1X,GAAb,CACEy6B,UAAU,CAACnmD,QAAX,EADF,EAEEkmD,UAFF,EAGE,UAAC9+B,MAAD,EAAe;AACbm7B,WAAO,CAACpC,IAAD,EAAO,0BAAP,EAAmC;AACxCz/B,UAAI,EAAEylC,UAAU,CAACnmD,QAAX,EADkC;AAExConB,YAAM,EAANA;AAFwC,KAAnC,CAAP;AAKA,QAAIqe,MAAM,GAAY,EAAtB;;AACA,QAAIre,MAAM,KAAK,IAAf,EAAqB;;;;AAInB,UAAMg/B,SAAS,GAAG,EAAlB;;AAJmB,mCAKVzkD,GALU;AAMjB6jD,aAAK,CAAC7jD,GAAD,CAAL,CAASylB,MAAT,GAAe;AAAA;AAAf;AACAqe,cAAM,GAAGA,MAAM,CAAC8N,MAAP,CACP2C,oBAAoB,CAACiK,IAAI,CAACiB,eAAN,EAAuBoE,KAAK,CAAC7jD,GAAD,CAAL,CAAS+iD,cAAhC,CADb,CAAT;;AAGA,YAAIc,KAAK,CAAC7jD,GAAD,CAAL,CAASgd,UAAb,EAAyB;;;AAGvBynC,mBAAS,CAAC1gD,IAAV,CAAe;AAAA,mBACb8/C,KAAK,CAAC7jD,GAAD,CAAL,CAASgd,UAAT,CACE,IADF,EAEE,IAFF,EAGE6mC,KAAK,CAAC7jD,GAAD,CAAL,CAASkjD,6BAHX,CADa;AAAA,WAAf;AAOD;;AACDW,aAAK,CAAC7jD,GAAD,CAAL,CAASyiD,SAAT;AArBiB;;AAKnB,WAAK,IAAIziD,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG6jD,KAAK,CAAC5jD,MAA1B,EAAkCD,GAAC,EAAnC,EAAuC;AAAA,eAA9BA,GAA8B;AAiBtC,OAtBkB;;;AAyBnB4jD,6CAAuC,CACrCpF,IADqC,EAErCnE,WAAW,CAACmE,IAAI,CAAC8E,qBAAN,EAA6BvkC,IAA7B,CAF0B,CAAvC,CAzBmB;;AA8BnB2kC,+BAAyB,CAAClF,IAAD,EAAOA,IAAI,CAAC8E,qBAAZ,CAAzB;AAEA5F,yCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB3gC,IAAnB,EAAyB+kB,MAAzB,CAAnC,CAhCmB;;AAmCnB,WAAK,IAAI9jC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGykD,SAAS,CAACxkD,MAA9B,EAAsCD,GAAC,EAAvC,EAA2C;AACzCgH,sBAAc,CAACy9C,SAAS,CAACzkD,GAAD,CAAV,CAAd;AACD;AACF,KAtCD,MAsCO;;AAEL,UAAIylB,MAAM,KAAK,WAAf,EAA4B;AAC1B,aAAK,IAAIzlB,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG6jD,KAAK,CAAC5jD,MAA1B,EAAkCD,GAAC,EAAnC,EAAuC;AACrC,cAAI6jD,KAAK,CAAC7jD,GAAD,CAAL,CAASylB,MAAT,KAAe;AAAA;AAAnB,YAA4D;AAC1Do+B,iBAAK,CAAC7jD,GAAD,CAAL,CAASylB,MAAT,GAAe;AAAA;AAAf;AACD,WAFD,MAEO;AACLo+B,iBAAK,CAAC7jD,GAAD,CAAL,CAASylB,MAAT,GAAe;AAAA;AAAf;AACD;AACF;AACF,OARD,MAQO;AACL/jB,YAAI,CACF,oBAAoB8iD,UAAU,CAACnmD,QAAX,EAApB,GAA4C,WAA5C,GAA0DonB,MADxD,CAAJ;;AAGA,aAAK,IAAIzlB,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG6jD,KAAK,CAAC5jD,MAA1B,EAAkCD,GAAC,EAAnC,EAAuC;AACrC6jD,eAAK,CAAC7jD,GAAD,CAAL,CAASylB,MAAT,GAAe;AAAA;AAAf;AACAo+B,eAAK,CAAC7jD,GAAD,CAAL,CAAS8iD,WAAT,GAAuBr9B,MAAvB;AACD;AACF;;AAED46B,2BAAqB,CAAC7B,IAAD,EAAOz/B,IAAP,CAArB;AACD;AACF,GAtEH,EAuEEulC,UAvEF;AAyED;AAED;;;;;;;;;;;;;AAWA,SAASjE,qBAAT,CAA+B7B,IAA/B,EAA2Cb,WAA3C,EAA4D;AAC1D,MAAM+G,uBAAuB,GAAGC,8BAA8B,CAC5DnG,IAD4D,EAE5Db,WAF4D,CAA9D;AAIA,MAAM5+B,IAAI,GAAGk8B,WAAW,CAACyJ,uBAAD,CAAxB;AAEA,MAAMb,KAAK,GAAGC,yBAAyB,CAACtF,IAAD,EAAOkG,uBAAP,CAAvC;AACAE,2BAAyB,CAACpG,IAAD,EAAOqF,KAAP,EAAc9kC,IAAd,CAAzB;AAEA,SAAOA,IAAP;AACD;AAED;;;;;;;;;AAOA,SAAS6lC,yBAAT,CACEpG,IADF,EAEEqF,KAFF,EAGE9kC,IAHF,EAGY;AAEV,MAAI8kC,KAAK,CAAC5jD,MAAN,KAAiB,CAArB,EAAwB;AACtB,WADsB,CACf;AACR,GAJS;;;;;AASV,MAAMwkD,SAAS,GAAG,EAAlB;AACA,MAAI3gB,MAAM,GAAY,EAAtB,CAVU;;AAYV,MAAM+gB,WAAW,GAAGhB,KAAK,CAACxf,MAAN,CAAa,WAAC;AAChC,WAAOlgB,CAAC,CAACsB,MAAF,KAAQ;AAAA;AAAf;AACD,GAFmB,CAApB;AAGA,MAAMy+B,YAAY,GAAGW,WAAW,CAAC76B,GAAZ,CAAgB,WAAC;AACpC,WAAO7F,CAAC,CAAC4+B,cAAT;AACD,GAFoB,CAArB;;AAfU,+BAkBD/iD,CAlBC;AAmBR,QAAM2iD,WAAW,GAAGkB,KAAK,CAAC7jD,CAAD,CAAzB;AACA,QAAM8lC,YAAY,GAAGhmB,eAAe,CAACf,IAAD,EAAO4jC,WAAW,CAAC5jC,IAAnB,CAApC;AACA,QAAI+lC,gBAAgB,GAAG,KAAvB;AAAA,QACEhC,WAAW,SADb;AAEAniD,UAAM,CACJmlC,YAAY,KAAK,IADb,EAEJ,+DAFI,CAAN;;AAKA,QAAI6c,WAAW,CAACl9B,MAAZ,KAAkB;AAAA;AAAtB,MAA0D;AACxDq/B,sBAAgB,GAAG,IAAnB;AACAhC,iBAAW,GAAGH,WAAW,CAACG,WAA1B;AACAhf,YAAM,GAAGA,MAAM,CAAC8N,MAAP,CACP2C,oBAAoB,CAClBiK,IAAI,CAACiB,eADa,EAElBkD,WAAW,CAACI,cAFM,EAGlB,IAHkB,CADb,CAAT;AAOD,KAVD,MAUO,IAAIJ,WAAW,CAACl9B,MAAZ,KAAkB;AAAA;AAAtB,MAAkD;AACvD,UAAIk9B,WAAW,CAACE,UAAZ,IAA0B1E,uBAA9B,EAAuD;AACrD2G,wBAAgB,GAAG,IAAnB;AACAhC,mBAAW,GAAG,UAAd;AACAhf,cAAM,GAAGA,MAAM,CAAC8N,MAAP,CACP2C,oBAAoB,CAClBiK,IAAI,CAACiB,eADa,EAElBkD,WAAW,CAACI,cAFM,EAGlB,IAHkB,CADb,CAAT;AAOD,OAVD,MAUO;;AAEL,YAAMU,WAAW,GAAGL,kBAAkB,CACpC5E,IADoC,EAEpCmE,WAAW,CAAC5jC,IAFwB,EAGpCmlC,YAHoC,CAAtC;AAKAvB,mBAAW,CAACK,oBAAZ,GAAmCS,WAAnC;AACA,YAAMxP,OAAO,GAAG4P,KAAK,CAAC7jD,CAAD,CAAL,CAASP,MAAT,CAAgBgkD,WAAW,CAACz3B,GAAZ,EAAhB,CAAhB;;AACA,YAAIioB,OAAO,KAAKxvB,SAAhB,EAA2B;AACzBq3B,8BAAoB,CAClB,oCADkB,EAElB7H,OAFkB,EAGlB0O,WAAW,CAAC5jC,IAHM,CAApB;AAKA,cAAIgmC,WAAW,GAAGr0B,YAAY,CAACujB,OAAD,CAA9B;AACA,cAAM+Q,mBAAmB,GACvB,OAAO/Q,OAAP,KAAmB,QAAnB,IACAA,OAAO,IAAI,IADX,IAEAz1C,QAAQ,CAACy1C,OAAD,EAAU,WAAV,CAHV;;AAIA,cAAI,CAAC+Q,mBAAL,EAA0B;;AAExBD,uBAAW,GAAGA,WAAW,CAACr1B,cAAZ,CAA2B+zB,WAAW,CAACx0B,WAAZ,EAA3B,CAAd;AACD;;AAED,cAAMg2B,UAAU,GAAGtC,WAAW,CAACI,cAA/B;AACA,cAAM1J,YAAY,GAAG0G,wBAAwB,CAACvB,IAAD,CAA7C;AACA,cAAM0G,eAAe,GAAGpL,4BAA4B,CAClDiL,WADkD,EAElDtB,WAFkD,EAGlDpK,YAHkD,CAApD;AAMAsJ,qBAAW,CAACM,wBAAZ,GAAuC8B,WAAvC;AACApC,qBAAW,CAACO,6BAAZ,GAA4CgC,eAA5C;AACAvC,qBAAW,CAACI,cAAZ,GAA6BvC,kBAAkB,CAAChC,IAAD,CAA/C,CA1ByB;;AA4BzB0F,sBAAY,CAACrmC,MAAb,CAAoBqmC,YAAY,CAACpiD,OAAb,CAAqBmjD,UAArB,CAApB,EAAsD,CAAtD;AACAnhB,gBAAM,GAAGA,MAAM,CAAC8N,MAAP,CACPmC,0BAA0B,CACxByK,IAAI,CAACiB,eADmB,EAExBkD,WAAW,CAAC5jC,IAFY,EAGxBmmC,eAHwB,EAIxBvC,WAAW,CAACI,cAJY,EAKxBJ,WAAW,CAACD,YALY,CADnB,CAAT;AASA5e,gBAAM,GAAGA,MAAM,CAAC8N,MAAP,CACP2C,oBAAoB,CAACiK,IAAI,CAACiB,eAAN,EAAuBwF,UAAvB,EAAmC,IAAnC,CADb,CAAT;AAGD,SAzCD,MAyCO;AACLH,0BAAgB,GAAG,IAAnB;AACAhC,qBAAW,GAAG,QAAd;AACAhf,gBAAM,GAAGA,MAAM,CAAC8N,MAAP,CACP2C,oBAAoB,CAClBiK,IAAI,CAACiB,eADa,EAElBkD,WAAW,CAACI,cAFM,EAGlB,IAHkB,CADb,CAAT;AAOD;AACF;AACF;;AACDrF,uCAAmC,CAACc,IAAI,CAACkB,WAAN,EAAmB3gC,IAAnB,EAAyB+kB,MAAzB,CAAnC;AACAA,UAAM,GAAG,EAAT;;AACA,QAAIghB,gBAAJ,EAAsB;;AAEpBjB,WAAK,CAAC7jD,CAAD,CAAL,CAASylB,MAAT,GAAe;AAAA;AAAf,OAFoB;;;;AAOpB,OAAC,UAAUg9B,SAAV,EAAmB;AAClB7/C,kBAAU,CAAC6/C,SAAD,EAAY5/C,IAAI,CAACC,KAAL,CAAW,CAAX,CAAZ,CAAV;AACD,OAFD,EAEG+gD,KAAK,CAAC7jD,CAAD,CAAL,CAASyiD,SAFZ;;AAIA,UAAIoB,KAAK,CAAC7jD,CAAD,CAAL,CAASgd,UAAb,EAAyB;AACvB,YAAI8lC,WAAW,KAAK,QAApB,EAA8B;AAC5B2B,mBAAS,CAAC1gD,IAAV,CAAe;AAAA,mBACb8/C,KAAK,CAAC7jD,CAAD,CAAL,CAASgd,UAAT,CAAoB,IAApB,EAA0B,KAA1B,EAAiC6mC,KAAK,CAAC7jD,CAAD,CAAL,CAASgjD,oBAA1C,CADa;AAAA,WAAf;AAGD,SAJD,MAIO;AACLyB,mBAAS,CAAC1gD,IAAV,CAAe;AAAA,mBACb8/C,KAAK,CAAC7jD,CAAD,CAAL,CAASgd,UAAT,CAAoB,IAAIvb,KAAJ,CAAUqhD,WAAV,CAApB,EAA4C,KAA5C,EAAmD,IAAnD,CADa;AAAA,WAAf;AAGD;AACF;AACF;AAxIO;;AAkBV,OAAK,IAAI9iD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6jD,KAAK,CAAC5jD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAA,WAA9BA,CAA8B;AAuHtC,GAzIS;;;AA4IV4jD,yCAAuC,CAACpF,IAAD,EAAOA,IAAI,CAAC8E,qBAAZ,CAAvC,CA5IU;;AA+IV,OAAK,IAAItjD,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGykD,SAAS,CAACxkD,MAA9B,EAAsCD,GAAC,EAAvC,EAA2C;AACzCgH,kBAAc,CAACy9C,SAAS,CAACzkD,GAAD,CAAV,CAAd;AACD,GAjJS;;;AAoJV0jD,2BAAyB,CAAClF,IAAD,EAAOA,IAAI,CAAC8E,qBAAZ,CAAzB;AACD;AAED;;;;;;;;;;AAQA,SAASqB,8BAAT,CACEnG,IADF,EAEEz/B,IAFF,EAEY;AAEV,MAAI6Q,KAAJ,CAFU;;;AAMV,MAAIu1B,eAAe,GAAG3G,IAAI,CAAC8E,qBAA3B;AACA1zB,OAAK,GAAG9Q,YAAY,CAACC,IAAD,CAApB;;AACA,SAAO6Q,KAAK,KAAK,IAAV,IAAkB2qB,YAAY,CAAC4K,eAAD,CAAZ,KAAkC1gC,SAA3D,EAAsE;AACpE0gC,mBAAe,GAAG9K,WAAW,CAAC8K,eAAD,EAAkBv1B,KAAlB,CAA7B;AACA7Q,QAAI,GAAGE,YAAY,CAACF,IAAD,CAAnB;AACA6Q,SAAK,GAAG9Q,YAAY,CAACC,IAAD,CAApB;AACD;;AAED,SAAOomC,eAAP;AACD;AAED;;;;;;;;;AAOA,SAASrB,yBAAT,CACEtF,IADF,EAEE2G,eAFF,EAEsC;;AAGpC,MAAMC,gBAAgB,GAAkB,EAAxC;AACAC,uCAAqC,CACnC7G,IADmC,EAEnC2G,eAFmC,EAGnCC,gBAHmC,CAArC,CAJoC;;AAWpCA,kBAAgB,CAACphD,IAAjB,CAAsB,UAACZ,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,CAACw/C,KAAF,GAAUv/C,CAAC,CAACu/C,KAAtB;AAAA,GAAtB;AAEA,SAAOwC,gBAAP;AACD;;AAED,SAASC,qCAAT,CACE7G,IADF,EAEEpzB,IAFF,EAGEy4B,KAHF,EAGsB;AAEpB,MAAMN,SAAS,GAAGhJ,YAAY,CAACnvB,IAAD,CAA9B;;AACA,MAAIm4B,SAAJ,EAAe;AACb,SAAK,IAAIvjD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGujD,SAAS,CAACtjD,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC6jD,WAAK,CAAC9/C,IAAN,CAAWw/C,SAAS,CAACvjD,CAAD,CAApB;AACD;AACF;;AAED46C,kBAAgB,CAACxvB,IAAD,EAAO,eAAK;AAC1Bi6B,yCAAqC,CAAC7G,IAAD,EAAOl9B,KAAP,EAAcuiC,KAAd,CAArC;AACD,GAFe,CAAhB;AAGD;AAED;;;;;AAGA,SAASD,uCAAT,CACEpF,IADF,EAEEpzB,IAFF,EAE2B;AAEzB,MAAMy4B,KAAK,GAAGtJ,YAAY,CAACnvB,IAAD,CAA1B;;AACA,MAAIy4B,KAAJ,EAAW;AACT,QAAIyB,EAAE,GAAG,CAAT;;AACA,SAAK,IAAIlZ,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGyX,KAAK,CAAC5jD,MAAhC,EAAwCmsC,IAAI,EAA5C,EAAgD;AAC9C,UAAIyX,KAAK,CAACzX,IAAD,CAAL,CAAY3mB,MAAZ,KAAkB;AAAA;AAAtB,QAAwD;AACtDo+B,aAAK,CAACyB,EAAD,CAAL,GAAYzB,KAAK,CAACzX,IAAD,CAAjB;AACAkZ,UAAE;AACH;AACF;;AACDzB,SAAK,CAAC5jD,MAAN,GAAeqlD,EAAf;AACA9K,gBAAY,CAACpvB,IAAD,EAAOy4B,KAAK,CAAC5jD,MAAN,GAAe,CAAf,GAAmB4jD,KAAnB,GAA2Bp/B,SAAlC,CAAZ;AACD;;AAEDm2B,kBAAgB,CAACxvB,IAAD,EAAO,mBAAS;AAC9Bw4B,2CAAuC,CAACpF,IAAD,EAAOhvB,SAAP,CAAvC;AACD,GAFe,CAAhB;AAGD;AAED;;;;;;;;;AAOA,SAAS4xB,qBAAT,CAA+B5C,IAA/B,EAA2Cz/B,IAA3C,EAAqD;AACnD,MAAM8a,YAAY,GAAGohB,WAAW,CAAC0J,8BAA8B,CAACnG,IAAD,EAAOz/B,IAAP,CAA/B,CAAhC;AAEA,MAAMomC,eAAe,GAAG9K,WAAW,CAACmE,IAAI,CAAC8E,qBAAN,EAA6BvkC,IAA7B,CAAnC;AAEAi8B,qBAAmB,CAACmK,eAAD,EAAkB,UAAC/5B,IAAD,EAA0B;AAC7Dm6B,+BAA2B,CAAC/G,IAAD,EAAOpzB,IAAP,CAA3B;AACD,GAFkB,CAAnB;AAIAm6B,6BAA2B,CAAC/G,IAAD,EAAO2G,eAAP,CAA3B;AAEAtK,uBAAqB,CAACsK,eAAD,EAAkB,UAAC/5B,IAAD,EAA0B;AAC/Dm6B,+BAA2B,CAAC/G,IAAD,EAAOpzB,IAAP,CAA3B;AACD,GAFoB,CAArB;AAIA,SAAOyO,YAAP;AACD;AAED;;;;;;;AAKA,SAAS0rB,2BAAT,CACE/G,IADF,EAEEpzB,IAFF,EAE2B;AAEzB,MAAMy4B,KAAK,GAAGtJ,YAAY,CAACnvB,IAAD,CAA1B;;AACA,MAAIy4B,KAAJ,EAAW;;;;AAIT,QAAMY,SAAS,GAAG,EAAlB,CAJS;;;AAQT,QAAI3gB,MAAM,GAAY,EAAtB;AACA,QAAI0hB,QAAQ,GAAG,CAAC,CAAhB;;AACA,SAAK,IAAIxlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6jD,KAAK,CAAC5jD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAI6jD,KAAK,CAAC7jD,CAAD,CAAL,CAASylB,MAAT,KAAe;AAAA;AAAnB,QAA4D,CAA5D,KAEO,IAAIo+B,KAAK,CAAC7jD,CAAD,CAAL,CAASylB,MAAT,KAAe;AAAA;AAAnB,QAAgD;AACrD9kB,cAAM,CACJ6kD,QAAQ,KAAKxlD,CAAC,GAAG,CADb,EAEJ,iDAFI,CAAN;AAIAwlD,gBAAQ,GAAGxlD,CAAX,CALqD;;AAOrD6jD,aAAK,CAAC7jD,CAAD,CAAL,CAASylB,MAAT,GAAe;AAAA;AAAf;AACAo+B,aAAK,CAAC7jD,CAAD,CAAL,CAAS8iD,WAAT,GAAuB,KAAvB;AACD,OATM,MASA;AACLniD,cAAM,CACJkjD,KAAK,CAAC7jD,CAAD,CAAL,CAASylB,MAAT,KAAe;AAAA;AADX,UAEJ,wCAFI,CAAN,CADK;;AAMLo+B,aAAK,CAAC7jD,CAAD,CAAL,CAASyiD,SAAT;AACA3e,cAAM,GAAGA,MAAM,CAAC8N,MAAP,CACP2C,oBAAoB,CAClBiK,IAAI,CAACiB,eADa,EAElBoE,KAAK,CAAC7jD,CAAD,CAAL,CAAS+iD,cAFS,EAGlB,IAHkB,CADb,CAAT;;AAOA,YAAIc,KAAK,CAAC7jD,CAAD,CAAL,CAASgd,UAAb,EAAyB;AACvBynC,mBAAS,CAAC1gD,IAAV,CACE8/C,KAAK,CAAC7jD,CAAD,CAAL,CAASgd,UAAT,CAAoBhc,IAApB,CAAyB,IAAzB,EAA+B,IAAIS,KAAJ,CAAU,KAAV,CAA/B,EAAiD,KAAjD,EAAwD,IAAxD,CADF;AAGD;AACF;AACF;;AACD,QAAI+jD,QAAQ,KAAK,CAAC,CAAlB,EAAqB;;AAEnBhL,kBAAY,CAACpvB,IAAD,EAAO3G,SAAP,CAAZ;AACD,KAHD,MAGO;;AAELo/B,WAAK,CAAC5jD,MAAN,GAAeulD,QAAQ,GAAG,CAA1B;AACD,KAjDQ;;;AAoDT9H,uCAAmC,CACjCc,IAAI,CAACkB,WAD4B,EAEjCzE,WAAW,CAAC7vB,IAAD,CAFsB,EAGjC0Y,MAHiC,CAAnC;;AAKA,SAAK,IAAI9jC,IAAC,GAAG,CAAb,EAAgBA,IAAC,GAAGykD,SAAS,CAACxkD,MAA9B,EAAsCD,IAAC,EAAvC,EAA2C;AACzCgH,oBAAc,CAACy9C,SAAS,CAACzkD,IAAD,CAAV,CAAd;AACD;AACF;AACH;ACt/CA;;;;;;;;;;;;;;;;;;AAqBA,SAASylD,UAAT,CAAoB1oC,UAApB,EAAsC;AACpC,MAAI2oC,iBAAiB,GAAG,EAAxB;AACA,MAAMjmC,MAAM,GAAG1C,UAAU,CAAC2B,KAAX,CAAiB,GAAjB,CAAf;;AACA,OAAK,IAAI1e,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyf,MAAM,CAACxf,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAIyf,MAAM,CAACzf,CAAD,CAAN,CAAUC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAI0lD,KAAK,GAAGlmC,MAAM,CAACzf,CAAD,CAAlB;;AACA,UAAI;AACF2lD,aAAK,GAAGC,kBAAkB,CAACD,KAAK,CAACp7B,OAAN,CAAc,KAAd,EAAqB,GAArB,CAAD,CAA1B;AACD,OAFD,CAEE,OAAO1rB,CAAP,EAAU,CAAE;;AACd6mD,uBAAiB,IAAI,MAAMC,KAA3B;AACD;AACF;;AACD,SAAOD,iBAAP;AACD;AAED;;;;;AAGA,SAASG,WAAT,CAAqBC,WAArB,EAAwC;AACtC,MAAMC,OAAO,GAAG,EAAhB;;AACA,MAAID,WAAW,CAACjtB,MAAZ,CAAmB,CAAnB,MAA0B,GAA9B,EAAmC;AACjCitB,eAAW,GAAGA,WAAW,CAACxhD,SAAZ,CAAsB,CAAtB,CAAd;AACD;;AAJqC,+CAKhBwhD,WAAW,CAACpnC,KAAZ,CAAkB,GAAlB,CALgB;AAAA;;AAAA;AAKtC,6DAA8C;AAAA,UAAnCsnC,OAAmC;;AAC5C,UAAIA,OAAO,CAAC/lD,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACD;;AACD,UAAMgmD,EAAE,GAAGD,OAAO,CAACtnC,KAAR,CAAc,GAAd,CAAX;;AACA,UAAIunC,EAAE,CAAChmD,MAAH,KAAc,CAAlB,EAAqB;AACnB8lD,eAAO,CAACH,kBAAkB,CAACK,EAAE,CAAC,CAAD,CAAH,CAAnB,CAAP,GAAqCL,kBAAkB,CAACK,EAAE,CAAC,CAAD,CAAH,CAAvD;AACD,OAFD,MAEO;AACLvkD,YAAI,kCAA2BskD,OAA3B,yBAAiDF,WAAjD,OAAJ;AACD;AACF;AAfqC;AAAA;AAAA;AAAA;AAAA;;AAgBtC,SAAOC,OAAP;AACD;;AAEM,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,OAD2B,EAE3Bh8C,SAF2B,EAET;AAElB,MAAM4yC,SAAS,GAAGqJ,gBAAgB,CAACD,OAAD,CAAlC;AAAA,MACEl8C,SAAS,GAAG8yC,SAAS,CAAC9yC,SADxB;;AAGA,MAAI8yC,SAAS,CAAClrC,MAAV,KAAqB,cAAzB,EAAyC;AACvCrQ,SAAK,CACHu7C,SAAS,CAAChzC,IAAV,GACE,2BADF,GAEE,mDAHC,CAAL;AAKD,GAXiB;;;AAclB,MACE,CAAC,CAACE,SAAD,IAAcA,SAAS,KAAK,WAA7B,KACA8yC,SAAS,CAAClrC,MAAV,KAAqB,WAFvB,EAGE;AACArQ,SAAK,CACH,8EADG,CAAL;AAGD;;AAED,MAAI,CAACu7C,SAAS,CAAC/yC,MAAf,EAAuB;AACrBrI,sBAAkB;AACnB;;AAED,MAAMuI,aAAa,GAAG6yC,SAAS,CAACsJ,MAAV,KAAqB,IAArB,IAA6BtJ,SAAS,CAACsJ,MAAV,KAAqB,KAAxE;AAEA,SAAO;AACLx7C,YAAQ,EAAE,IAAIf,QAAJ,CACRizC,SAAS,CAAChzC,IADF,EAERgzC,SAAS,CAAC/yC,MAFF,EAGRC,SAHQ,EAIRE,SAJQ,EAKRD,aALQ;;AAMY,MANZ;;AAO2BD,aAAS,KAAK8yC,SAAS,CAACuJ,SAPnD,CADL;AAULvnC,QAAI,EAAE,IAAIT,IAAJ,CAASy+B,SAAS,CAAChgC,UAAnB;AAVD,GAAP;AAYD,CA3CM;;AA6CA,IAAMqpC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUD,OAAV,EAAyB;;AAWvD,MAAIp8C,IAAI,GAAG,EAAX;AAAA,MACE8H,MAAM,GAAG,EADX;AAAA,MAEEy0C,SAAS,GAAG,EAFd;AAAA,MAGEvpC,UAAU,GAAG,EAHf;AAAA,MAIE9S,SAAS,GAAG,EAJd,CAXuD;;AAkBvD,MAAID,MAAM,GAAG,IAAb;AAAA,MACEq8C,MAAM,GAAG,OADX;AAAA,MAEEE,IAAI,GAAG,GAFT,CAlBuD;;AAuBvD,MAAI,OAAOJ,OAAP,KAAmB,QAAvB,EAAiC;;AAE/B,QAAIK,QAAQ,GAAGL,OAAO,CAACrkD,OAAR,CAAgB,IAAhB,CAAf;;AACA,QAAI0kD,QAAQ,IAAI,CAAhB,EAAmB;AACjBH,YAAM,GAAGF,OAAO,CAAC7hD,SAAR,CAAkB,CAAlB,EAAqBkiD,QAAQ,GAAG,CAAhC,CAAT;AACAL,aAAO,GAAGA,OAAO,CAAC7hD,SAAR,CAAkBkiD,QAAQ,GAAG,CAA7B,CAAV;AACD,KAN8B;;;AAS/B,QAAIC,QAAQ,GAAGN,OAAO,CAACrkD,OAAR,CAAgB,GAAhB,CAAf;;AACA,QAAI2kD,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnBA,cAAQ,GAAGN,OAAO,CAAClmD,MAAnB;AACD;;AACD,QAAIymD,eAAe,GAAGP,OAAO,CAACrkD,OAAR,CAAgB,GAAhB,CAAtB;;AACA,QAAI4kD,eAAe,KAAK,CAAC,CAAzB,EAA4B;AAC1BA,qBAAe,GAAGP,OAAO,CAAClmD,MAA1B;AACD;;AACD8J,QAAI,GAAGo8C,OAAO,CAAC7hD,SAAR,CAAkB,CAAlB,EAAqBzB,IAAI,CAACuC,GAAL,CAASqhD,QAAT,EAAmBC,eAAnB,CAArB,CAAP;;AACA,QAAID,QAAQ,GAAGC,eAAf,EAAgC;;AAE9B3pC,gBAAU,GAAG0oC,UAAU,CAACU,OAAO,CAAC7hD,SAAR,CAAkBmiD,QAAlB,EAA4BC,eAA5B,CAAD,CAAvB;AACD;;AACD,QAAMroB,WAAW,GAAGwnB,WAAW,CAC7BM,OAAO,CAAC7hD,SAAR,CAAkBzB,IAAI,CAACuC,GAAL,CAAS+gD,OAAO,CAAClmD,MAAjB,EAAyBymD,eAAzB,CAAlB,CAD6B,CAA/B,CAtB+B;;AA2B/BF,YAAQ,GAAGz8C,IAAI,CAACjI,OAAL,CAAa,GAAb,CAAX;;AACA,QAAI0kD,QAAQ,IAAI,CAAhB,EAAmB;AACjBx8C,YAAM,GAAGq8C,MAAM,KAAK,OAAX,IAAsBA,MAAM,KAAK,KAA1C;AACAE,UAAI,GAAG3gD,QAAQ,CAACmE,IAAI,CAACzF,SAAL,CAAekiD,QAAQ,GAAG,CAA1B,CAAD,EAA+B,EAA/B,CAAf;AACD,KAHD,MAGO;AACLA,cAAQ,GAAGz8C,IAAI,CAAC9J,MAAhB;AACD;;AAED,QAAM0mD,eAAe,GAAG58C,IAAI,CAACwV,KAAL,CAAW,CAAX,EAAcinC,QAAd,CAAxB;;AACA,QAAIG,eAAe,CAAC7gD,WAAhB,OAAkC,WAAtC,EAAmD;AACjD+L,YAAM,GAAG,WAAT;AACD,KAFD,MAEO,IAAI80C,eAAe,CAACjoC,KAAhB,CAAsB,GAAtB,EAA2Bze,MAA3B,IAAqC,CAAzC,EAA4C;AACjD4R,YAAM,GAAG80C,eAAT;AACD,KAFM,MAEA;;AAEL,UAAMC,MAAM,GAAG78C,IAAI,CAACjI,OAAL,CAAa,GAAb,CAAf;AACAwkD,eAAS,GAAGv8C,IAAI,CAACzF,SAAL,CAAe,CAAf,EAAkBsiD,MAAlB,EAA0B9gD,WAA1B,EAAZ;AACA+L,YAAM,GAAG9H,IAAI,CAACzF,SAAL,CAAesiD,MAAM,GAAG,CAAxB,CAAT,CAJK;;AAML38C,eAAS,GAAGq8C,SAAZ;AACD,KA/C8B;;;AAiD/B,QAAI,QAAQjoB,WAAZ,EAAyB;AACvBp0B,eAAS,GAAGo0B,WAAW,CAAC,IAAD,CAAvB;AACD;AACF;;AAED,SAAO;AACLt0B,QAAI,EAAJA,IADK;AAELw8C,QAAI,EAAJA,IAFK;AAGL10C,UAAM,EAANA,MAHK;AAILy0C,aAAS,EAATA,SAJK;AAKLt8C,UAAM,EAANA,MALK;AAMLq8C,UAAM,EAANA,MANK;AAOLtpC,cAAU,EAAVA,UAPK;AAQL9S,aAAS,EAATA;AARK,GAAP;AAUD,CAvFM;ACvGP;;;;;;;;;;;;;;;;;AAiDA;;;;;IAGa48C,S;;;;;;;AAOX,qBACSvpC,SADT,EAES6zB,iBAFT,EAGS2V,QAHT,EAISliB,QAJT,EAIiC;AAAA;;AAHxB;AACA;AACA;AACA;AACL;;;;WACJ,mBAAO;AACL,UAAMmiB,GAAG,GAAG,KAAKD,QAAL,CAAcC,GAA1B;;AACA,UAAI,KAAKzpC,SAAL,KAAmB,OAAvB,EAAgC;AAC9B,eAAOypC,GAAG,CAACtgD,KAAX;AACD,OAFD,MAEO;AACL,eAAOsgD,GAAG,CAAC5M,MAAJ,CAAW1zC,KAAlB;AACD;AACF;;;WACD,wBAAY;AACV,aAAO,KAAK6W,SAAZ;AACD;;;WACD,0BAAc;AACZ,aAAO,KAAK6zB,iBAAL,CAAuB8M,cAAvB,CAAsC,IAAtC,CAAP;AACD;;;WACD,oBAAQ;AACN,aACE,KAAKZ,OAAL,GAAeh/C,QAAf,KACA,GADA,GAEA,KAAKif,SAFL,GAGA,GAHA,GAIAvf,SAAS,CAAC,KAAK+oD,QAAL,CAAcE,SAAd,EAAD,CALX;AAOD;;;;;;IAGUC,W;AACX,uBACS9V,iBADT,EAES5vC,KAFT,EAGSwd,IAHT,EAGmB;AAAA;;AAFV;AACA;AACA;AACL;;;;WACJ,mBAAO;AACL,aAAO,KAAKA,IAAZ;AACD;;;WACD,wBAAY;AACV,aAAO,QAAP;AACD;;;WACD,0BAAc;AACZ,aAAO,KAAKoyB,iBAAL,CAAuB8M,cAAvB,CAAsC,IAAtC,CAAP;AACD;;;WACD,oBAAQ;AACN,aAAO,KAAKl/B,IAAL,CAAU1gB,QAAV,KAAuB,SAA9B;AACD;;;;;AC3GH;;;;;;;;;;;;;;;;;AAyCA;;;;;;;;IAMa6oD,e;AACX,2BACmBC,gBADnB,EAEmBC,cAFnB,EAE6D;AAAA;;AAD1C;AACA;AACf;;;;WAEJ,iBACEC,eADF,EAEEC,iBAFF,EAEmC;AAEjC,WAAKH,gBAAL,CAAsBI,IAAtB,CAA2B,IAA3B,EAAiCF,eAAjC,EAAkDC,iBAAlD;AACD;;;WAED,kBAAS/lD,KAAT,EAAqB;AACnBZ,YAAM,CACJ,KAAK6mD,iBADD,EAEJ,8DAFI,CAAN;AAIA,aAAO,KAAKJ,cAAL,CAAoBG,IAApB,CAAyB,IAAzB,EAA+BhmD,KAA/B,CAAP;AACD;;;SAED,eAAqB;AACnB,aAAO,CAAC,CAAC,KAAK6lD,cAAd;AACD;;;WAED,iBAAQ1mC,KAAR,EAA8B;AAC5B,aACE,KAAKymC,gBAAL,KAA0BzmC,KAAK,CAACymC,gBAAhC,IACC,KAAKA,gBAAL,CAAsBM,YAAtB,KAAuChjC,SAAvC,IACC,KAAK0iC,gBAAL,CAAsBM,YAAtB,KACE/mC,KAAK,CAACymC,gBAAN,CAAuBM,YAF1B,IAGC,KAAKN,gBAAL,CAAsB1pC,OAAtB,KAAkCiD,KAAK,CAACymC,gBAAN,CAAuB1pC,OAL7D;AAOD;;;;;AChFH;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;;;;;;;IAoBaiqC,Y;;AAEX,wBAAoBrU,KAApB,EAAyC5sC,KAAzC,EAAoD;AAAA;;AAAhC;AAAqB;AAAe;;;;;;;;;;;;;;;WAYxD,kBAAM;AACJ,UAAMsd,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA29B,4BAAsB,CACpB,KAAKtO,KADe,EAEpB,KAAK5sC,KAFe,EAGpBsd,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CAHoB,CAAtB;AAKA,aAAO5jC,QAAQ,CAACY,OAAhB;AACD;;;;;;;;;;WAQD,kBAAM;AACJk4B,0BAAoB,CAAC,qBAAD,EAAwB,KAAKp2C,KAA7B,CAApB;AACA,UAAMsd,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA69B,yBAAmB,CACjB,KAAKxO,KADY,EAEjB,KAAK5sC,KAFY,EAGjB,IAHiB,EAIjBsd,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CAJiB,CAAnB;AAMA,aAAO5jC,QAAQ,CAACY,OAAhB;AACD;;;;;;;;;;;;;;;;;;;;;;;WAqBD,aAAIhnB,KAAJ,EAAkB;AAChBk/C,0BAAoB,CAAC,kBAAD,EAAqB,KAAKp2C,KAA1B,CAApB;AACAm1C,6BAAuB,CAAC,kBAAD,EAAqBj+C,KAArB,EAA4B,KAAK8I,KAAjC,EAAwC,KAAxC,CAAvB;AACA,UAAMsd,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA69B,yBAAmB,CACjB,KAAKxO,KADY,EAEjB,KAAK5sC,KAFY,EAGjB9I,KAHiB,EAIjBomB,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CAJiB,CAAnB;AAMA,aAAO5jC,QAAQ,CAACY,OAAhB;AACD;;;;;;;;;;;;;;WAYD,yBACEhnB,KADF,EAEEkxB,QAFF,EAEkC;AAEhCguB,0BAAoB,CAAC,8BAAD,EAAiC,KAAKp2C,KAAtC,CAApB;AACAm1C,6BAAuB,CACrB,8BADqB,EAErBj+C,KAFqB,EAGrB,KAAK8I,KAHgB,EAIrB,KAJqB,CAAvB;AAMA+1C,sBAAgB,CAAC,8BAAD,EAAiC3tB,QAAjC,EAA2C,KAA3C,CAAhB;AAEA,UAAM9K,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA+9B,qCAA+B,CAC7B,KAAK1O,KADwB,EAE7B,KAAK5sC,KAFwB,EAG7B9I,KAH6B,EAI7BkxB,QAJ6B,EAK7B9K,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CAL6B,CAA/B;AAOA,aAAO5jC,QAAQ,CAACY,OAAhB;AACD;;;;;;;;;;;;;;;;;;;;WAkBD,gBAAO6F,MAAP,EAAqB;AACnBqyB,0BAAoB,CAAC,qBAAD,EAAwB,KAAKp2C,KAA7B,CAApB;AACA81C,kCAA4B,CAC1B,qBAD0B,EAE1B/xB,MAF0B,EAG1B,KAAK/jB,KAHqB,EAI1B,KAJ0B,CAA5B;AAMA,UAAMsd,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAg+B,4BAAsB,CACpB,KAAK3O,KADe,EAEpB,KAAK5sC,KAFe,EAGpB+jB,MAHoB,EAIpBzG,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CAJoB,CAAtB;AAMA,aAAO5jC,QAAQ,CAACY,OAAhB;AACD;;;;;AClMH;;;;;;;;;;;;;;;;;AAgGA;;;;;IAGaijC,S;;;;AAIX,qBACWvU,KADX,EAEW5sC,KAFX,EAGWye,YAHX,EAIW2iC,cAJX,EAIkC;AAAA;;AAHvB;AACA;AACA;AACA;AACP;;;;SAEJ,eAAO;AACL,UAAIhoC,WAAW,CAAC,KAAKpZ,KAAN,CAAf,EAA6B;AAC3B,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAOyY,WAAW,CAAC,KAAKzY,KAAN,CAAlB;AACD;AACF;;;SAED,eAAO;AACL,aAAO,IAAIqhD,aAAJ,CAAkB,KAAKzU,KAAvB,EAA8B,KAAK5sC,KAAnC,CAAP;AACD;;;SAED,eAAoB;AAClB,UAAM9C,GAAG,GAAGw7B,yBAAyB,CAAC,KAAKja,YAAN,CAArC;AACA,UAAM/lB,EAAE,GAAGyE,iBAAiB,CAACD,GAAD,CAA5B;AACA,aAAOxE,EAAE,KAAK,IAAP,GAAc,SAAd,GAA0BA,EAAjC;AACD;;;;;;;SAKD,eAAgB;AACd,aAAOggC,yBAAyB,CAAC,KAAKja,YAAN,CAAhC;AACD;;;WAED,iBAAQxE,KAAR,EAA+B;AAC7BA,WAAK,GAAGqnC,kBAAkB,CAACrnC,KAAD,CAA1B;;AACA,UAAI,EAAEA,KAAK,YAAYknC,SAAnB,CAAJ,EAAmC;AACjC,eAAO,KAAP;AACD;;AAED,UAAMI,QAAQ,GAAG,KAAK3U,KAAL,KAAe3yB,KAAK,CAAC2yB,KAAtC;AACA,UAAM4U,QAAQ,GAAGxnC,UAAU,CAAC,KAAKha,KAAN,EAAaia,KAAK,CAACja,KAAnB,CAA3B;AACA,UAAMyhD,mBAAmB,GACvB,KAAKnjC,gBAAL,KAA0BrE,KAAK,CAACqE,gBADlC;AAGA,aAAOijC,QAAQ,IAAIC,QAAZ,IAAwBC,mBAA/B;AACD;;;WAED,kBAAM;AACJ,aAAO,KAAK7pD,QAAL,EAAP;AACD;;;WAED,oBAAQ;AACN,aAAO,KAAKg1C,KAAL,CAAWh1C,QAAX,KAAwB8gB,sBAAsB,CAAC,KAAK1Y,KAAN,CAArD;AACD;;;;;AAGH;;;;;AAGA,SAAS0hD,6BAAT,CAAuC5hD,KAAvC,EAAyDs1C,MAAzD,EAAuE;AACrE,MAAIt1C,KAAK,CAACshD,cAAN,KAAyB,IAA7B,EAAmC;AACjC,UAAM,IAAIpmD,KAAJ,CAAUo6C,MAAM,GAAG,6CAAnB,CAAN;AACD;AACF;AAED;;;;;AAGA,SAASuM,sBAAT,CAAgCn9C,MAAhC,EAAmD;AACjD,MAAIo9C,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,IAAd;;AACA,MAAIr9C,MAAM,CAACgwB,QAAP,EAAJ,EAAuB;AACrBotB,aAAS,GAAGp9C,MAAM,CAACowB,kBAAP,EAAZ;AACD;;AACD,MAAIpwB,MAAM,CAACqwB,MAAP,EAAJ,EAAqB;AACnBgtB,WAAO,GAAGr9C,MAAM,CAACwwB,gBAAP,EAAV;AACD;;AAED,MAAIxwB,MAAM,CAACggB,QAAP,OAAsBgB,SAA1B,EAAqC;AACnC,QAAMs8B,gBAAgB,GACpB,oEACA,mCAFF;AAGA,QAAMC,iBAAiB,GACrB,kFACA,sDAFF;;AAGA,QAAIv9C,MAAM,CAACgwB,QAAP,EAAJ,EAAuB;AACrB,UAAMC,SAAS,GAAGjwB,MAAM,CAACkwB,iBAAP,EAAlB;;AACA,UAAID,SAAS,KAAKj4B,QAAlB,EAA4B;AAC1B,cAAM,IAAIxB,KAAJ,CAAU8mD,gBAAV,CAAN;AACD,OAFD,MAEO,IAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AACxC,cAAM,IAAI5mD,KAAJ,CAAU+mD,iBAAV,CAAN;AACD;AACF;;AACD,QAAIv9C,MAAM,CAACqwB,MAAP,EAAJ,EAAqB;AACnB,UAAMC,OAAO,GAAGtwB,MAAM,CAACuwB,eAAP,EAAhB;;AACA,UAAID,OAAO,KAAKr4B,QAAhB,EAA0B;AACxB,cAAM,IAAIzB,KAAJ,CAAU8mD,gBAAV,CAAN;AACD,OAFD,MAEO,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AACtC,cAAM,IAAI7mD,KAAJ,CAAU+mD,iBAAV,CAAN;AACD;AACF;AACF,GAvBD,MAuBO,IAAIv9C,MAAM,CAACggB,QAAP,OAAsBgG,cAA1B,EAA0C;AAC/C,QACGo3B,SAAS,IAAI,IAAb,IAAqB,CAAC1M,eAAe,CAAC0M,SAAD,CAAtC,IACCC,OAAO,IAAI,IAAX,IAAmB,CAAC3M,eAAe,CAAC2M,OAAD,CAFtC,EAGE;AACA,YAAM,IAAI7mD,KAAJ,CACJ,+EACE,iFADF,GAEE,gCAHE,CAAN;AAKD;AACF,GAXM,MAWA;AACLd,UAAM,CACJsK,MAAM,CAACggB,QAAP,cAA6ByM,SAA7B,IACEzsB,MAAM,CAACggB,QAAP,OAAsBiN,WAFpB,EAGJ,qBAHI,CAAN;;AAKA,QACGmwB,SAAS,IAAI,IAAb,IAAqB,OAAOA,SAAP,KAAqB,QAA3C,IACCC,OAAO,IAAI,IAAX,IAAmB,OAAOA,OAAP,KAAmB,QAFzC,EAGE;AACA,YAAM,IAAI7mD,KAAJ,CACJ,uFACE,gCAFE,CAAN;AAID;AACF;AACF;AAED;;;;;AAGA,SAASgnD,aAAT,CAAuBx9C,MAAvB,EAA0C;AACxC,MACEA,MAAM,CAACgwB,QAAP,MACAhwB,MAAM,CAACqwB,MAAP,EADA,IAEArwB,MAAM,CAACqzB,QAAP,EAFA,IAGA,CAACrzB,MAAM,CAACy9C,gBAAP,EAJH,EAKE;AACA,UAAM,IAAIjnD,KAAJ,CACJ,0FACE,0CAFE,CAAN;AAID;AACF;AAED;;;;;IAGaqmD,a;;;;;;AAEX,yBAAYtJ,IAAZ,EAAwBz/B,IAAxB,EAAkC;AAAA;;AAAA,+BAC1By/B,IAD0B,EACpBz/B,IADoB,EACd,IAAIwe,WAAJ,EADc,EACK,KADL;AAEjC;;;;SAED,eAAU;AACR,UAAMorB,UAAU,GAAGnpC,UAAU,CAAC,KAAK/Y,KAAN,CAA7B;AACA,aAAOkiD,UAAU,KAAK,IAAf,GACH,IADG,GAEH,IAAIb,aAAJ,CAAkB,KAAKzU,KAAvB,EAA8BsV,UAA9B,CAFJ;AAGD;;;SAED,eAAQ;AACN,UAAI5B,GAAG,GAAkB,IAAzB;;AACA,aAAOA,GAAG,CAAC5M,MAAJ,KAAe,IAAtB,EAA4B;AAC1B4M,WAAG,GAAGA,GAAG,CAAC5M,MAAV;AACD;;AACD,aAAO4M,GAAP;AACD;;;;EAnBgCa,S;AAsBnC;;;;;;;;;;;;;;;;IAcagB,Y;;;;;;;AAOX,wBACWC,KADX;;;;AAKW9B,KALX,EAMW+B,MANX,EAMwB;AAAA;;AALb;AAIA;AACA;AACP;;;;;;;;;;;;;SAUJ,eAAY;;AAEV,aAAO,KAAKD,KAAL,CAAW55B,WAAX,GAAyBjD,GAAzB,EAAP;AACD;;;;;;;;;;;;;SAWD,eAAO;AACL,aAAO,KAAK+6B,GAAL,CAASrpD,GAAhB;AACD;;;;;SAGD,eAAQ;AACN,aAAO,KAAKmrD,KAAL,CAAW7sB,WAAX,EAAP;AACD;;;;;;;;;;;;;;;;WAcD,eAAMjd,IAAN,EAAkB;AAChB,UAAM+nB,SAAS,GAAG,IAAIxoB,IAAJ,CAASS,IAAT,CAAlB;;AACA,UAAMgqC,QAAQ,GAAGznC,OAAK,CAAC,KAAKylC,GAAN,EAAWhoC,IAAX,CAAtB;;AACA,aAAO,IAAI6pC,YAAJ,CACL,KAAKC,KAAL,CAAWp0B,QAAX,CAAoBqS,SAApB,CADK,EAELiiB,QAFK,EAGL93B,cAHK,CAAP;AAKD;;;;;;;;WAKD,kBAAM;AACJ,aAAO,CAAC,KAAK43B,KAAL,CAAWj/B,OAAX,EAAR;AACD;;;;;;;;;;;;;;WAYD,qBAAS;AACP,aAAO,KAAKi/B,KAAL,CAAW78B,GAAX,CAAe,IAAf,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;WAoBD,iBAAQ3I,MAAR,EAAuD;AAAA;;AACrD,UAAI,KAAKwlC,KAAL,CAAW75B,UAAX,EAAJ,EAA6B;AAC3B,eAAO,KAAP;AACD;;AAED,UAAMirB,YAAY,GAAG,KAAK4O,KAA1B,CALqD;;AAOrD,aAAO,CAAC,CAAC5O,YAAY,CAAChlB,YAAb,CAA0B,KAAK6zB,MAA/B,EAAuC,UAACprD,GAAD,EAAM0tB,IAAN,EAAU;AACxD,eAAO/H,MAAM,CACX,IAAIulC,YAAJ,CAAiBx9B,IAAjB,EAAuB9J,OAAK,CAAC,OAAI,CAACylC,GAAN,EAAWrpD,GAAX,CAA5B,EAA6CuzB,cAA7C,CADW,CAAb;AAGD,OAJQ,CAAT;AAKD;;;;;;;;;;;WASD,kBAASlS,IAAT,EAAqB;AACnB,UAAM+nB,SAAS,GAAG,IAAIxoB,IAAJ,CAASS,IAAT,CAAlB;AACA,aAAO,CAAC,KAAK8pC,KAAL,CAAWp0B,QAAX,CAAoBqS,SAApB,EAA+Bld,OAA/B,EAAR;AACD;;;;;;;;;;;;;;;;WAcD,uBAAW;AACT,UAAI,KAAKi/B,KAAL,CAAW75B,UAAX,EAAJ,EAA6B;AAC3B,eAAO,KAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAC,KAAK65B,KAAL,CAAWj/B,OAAX,EAAR;AACD;AACF;;;;;;;WAKD,kBAAM;AACJ,aAAO,KAAKo9B,SAAL,EAAP;AACD;;;;;;;;;;;;;;;;WAcD,eAAG;AACD,aAAO,KAAK6B,KAAL,CAAW78B,GAAX,EAAP;AACD;;;;;AAEH;;;;;;;;;;;;;;;;SAcgB+6B,IAAIiC,IAAcjqC,MAAa;AAC7CiqC,IAAE,GAAGjB,kBAAkB,CAACiB,EAAD,CAAvB;;AACAA,IAAE,CAACC,gBAAH,CAAoB,KAApB;;AACA,SAAOlqC,IAAI,KAAK0F,SAAT,GAAqBnD,OAAK,CAAC0nC,EAAE,CAACE,KAAJ,EAAWnqC,IAAX,CAA1B,GAA6CiqC,EAAE,CAACE,KAAvD;AACD;AAED;;;;;;;;;;;;;;;;;;SAgBgBC,WAAWH,IAAc11C,KAAW;AAClD01C,IAAE,GAAGjB,kBAAkB,CAACiB,EAAD,CAAvB;;AACAA,IAAE,CAACC,gBAAH,CAAoB,YAApB;;AACA,MAAMG,SAAS,GAAGlD,aAAa,CAAC5yC,GAAD,EAAM01C,EAAE,CAAC3V,KAAH,CAASt6B,SAAT,CAAmB5O,SAAzB,CAA/B;AACA2yC,aAAW,CAAC,YAAD,EAAesM,SAAf,CAAX;AAEA,MAAMv+C,QAAQ,GAAGu+C,SAAS,CAACv+C,QAA3B;;AACA,MACE,CAACm+C,EAAE,CAAC3V,KAAH,CAASt6B,SAAT,CAAmBjO,YAAnB,EAAD,IACAD,QAAQ,CAACd,IAAT,KAAkBi/C,EAAE,CAAC3V,KAAH,CAASt6B,SAAT,CAAmBhP,IAFvC,EAGE;AACAvI,SAAK,CACH,eACE,mDADF,GAEE,SAFF,GAGEqJ,QAAQ,CAACd,IAHX,GAIE,gBAJF,GAKEi/C,EAAE,CAAC3V,KAAH,CAASt6B,SAAT,CAAmBhP,IALrB,GAME,GAPC,CAAL;AASD;;AAED,SAAOg9C,GAAG,CAACiC,EAAD,EAAKI,SAAS,CAACrqC,IAAV,CAAe1gB,QAAf,EAAL,CAAV;AACD;AAED;;;;;;;;;;;;;SAWgBijB,QACd64B,QACAp7B,MAAY;AAEZo7B,QAAM,GAAG4N,kBAAkB,CAAC5N,MAAD,CAA3B;;AACA,MAAIr7B,YAAY,CAACq7B,MAAM,CAAC1zC,KAAR,CAAZ,KAA+B,IAAnC,EAAyC;AACvCm2C,0BAAsB,CAAC,OAAD,EAAU,MAAV,EAAkB79B,IAAlB,EAAwB,KAAxB,CAAtB;AACD,GAFD,MAEO;AACL49B,sBAAkB,CAAC,OAAD,EAAU,MAAV,EAAkB59B,IAAlB,EAAwB,KAAxB,CAAlB;AACD;;AACD,SAAO,IAAI+oC,aAAJ,CAAkB3N,MAAM,CAAC9G,KAAzB,EAAgC3zB,SAAS,CAACy6B,MAAM,CAAC1zC,KAAR,EAAesY,IAAf,CAAzC,CAAP;AACD;AAED;;;;;;;;;SAOgB3Q,aAAa24C,KAAsB;AACjDA,KAAG,GAAGgB,kBAAkB,CAAChB,GAAD,CAAxB;AACA,SAAO,IAAIW,YAAJ,CAAiBX,GAAG,CAAC1T,KAArB,EAA4B0T,GAAG,CAACtgD,KAAhC,CAAP;AACD;AAMD;;;;;;;;;;;;;;;;;;;;;;;;;SAuBgB1C,KACdo2C,QACAx8C,OAAe;AAEfw8C,QAAM,GAAG4N,kBAAkB,CAAC5N,MAAD,CAA3B;AACA0C,sBAAoB,CAAC,MAAD,EAAS1C,MAAM,CAAC1zC,KAAhB,CAApB;AACAm1C,yBAAuB,CAAC,MAAD,EAASj+C,KAAT,EAAgBw8C,MAAM,CAAC1zC,KAAvB,EAA8B,IAA9B,CAAvB;AACA,MAAMiyB,GAAG,GAAGknB,cAAc,CAACzF,MAAM,CAAC9G,KAAR,CAA1B;AACA,MAAMl1C,IAAI,GAAGo6B,UAAU,CAACG,GAAD,CAAvB,CANe;;;;;;;AAcf,MAAM2wB,gBAAgB,GAAmC/nC,OAAK,CAC5D64B,MAD4D,EAE5Dh8C,IAF4D,CAA9D;;AAIA,MAAMmrD,OAAO,GAAGhoC,OAAK,CAAC64B,MAAD,EAASh8C,IAAT,CAArB;;AAEA,MAAIwmB,OAAJ;;AACA,MAAIhnB,KAAK,IAAI,IAAb,EAAmB;AACjBgnB,WAAO,GAAG1jB,GAAG,CAACqoD,OAAD,EAAU3rD,KAAV,CAAH,CAAoBmK,IAApB,CAAyB;AAAA,aAAMwhD,OAAN;AAAA,KAAzB,CAAV;AACD,GAFD,MAEO;AACL3kC,WAAO,GAAG3c,OAAO,CAACC,OAAR,CAAgBqhD,OAAhB,CAAV;AACD;;AAEDD,kBAAgB,CAACvhD,IAAjB,GAAwB6c,OAAO,CAAC7c,IAAR,CAAa9G,IAAb,CAAkB2jB,OAAlB,CAAxB;AACA0kC,kBAAgB,CAACxgD,KAAjB,GAAyB8b,OAAO,CAAC7c,IAAR,CAAa9G,IAAb,CAAkB2jB,OAAlB,EAA2BF,SAA3B,CAAzB;AACA,SAAO4kC,gBAAP;AACD;AAED;;;;;;;;;;;;;;;;SAcgBnoD,OAAO6lD,KAAsB;AAC3ClK,sBAAoB,CAAC,QAAD,EAAWkK,GAAG,CAACtgD,KAAf,CAApB;AACA,SAAOxF,GAAG,CAAC8lD,GAAD,EAAM,IAAN,CAAV;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6BgB9lD,IAAI8lD,KAAwBppD,OAAc;AACxDopD,KAAG,GAAGgB,kBAAkB,CAAChB,GAAD,CAAxB;AACAlK,sBAAoB,CAAC,KAAD,EAAQkK,GAAG,CAACtgD,KAAZ,CAApB;AACAm1C,yBAAuB,CAAC,KAAD,EAAQj+C,KAAR,EAAeopD,GAAG,CAACtgD,KAAnB,EAA0B,KAA1B,CAAvB;AACA,MAAMsd,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA88B,qBAAmB,CACjBiG,GAAG,CAAC1T,KADa,EAEjB0T,GAAG,CAACtgD,KAFa,EAGjB9I,KAHiB;;MAAA,EAKjBomB,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CALiB,CAAnB;AAOA,SAAO5jC,QAAQ,CAACY,OAAhB;AACD;AAED;;;;;;;;;;;;;;SAYgB4kC,YACdxC,KACAl4B,UAAgC;AAEhCk4B,KAAG,GAAGgB,kBAAkB,CAAChB,GAAD,CAAxB;AACAlK,sBAAoB,CAAC,aAAD,EAAgBkK,GAAG,CAACtgD,KAApB,CAApB;AACA+1C,kBAAgB,CAAC,aAAD,EAAgB3tB,QAAhB,EAA0B,KAA1B,CAAhB;AACA,MAAM9K,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA88B,qBAAmB,CACjBiG,GAAG,CAAC1T,KADa,EAEjB3zB,SAAS,CAACqnC,GAAG,CAACtgD,KAAL,EAAY,WAAZ,CAFQ,EAGjBooB,QAHiB,EAIjB,IAJiB,EAKjB9K,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CALiB,CAAnB;AAOA,SAAO5jC,QAAQ,CAACY,OAAhB;AACD;AAED;;;;;;;;;;;;;;;;;SAegB6kC,gBACdzC,KACAppD,OACAkxB,UAAgC;AAEhCguB,sBAAoB,CAAC,iBAAD,EAAoBkK,GAAG,CAACtgD,KAAxB,CAApB;AACAm1C,yBAAuB,CAAC,iBAAD,EAAoBj+C,KAApB,EAA2BopD,GAAG,CAACtgD,KAA/B,EAAsC,KAAtC,CAAvB;AACA+1C,kBAAgB,CAAC,iBAAD,EAAoB3tB,QAApB,EAA8B,KAA9B,CAAhB;;AACA,MAAIk4B,GAAG,CAACrpD,GAAJ,KAAY,SAAZ,IAAyBqpD,GAAG,CAACrpD,GAAJ,KAAY,OAAzC,EAAkD;AAChD,UAAM,6BAA6BqpD,GAAG,CAACrpD,GAAjC,GAAuC,yBAA7C;AACD;;AAED,MAAMqmB,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA88B,qBAAmB,CACjBiG,GAAG,CAAC1T,KADa,EAEjB0T,GAAG,CAACtgD,KAFa,EAGjB9I,KAHiB,EAIjBkxB,QAJiB,EAKjB9K,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CALiB,CAAnB;AAOA,SAAO5jC,QAAQ,CAACY,OAAhB;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAmCgBllB,OAAOsnD,KAAwBv8B,QAAc;AAC3D+xB,8BAA4B,CAAC,QAAD,EAAW/xB,MAAX,EAAmBu8B,GAAG,CAACtgD,KAAvB,EAA8B,KAA9B,CAA5B;AACA,MAAMsd,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAq9B,YAAU,CACR0F,GAAG,CAAC1T,KADI,EAER0T,GAAG,CAACtgD,KAFI,EAGR+jB,MAHQ,EAIRzG,QAAQ,CAAC4jC,YAAT,CAAsB,aAAQ,CAA9B,CAJQ,CAAV;AAMA,SAAO5jC,QAAQ,CAACY,OAAhB;AACD;AAED;;;;;;;;;;SAQgBxjB,IAAIoF,OAAY;AAC9BA,OAAK,GAAGwhD,kBAAkB,CAACxhD,KAAD,CAA1B;AACA,SAAOm6C,YAAY,CAACn6C,KAAK,CAAC8sC,KAAP,EAAc9sC,KAAd,CAAZ,CAAiCuB,IAAjC,CAAsC,cAAI;AAC/C,WAAO,IAAI8gD,YAAJ,CACLx9B,IADK,EAEL,IAAI08B,aAAJ,CAAkBvhD,KAAK,CAAC8sC,KAAxB,EAA+B9sC,KAAK,CAACE,KAArC,CAFK,EAGLF,KAAK,CAAC2e,YAAN,CAAmB+F,QAAnB,EAHK,CAAP;AAKD,GANM,CAAP;AAOD;AAED;;;;;IAGaw+B,sB;AACX,kCAAoBC,eAApB,EAAoD;AAAA;;AAAhC;AAAoC;;;;WAExD,oBAAWpsC,SAAX,EAA4B;AAC1B,aAAOA,SAAS,KAAK,OAArB;AACD;;;WAED,qBAAY0mB,MAAZ,EAA4Bz9B,KAA5B,EAA+C;AAC7C,UAAMie,KAAK,GAAGje,KAAK,CAAC2e,YAAN,CAAmB+F,QAAnB,EAAd;;AACA,aAAO,IAAI47B,SAAJ,CACL,OADK,EAEL,IAFK,EAGL,IAAI+B,YAAJ,CACE5kB,MAAM,CAAC5K,YADT,EAEE,IAAI0uB,aAAJ,CAAkBvhD,KAAK,CAAC8sC,KAAxB,EAA+B9sC,KAAK,CAACE,KAArC,CAFF,EAGE+d,KAHF,CAHK,CAAP;AASD;;;WAED,wBAAe7G,SAAf,EAAiD;AAAA;;AAC/C,UAAIA,SAAS,CAACgsC,YAAV,OAA6B,QAAjC,EAA2C;AACzC,eAAO;AAAA,iBACL,OAAI,CAACD,eAAL,CAAqBE,QAArB,CAA+BjsC,SAAyB,CAACpc,KAAzD,CADK;AAAA,SAAP;AAED,OAHD,MAGO;AACL,eAAO;AAAA,iBACL,OAAI,CAACmoD,eAAL,CAAqBG,OAArB,CAA8BlsC,SAAuB,CAACmpC,QAAtD,EAAgE,IAAhE,CADK;AAAA,SAAP;AAED;AACF;;;WAED,2BAAkBvlD,KAAlB,EAAgCwd,IAAhC,EAA0C;AACxC,UAAI,KAAK2qC,eAAL,CAAqBlC,iBAAzB,EAA4C;AAC1C,eAAO,IAAIP,WAAJ,CAAgB,IAAhB,EAAsB1lD,KAAtB,EAA6Bwd,IAA7B,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;WAED,iBAAQ2B,KAAR,EAAgC;AAC9B,UAAI,EAAEA,KAAK,YAAY+oC,sBAAnB,CAAJ,EAAgD;AAC9C,eAAO,KAAP;AACD,OAFD,MAEO,IAAI,CAAC/oC,KAAK,CAACgpC,eAAP,IAA0B,CAAC,KAAKA,eAApC,EAAqD;;AAE1D,eAAO,IAAP;AACD,OAHM,MAGA;AACL,eAAOhpC,KAAK,CAACgpC,eAAN,CAAsB7uB,OAAtB,CAA8B,KAAK6uB,eAAnC,CAAP;AACD;AACF;;;WAED,0BAAc;AACZ,aAAO,KAAKA,eAAL,KAAyB,IAAhC;AACD;;;;;AAGH;;;;;IAGaI,sB;AACX,kCACUxsC,SADV,EAEUosC,eAFV,EAEiD;AAAA;;AADvC;AACA;AACN;;;;WAEJ,oBAAWpsC,SAAX,EAA4B;AAC1B,UAAIysC,YAAY,GACdzsC,SAAS,KAAK,gBAAd,GAAiC,aAAjC,GAAiDA,SADnD;AAEAysC,kBAAY,GACVA,YAAY,KAAK,kBAAjB,GAAsC,eAAtC,GAAwDA,YAD1D;AAEA,aAAO,KAAKzsC,SAAL,KAAmBysC,YAA1B;AACD;;;WAED,2BAAkBxoD,KAAlB,EAAgCwd,IAAhC,EAA0C;AACxC,UAAI,KAAK2qC,eAAL,CAAqBlC,iBAAzB,EAA4C;AAC1C,eAAO,IAAIP,WAAJ,CAAgB,IAAhB,EAAsB1lD,KAAtB,EAA6Bwd,IAA7B,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;WAED,qBAAYilB,MAAZ,EAA4Bz9B,KAA5B,EAA+C;AAC7C5F,YAAM,CAACqjC,MAAM,CAACzU,SAAP,IAAoB,IAArB,EAA2B,uCAA3B,CAAN;;AACA,UAAMw5B,QAAQ,GAAGznC,OAAK,CACpB,IAAIwmC,aAAJ,CAAkBvhD,KAAK,CAAC8sC,KAAxB,EAA+B9sC,KAAK,CAACE,KAArC,CADoB,EAEpBu9B,MAAM,CAACzU,SAFa,CAAtB;;AAIA,UAAM/K,KAAK,GAAGje,KAAK,CAAC2e,YAAN,CAAmB+F,QAAnB,EAAd;;AACA,aAAO,IAAI47B,SAAJ,CACL7iB,MAAM,CAACh5B,IADF,EAEL,IAFK,EAGL,IAAI49C,YAAJ,CAAiB5kB,MAAM,CAAC5K,YAAxB,EAAsC2vB,QAAtC,EAAgDvkC,KAAhD,CAHK,EAILwf,MAAM,CAACY,QAJF,CAAP;AAMD;;;WAED,wBAAejnB,SAAf,EAAiD;AAAA;;AAC/C,UAAIA,SAAS,CAACgsC,YAAV,OAA6B,QAAjC,EAA2C;AACzC,eAAO;AAAA,iBACL,OAAI,CAACD,eAAL,CAAqBE,QAArB,CAA+BjsC,SAAyB,CAACpc,KAAzD,CADK;AAAA,SAAP;AAED,OAHD,MAGO;AACL,eAAO;AAAA,iBACL,OAAI,CAACmoD,eAAL,CAAqBG,OAArB,CACGlsC,SAAuB,CAACmpC,QAD3B,EAEGnpC,SAAuB,CAACinB,QAF3B,CADK;AAAA,SAAP;AAKD;AACF;;;WAED,iBAAQlkB,KAAR,EAAgC;AAC9B,UAAIA,KAAK,YAAYopC,sBAArB,EAA6C;AAC3C,eACE,KAAKxsC,SAAL,KAAmBoD,KAAK,CAACpD,SAAzB,KACC,CAAC,KAAKosC,eAAN,IACC,CAAChpC,KAAK,CAACgpC,eADR,IAEC,KAAKA,eAAL,CAAqB7uB,OAArB,CAA6Bna,KAAK,CAACgpC,eAAnC,CAHF,CADF;AAMD;;AAED,aAAO,KAAP;AACD;;;WAED,0BAAc;AACZ,aAAO,CAAC,CAAC,KAAKA,eAAd;AACD;;;;;;AAGH,SAAS3mD,gBAAT,CACEwD,KADF,EAEE+W,SAFF,EAGEtR,QAHF,EAIEg+C,6BAJF,EAKE/0C,OALF,EAKyB;AAEvB,MAAImyC,cAAJ;;AACA,MAAI,OAAO4C,6BAAP,KAAyC,QAA7C,EAAuD;AACrD5C,kBAAc,GAAG3iC,SAAjB;AACAxP,WAAO,GAAG+0C,6BAAV;AACD;;AACD,MAAI,OAAOA,6BAAP,KAAyC,UAA7C,EAAyD;AACvD5C,kBAAc,GAAG4C,6BAAjB;AACD;;AAED,MAAI/0C,OAAO,IAAIA,OAAO,CAACg1C,QAAvB,EAAiC;AAC/B,QAAMxC,YAAY,GAAGz7C,QAArB;;AACA,QAAMk+C,YAAY,GAAiB,SAA7BA,YAA6B,CAACC,YAAD,EAAe7C,iBAAf,EAAgC;AACjEnF,qCAA+B,CAAC57C,KAAK,CAAC8sC,KAAP,EAAc9sC,KAAd,EAAqB6jD,SAArB,CAA/B;AACA3C,kBAAY,CAAC0C,YAAD,EAAe7C,iBAAf,CAAZ;AACD,KAHD;;AAIA4C,gBAAY,CAACzC,YAAb,GAA4Bz7C,QAAQ,CAACy7C,YAArC;AACAyC,gBAAY,CAACzsC,OAAb,GAAuBzR,QAAQ,CAACyR,OAAhC;AACAzR,YAAQ,GAAGk+C,YAAX;AACD;;AAED,MAAMR,eAAe,GAAG,IAAIxC,eAAJ,CACtBl7C,QADsB,EAEtBo7C,cAAc,IAAI3iC,SAFI,CAAxB;AAIA,MAAM2lC,SAAS,GACb9sC,SAAS,KAAK,OAAd,GACI,IAAImsC,sBAAJ,CAA2BC,eAA3B,CADJ,GAEI,IAAII,sBAAJ,CAA2BxsC,SAA3B,EAAsCosC,eAAtC,CAHN;AAIAxH,8BAA4B,CAAC37C,KAAK,CAAC8sC,KAAP,EAAc9sC,KAAd,EAAqB6jD,SAArB,CAA5B;AACA,SAAO;AAAA,WAAMjI,+BAA+B,CAAC57C,KAAK,CAAC8sC,KAAP,EAAc9sC,KAAd,EAAqB6jD,SAArB,CAArC;AAAA,GAAP;AACD;;SAkGeP,QACdtjD,OACAyF,UACAg+C,+BACA/0C,SAAuB;AAEvB,SAAOlS,gBAAgB,CACrBwD,KADqB,EAErB,OAFqB,EAGrByF,QAHqB,EAIrBg+C,6BAJqB,EAKrB/0C,OALqB,CAAvB;AAOD;;SA8Geo1C,aACd9jD,OACAyF,UAIAg+C,+BACA/0C,SAAuB;AAEvB,SAAOlS,gBAAgB,CACrBwD,KADqB,EAErB,aAFqB,EAGrByF,QAHqB,EAIrBg+C,6BAJqB,EAKrB/0C,OALqB,CAAvB;AAOD;;SAiHeq1C,eACd/jD,OACAyF,UAIAg+C,+BACA/0C,SAAuB;AAEvB,SAAOlS,gBAAgB,CACrBwD,KADqB,EAErB,eAFqB,EAGrByF,QAHqB,EAIrBg+C,6BAJqB,EAKrB/0C,OALqB,CAAvB;AAOD;;SA2Ges1C,aACdhkD,OACAyF,UAIAg+C,+BACA/0C,SAAuB;AAEvB,SAAOlS,gBAAgB,CACrBwD,KADqB,EAErB,aAFqB,EAGrByF,QAHqB,EAIrBg+C,6BAJqB,EAKrB/0C,OALqB,CAAvB;AAOD;;SA8Geu1C,eACdjkD,OACAyF,UACAg+C,+BACA/0C,SAAuB;AAEvB,SAAOlS,gBAAgB,CACrBwD,KADqB,EAErB,eAFqB,EAGrByF,QAHqB,EAIrBg+C,6BAJqB,EAKrB/0C,OALqB,CAAvB;AAOD;AAID;;;;;;;;;;;;;;;;;;;;;;;;;;SAwBgBw1C,IACdlkD,OACA+W,WACAtR,UAGY;AAEZ,MAAIo+C,SAAS,GAA6B,IAA1C;AACA,MAAMM,WAAW,GAAG1+C,QAAQ,GAAG,IAAIk7C,eAAJ,CAAoBl7C,QAApB,CAAH,GAAmC,IAA/D;;AACA,MAAIsR,SAAS,KAAK,OAAlB,EAA2B;AACzB8sC,aAAS,GAAG,IAAIX,sBAAJ,CAA2BiB,WAA3B,CAAZ;AACD,GAFD,MAEO,IAAIptC,SAAJ,EAAe;AACpB8sC,aAAS,GAAG,IAAIN,sBAAJ,CAA2BxsC,SAA3B,EAAsCotC,WAAtC,CAAZ;AACD;;AACDvI,iCAA+B,CAAC57C,KAAK,CAAC8sC,KAAP,EAAc9sC,KAAd,EAAqB6jD,SAArB,CAA/B;AACD;AAgBD;;;;;;;;;;;;IAUsBO,e;;;;IAWhBC,oB;;;;;AAGJ,gCACmBC,MADnB,EAEmBvS,IAFnB,EAEgC;AAAA;;AAAA;;AAE9B;AAHiB;AACA;AAAa;AAG/B;;;;WAED,gBAAU/xC,KAAV,EAA0B;AACxBq1C,6BAAuB,CAAC,OAAD,EAAU,KAAKiP,MAAf,EAAuBtkD,KAAK,CAACE,KAA7B,EAAoC,IAApC,CAAvB;AACA,UAAMg4B,SAAS,GAAGI,gBAAgB,CAChCt4B,KAAK,CAAC2e,YAD0B,EAEhC,KAAK2lC,MAF2B,EAGhC,KAAKvS,IAH2B,CAAlC;AAKAmQ,mBAAa,CAAChqB,SAAD,CAAb;AACA2pB,4BAAsB,CAAC3pB,SAAD,CAAtB;;AACA,UAAIl4B,KAAK,CAAC2e,YAAN,CAAmBoW,MAAnB,EAAJ,EAAiC;AAC/B,cAAM,IAAI75B,KAAJ,CACJ,sEACE,wBAFE,CAAN;AAID;;AACD,aAAO,IAAImmD,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLg4B,SAHK,EAILl4B,KAAK,CAACshD,cAJD,CAAP;AAMD;;;;EA/BgC8C,e;AAkCnC;;;;;;;;;;;;;;;;;;;;;;;;;SAuBgBG,MACdntD,OACAD,KAAY;AAEZ++C,aAAW,CAAC,OAAD,EAAU,KAAV,EAAiB/+C,GAAjB,EAAsB,IAAtB,CAAX;AACA,SAAO,IAAIktD,oBAAJ,CAAyBjtD,KAAzB,EAAgCD,GAAhC,CAAP;AACD;;IAEKqtD,wB;;;;;AAGJ,oCACmBF,MADnB,EAEmBvS,IAFnB,EAEgC;AAAA;;AAAA;;AAE9B;AAHiB;AACA;AAAa;AAG/B;;;;WAED,gBAAU/xC,KAAV,EAA0B;AACxBq1C,6BAAuB,CAAC,WAAD,EAAc,KAAKiP,MAAnB,EAA2BtkD,KAAK,CAACE,KAAjC,EAAwC,KAAxC,CAAvB;AACA,UAAMg4B,SAAS,GAAGK,oBAAoB,CACpCv4B,KAAK,CAAC2e,YAD8B,EAEpC,KAAK2lC,MAF+B,EAGpC,KAAKvS,IAH+B,CAAtC;AAKAmQ,mBAAa,CAAChqB,SAAD,CAAb;AACA2pB,4BAAsB,CAAC3pB,SAAD,CAAtB;;AACA,UAAIl4B,KAAK,CAAC2e,YAAN,CAAmBoW,MAAnB,EAAJ,EAAiC;AAC/B,cAAM,IAAI75B,KAAJ,CACJ,0EACE,wBAFE,CAAN;AAID;;AACD,aAAO,IAAImmD,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLg4B,SAHK,EAILl4B,KAAK,CAACshD,cAJD,CAAP;AAMD;;;;EA/BoC8C,e;AAkCvC;;;;;;;;;;;;;;;;;;;;;SAmBgBK,UACdrtD,OACAD,KAAY;AAEZ++C,aAAW,CAAC,WAAD,EAAc,KAAd,EAAqB/+C,GAArB,EAA0B,IAA1B,CAAX;AACA,SAAO,IAAIqtD,wBAAJ,CAA6BptD,KAA7B,EAAoCD,GAApC,CAAP;AACD;;IAEKutD,sB;;;;;AAGJ,kCACmBJ,MADnB,EAEmBvS,IAFnB,EAEgC;AAAA;;AAAA;;AAE9B;AAHiB;AACA;AAAa;AAG/B;;;;WAED,gBAAU/xC,KAAV,EAA0B;AACxBq1C,6BAAuB,CAAC,SAAD,EAAY,KAAKiP,MAAjB,EAAyBtkD,KAAK,CAACE,KAA/B,EAAsC,IAAtC,CAAvB;AACA,UAAMg4B,SAAS,GAAGE,kBAAkB,CAClCp4B,KAAK,CAAC2e,YAD4B,EAElC,KAAK2lC,MAF6B,EAGlC,KAAKvS,IAH6B,CAApC;AAKAmQ,mBAAa,CAAChqB,SAAD,CAAb;AACA2pB,4BAAsB,CAAC3pB,SAAD,CAAtB;;AACA,UAAIl4B,KAAK,CAAC2e,YAAN,CAAmB+V,QAAnB,EAAJ,EAAmC;AACjC,cAAM,IAAIx5B,KAAJ,CACJ,0EACE,0BAFE,CAAN;AAID;;AACD,aAAO,IAAImmD,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLg4B,SAHK,EAILl4B,KAAK,CAACshD,cAJD,CAAP;AAMD;;;;EA/BkC8C,e;AAkCrC;;;;;;;;;;;;;;;;;;;;;;;;SAsBgBO,UAEF;AAAA,MADZvtD,KACY,uEAD8B,IAC9B;AAAA,MAAZD,GAAY;AAEZ++C,aAAW,CAAC,SAAD,EAAY,KAAZ,EAAmB/+C,GAAnB,EAAwB,IAAxB,CAAX;AACA,SAAO,IAAIutD,sBAAJ,CAA2BttD,KAA3B,EAAkCD,GAAlC,CAAP;AACD;;IAEKytD,yB;;;;;AAGJ,qCACmBN,MADnB,EAEmBvS,IAFnB,EAEgC;AAAA;;AAAA;;AAE9B;AAHiB;AACA;AAAa;AAG/B;;;;WAED,gBAAU/xC,KAAV,EAA0B;AACxBq1C,6BAAuB,CAAC,YAAD,EAAe,KAAKiP,MAApB,EAA4BtkD,KAAK,CAACE,KAAlC,EAAyC,KAAzC,CAAvB;AACA,UAAMg4B,SAAS,GAAGG,qBAAqB,CACrCr4B,KAAK,CAAC2e,YAD+B,EAErC,KAAK2lC,MAFgC,EAGrC,KAAKvS,IAHgC,CAAvC;AAKAmQ,mBAAa,CAAChqB,SAAD,CAAb;AACA2pB,4BAAsB,CAAC3pB,SAAD,CAAtB;;AACA,UAAIl4B,KAAK,CAAC2e,YAAN,CAAmB+V,QAAnB,EAAJ,EAAmC;AACjC,cAAM,IAAIx5B,KAAJ,CACJ,6EACE,0BAFE,CAAN;AAID;;AACD,aAAO,IAAImmD,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLg4B,SAHK,EAILl4B,KAAK,CAACshD,cAJD,CAAP;AAMD;;;;EA/BqC8C,e;AAkCxC;;;;;;;;;;;;;;;;;;;;SAkBgBS,WACdztD,OACAD,KAAY;AAEZ++C,aAAW,CAAC,YAAD,EAAe,KAAf,EAAsB/+C,GAAtB,EAA2B,IAA3B,CAAX;AACA,SAAO,IAAIytD,yBAAJ,CAA8BxtD,KAA9B,EAAqCD,GAArC,CAAP;AACD;;IAEK2tD,2B;;;;;AAGJ,uCAA6BC,MAA7B,EAA2C;AAAA;;AAAA;;AACzC;AAD2B;AAAc;AAE1C;;;;WAED,gBAAU/kD,KAAV,EAA0B;AACxB,UAAIA,KAAK,CAAC2e,YAAN,CAAmBoZ,QAAnB,EAAJ,EAAmC;AACjC,cAAM,IAAI78B,KAAJ,CACJ,0EACE,kBAFE,CAAN;AAID;;AACD,aAAO,IAAImmD,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGL83B,uBAAuB,CAACh4B,KAAK,CAAC2e,YAAP,EAAqB,KAAKomC,MAA1B,CAHlB,EAIL/kD,KAAK,CAACshD,cAJD,CAAP;AAMD;;;;EApBuC8C,e;AAuB1C;;;;;;;;;;;;;;;;;;;;SAkBgBY,aAAaC,OAAa;AACxC,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B3oD,IAAI,CAACC,KAAL,CAAW0oD,KAAX,MAAsBA,KAAnD,IAA4DA,KAAK,IAAI,CAAzE,EAA4E;AAC1E,UAAM,IAAI/pD,KAAJ,CAAU,0DAAV,CAAN;AACD;;AACD,SAAO,IAAI4pD,2BAAJ,CAAgCG,KAAhC,CAAP;AACD;;IAEKC,0B;;;;;AAGJ,sCAA6BH,MAA7B,EAA2C;AAAA;;AAAA;;AACzC;AAD2B;AAAc;AAE1C;;;;WAED,gBAAU/kD,KAAV,EAA0B;AACxB,UAAIA,KAAK,CAAC2e,YAAN,CAAmBoZ,QAAnB,EAAJ,EAAmC;AACjC,cAAM,IAAI78B,KAAJ,CACJ,yEACE,kBAFE,CAAN;AAID;;AACD,aAAO,IAAImmD,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLi4B,sBAAsB,CAACn4B,KAAK,CAAC2e,YAAP,EAAqB,KAAKomC,MAA1B,CAHjB,EAIL/kD,KAAK,CAACshD,cAJD,CAAP;AAMD;;;;EApBsC8C,e;AAuBzC;;;;;;;;;;;;;;;;;;;;SAkBgBe,YAAYF,OAAa;AACvC,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B3oD,IAAI,CAACC,KAAL,CAAW0oD,KAAX,MAAsBA,KAAnD,IAA4DA,KAAK,IAAI,CAAzE,EAA4E;AAC1E,UAAM,IAAI/pD,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,SAAO,IAAIgqD,0BAAJ,CAA+BD,KAA/B,CAAP;AACD;;IAEKG,2B;;;;;AAGJ,uCAA6BllD,KAA7B,EAA0C;AAAA;;AAAA;;AACxC;AAD2B;AAAa;AAEzC;;;;WAED,gBAAUF,KAAV,EAA0B;AACxB4hD,mCAA6B,CAAC5hD,KAAD,EAAQ,cAAR,CAA7B;AACA,UAAMqlD,UAAU,GAAG,IAAIttC,IAAJ,CAAS,KAAK7X,KAAd,CAAnB;;AACA,UAAIoZ,WAAW,CAAC+rC,UAAD,CAAf,EAA6B;AAC3B,cAAM,IAAInqD,KAAJ,CACJ,sEADI,CAAN;AAGD;;AACD,UAAM+iB,KAAK,GAAG,IAAIkT,SAAJ,CAAck0B,UAAd,CAAd;AACA,UAAMntB,SAAS,GAAGM,kBAAkB,CAACx4B,KAAK,CAAC2e,YAAP,EAAqBV,KAArB,CAApC;AACA4jC,4BAAsB,CAAC3pB,SAAD,CAAtB;AAEA,aAAO,IAAImpB,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLg4B,SAHK;;UAAA,CAAP;AAMD;;;;EAzBuCksB,e;AA4B1C;;;;;;;;;;;;;;;;;;;SAiBgBkB,aAAa9sC,MAAY;AACvC,MAAIA,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAM,IAAItd,KAAJ,CACJ,6DADI,CAAN;AAGD,GAJD,MAIO,IAAIsd,IAAI,KAAK,WAAb,EAA0B;AAC/B,UAAM,IAAItd,KAAJ,CACJ,uEADI,CAAN;AAGD,GAJM,MAIA,IAAIsd,IAAI,KAAK,QAAb,EAAuB;AAC5B,UAAM,IAAItd,KAAJ,CACJ,iEADI,CAAN;AAGD;;AACDk7C,oBAAkB,CAAC,cAAD,EAAiB,MAAjB,EAAyB59B,IAAzB,EAA+B,KAA/B,CAAlB;AACA,SAAO,IAAI4sC,2BAAJ,CAAgC5sC,IAAhC,CAAP;AACD;;IAEK+sC,yB;;;;;;;;;;;;;WAGJ,gBAAUvlD,KAAV,EAA0B;AACxB4hD,mCAA6B,CAAC5hD,KAAD,EAAQ,YAAR,CAA7B;AACA,UAAMk4B,SAAS,GAAGM,kBAAkB,CAACx4B,KAAK,CAAC2e,YAAP,EAAqB+G,SAArB,CAApC;AACAm8B,4BAAsB,CAAC3pB,SAAD,CAAtB;AACA,aAAO,IAAImpB,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLg4B,SAHK;;UAAA,CAAP;AAMD;;;;EAbqCksB,e;AAgBxC;;;;;;;;;;SAQgBoB,aAAU;AACxB,SAAO,IAAID,yBAAJ,EAAP;AACD;;IAEKE,8B;;;;;;;;;;;;;WAGJ,gBAAUzlD,KAAV,EAA0B;AACxB4hD,mCAA6B,CAAC5hD,KAAD,EAAQ,iBAAR,CAA7B;AACA,UAAMk4B,SAAS,GAAGM,kBAAkB,CAACx4B,KAAK,CAAC2e,YAAP,EAAqB+L,cAArB,CAApC;AACAm3B,4BAAsB,CAAC3pB,SAAD,CAAtB;AACA,aAAO,IAAImpB,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLg4B,SAHK;;UAAA,CAAP;AAMD;;;;EAb0CksB,e;AAgB7C;;;;;;;;;;SAQgBsB,kBAAe;AAC7B,SAAO,IAAID,8BAAJ,EAAP;AACD;;IAEKE,2B;;;;;;;;;;;;;WAGJ,gBAAU3lD,KAAV,EAA0B;AACxB4hD,mCAA6B,CAAC5hD,KAAD,EAAQ,cAAR,CAA7B;AACA,UAAMk4B,SAAS,GAAGM,kBAAkB,CAACx4B,KAAK,CAAC2e,YAAP,EAAqBgT,WAArB,CAApC;AACAkwB,4BAAsB,CAAC3pB,SAAD,CAAtB;AACA,aAAO,IAAImpB,SAAJ,CACLrhD,KAAK,CAAC8sC,KADD,EAEL9sC,KAAK,CAACE,KAFD,EAGLg4B,SAHK;;UAAA,CAAP;AAMD;;;;EAbuCksB,e;AAgB1C;;;;;;;;;;;SASgBwB,eAAY;AAC1B,SAAO,IAAID,2BAAJ,EAAP;AACD;;IAEKE,2B;;;;;AAGJ,uCACmBvB,MADnB,EAEmBvS,IAFnB,EAEgC;AAAA;;AAAA;;AAE9B;AAHiB;AACA;AAAa;AAG/B;;;;WAED,gBAAU/xC,KAAV,EAA0B;AACxBq1C,6BAAuB,CAAC,SAAD,EAAY,KAAKiP,MAAjB,EAAyBtkD,KAAK,CAACE,KAA/B,EAAsC,KAAtC,CAAvB;;AACA,UAAIF,KAAK,CAAC2e,YAAN,CAAmB+V,QAAnB,EAAJ,EAAmC;AACjC,cAAM,IAAIx5B,KAAJ,CACJ,uFACE,WAFE,CAAN;AAID;;AACD,UAAI8E,KAAK,CAAC2e,YAAN,CAAmBoW,MAAnB,EAAJ,EAAiC;AAC/B,cAAM,IAAI75B,KAAJ,CACJ,kFACE,WAFE,CAAN;AAID;;AACD,aAAO,IAAImpD,oBAAJ,CAAyB,KAAKC,MAA9B,EAAsC,KAAKvS,IAA3C,EAAiD+T,MAAjD,CACL,IAAIpB,sBAAJ,CAA2B,KAAKJ,MAAhC,EAAwC,KAAKvS,IAA7C,EAAmD+T,MAAnD,CAA0D9lD,KAA1D,CADK,CAAP;AAGD;;;;EA3BuCokD,e;AA8B1C;;;;;;;;;;;;;;;;;;;;;;;;;SAuBgB2B,QACd3uD,OACAD,KAAY;AAEZ++C,aAAW,CAAC,SAAD,EAAY,KAAZ,EAAmB/+C,GAAnB,EAAwB,IAAxB,CAAX;AACA,SAAO,IAAI0uD,2BAAJ,CAAgCzuD,KAAhC,EAAuCD,GAAvC,CAAP;AACD;AAED;;;;;;;;;;;SASgB6I,MACdA,OACsC;AAEtC,MAAIgmD,SAAS,GAAGxE,kBAAkB,CAACxhD,KAAD,CAAlC;;AAFsC,qCAAnCimD,gBAAmC;AAAnCA,oBAAmC;AAAA;;AAGtC,yCAAyBA,gBAAzB,2CAA2C;AAAtC,QAAMC,UAAU,0BAAhB;AACHF,aAAS,GAAGE,UAAU,CAACJ,MAAX,CAAkBE,SAAlB,CAAZ;AACD;;AACD,SAAOA,SAAP;AACD;AAED;;;;;;;;AAMAna,gCAAgC,CAAC0V,aAAD,CAAhC;AACA4E,+BAA+B,CAAC5E,aAAD,CAA/B;ACrtEA;;;;;;;;;;;;;;;;;AAoDA;;;;;;;;;AAQA,IAAM6E,mCAAmC,GAAG,iCAA5C;AAEA;;;;AAGA,IAAMC,KAAK,GAIP,EAJJ;AAMA;;;;AAGA,IAAIC,aAAa,GAAG,KAApB;AAEA;;;;AAGA,SAASC,gCAAT,CACEtO,IADF,EAEEz0C,IAFF,EAGEw8C,IAHF,EAIEwG,aAJF,EAImC;AAEjCvO,MAAI,CAACzlC,SAAL,GAAiB,IAAIjP,QAAJ,WACZC,IADY,cACJw8C,IADI;;AAED,OAFC,EAGf/H,IAAI,CAACzlC,SAAL,CAAe9O,SAHA,EAIfu0C,IAAI,CAACzlC,SAAL,CAAe7O,aAJA,EAKfs0C,IAAI,CAACzlC,SAAL,CAAe5O,SALA,EAMfq0C,IAAI,CAACzlC,SAAL,CAAe3O,cANA,EAOfo0C,IAAI,CAACzlC,SAAL,CAAe1O,6BAPA,CAAjB;;AAUA,MAAI0iD,aAAJ,EAAmB;AACjBvO,QAAI,CAAC57B,kBAAL,GAA0BmqC,aAA1B;AACD;AACF;AAED;;;;;;SAIgBC,2BACdC,KACAC,cACAxlD,kBACA4L,KACAnJ,WAAmB;AAEnB,MAAIgjD,KAAK,GAAuB75C,GAAG,IAAI25C,GAAG,CAACh4C,OAAJ,CAAYm4C,WAAnD;;AACA,MAAID,KAAK,KAAK1oC,SAAd,EAAyB;AACvB,QAAI,CAACwoC,GAAG,CAACh4C,OAAJ,CAAYo4C,SAAjB,EAA4B;AAC1B7rD,WAAK,CACH,+DACE,sDAFC,CAAL;AAID;;AAEDT,OAAG,CAAC,iCAAD,EAAoCksD,GAAG,CAACh4C,OAAJ,CAAYo4C,SAAhD,CAAH;AACAF,SAAK,aAAMF,GAAG,CAACh4C,OAAJ,CAAYo4C,SAAlB,iCAAL;AACD;;AAED,MAAItQ,SAAS,GAAGmJ,aAAa,CAACiH,KAAD,EAAQhjD,SAAR,CAA7B;AACA,MAAIU,QAAQ,GAAGkyC,SAAS,CAAClyC,QAAzB;AAEA,MAAIyiD,UAAJ;AAEA,MAAIC,cAAc,GAAuB9oC,SAAzC;;AACA,MAAI,OAAOtP,OAAP,KAAmB,WAAvB,EAAoC;AAClCo4C,kBAAc,GAAGp4C,OAAO,CAACE,GAAR,CAAYs3C,mCAAZ,CAAjB;AACD;;AAED,MAAIY,cAAJ,EAAoB;AAClBD,cAAU,GAAG,IAAb;AACAH,SAAK,oBAAaI,cAAb,iBAAkC1iD,QAAQ,CAACZ,SAA3C,CAAL;AACA8yC,aAAS,GAAGmJ,aAAa,CAACiH,KAAD,EAAQhjD,SAAR,CAAzB;AACAU,YAAQ,GAAGkyC,SAAS,CAAClyC,QAArB;AACD,GALD,MAKO;AACLyiD,cAAU,GAAG,CAACvQ,SAAS,CAAClyC,QAAV,CAAmBb,MAAjC;AACD;;AAED,MAAMwjD,iBAAiB,GACrBrjD,SAAS,IAAImjD,UAAb,GACI,IAAIrkD,qBAAJ,CAA0BA,qBAAqB,CAACwkD,KAAhD,CADJ,GAEI,IAAIllD,yBAAJ,CAA8B0kD,GAAG,CAAC9uD,IAAlC,EAAwC8uD,GAAG,CAACh4C,OAA5C,EAAqDi4C,YAArD,CAHN;AAKApQ,aAAW,CAAC,+BAAD,EAAkCC,SAAlC,CAAX;;AACA,MAAI,CAACl9B,WAAW,CAACk9B,SAAS,CAACh+B,IAAX,CAAhB,EAAkC;AAChCvd,SAAK,CACH,gEACE,+BAFC,CAAL;AAID;;AAED,MAAMg9C,IAAI,GAAGkP,qBAAqB,CAChC7iD,QADgC,EAEhCoiD,GAFgC,EAGhCO,iBAHgC,EAIhC,IAAIhmD,qBAAJ,CAA0BylD,GAAG,CAAC9uD,IAA9B,EAAoCuJ,gBAApC,CAJgC,CAAlC;AAMA,SAAO,IAAIimD,QAAJ,CAAanP,IAAb,EAAmByO,GAAnB,CAAP;AACD;AAED;;;;;;AAIA,SAASW,qBAAT,CAA+BpP,IAA/B,EAA2CqP,OAA3C,EAA0D;AACxD,MAAMC,QAAQ,GAAGlB,KAAK,CAACiB,OAAD,CAAtB,CADwD;;AAGxD,MAAI,CAACC,QAAD,IAAaA,QAAQ,CAACtP,IAAI,CAAC9gD,GAAN,CAAR,KAAuB8gD,IAAxC,EAA8C;AAC5Ch9C,SAAK,oBAAaqsD,OAAb,cAAwBrP,IAAI,CAACzlC,SAA7B,iCAAL;AACD;;AACDqpC,eAAa,CAAC5D,IAAD,CAAb;AACA,SAAOsP,QAAQ,CAACtP,IAAI,CAAC9gD,GAAN,CAAf;AACD;AAED;;;;;;;;;AAOA,SAASgwD,qBAAT,CACE7iD,QADF,EAEEoiD,GAFF,EAGEO,iBAHF,EAIE9lD,gBAJF,EAIyC;AAEvC,MAAIomD,QAAQ,GAAGlB,KAAK,CAACK,GAAG,CAAC9uD,IAAL,CAApB;;AAEA,MAAI,CAAC2vD,QAAL,EAAe;AACbA,YAAQ,GAAG,EAAX;AACAlB,SAAK,CAACK,GAAG,CAAC9uD,IAAL,CAAL,GAAkB2vD,QAAlB;AACD;;AAED,MAAItP,IAAI,GAAGsP,QAAQ,CAACjjD,QAAQ,CAACF,WAAT,EAAD,CAAnB;;AACA,MAAI6zC,IAAJ,EAAU;AACRh9C,SAAK,CACH,yHADG,CAAL;AAGD;;AACDg9C,MAAI,GAAG,IAAIJ,IAAJ,CAASvzC,QAAT,EAAmBgiD,aAAnB,EAAkCW,iBAAlC,EAAqD9lD,gBAArD,CAAP;AACAomD,UAAQ,CAACjjD,QAAQ,CAACF,WAAT,EAAD,CAAR,GAAmC6zC,IAAnC;AAEA,SAAOA,IAAP;AACD;AAED;;;;;SAGgBuP,2BAA2BC,iBAAwB;AACjEnB,eAAa,GAAGmB,eAAhB;AACD;AAED;;;;;IAGaL,Q;;AAWX,oBACSM,aADT;;AAGWhB,KAHX,EAG2B;AAAA;;AAFlB;AAEE;;;AAZF,mBAAS,UAAT;;;AAGT,4BAA4B,KAA5B;AAUI;;;;SAEJ,eAAS;AACP,UAAI,CAAC,KAAKiB,gBAAV,EAA4B;AAC1B3P,iBAAS,CACP,KAAK0P,aADE,EAEP,KAAKhB,GAAL,CAASh4C,OAAT,CAAiBwpC,KAFV,EAGP,KAAKwO,GAAL,CAASh4C,OAAT,CAAiB,8BAAjB,CAHO,CAAT;AAKA,aAAKi5C,gBAAL,GAAwB,IAAxB;AACD;;AACD,aAAO,KAAKD,aAAZ;AACD;;;SAED,eAAS;AACP,UAAI,CAAC,KAAKE,aAAV,EAAyB;AACvB,aAAKA,aAAL,GAAqB,IAAIrG,aAAJ,CAAkB,KAAKzU,KAAvB,EAA8Bx0B,YAAY,EAA1C,CAArB;AACD;;AACD,aAAO,KAAKsvC,aAAZ;AACD;;;WAED,mBAAO;AACL,UAAI,KAAKA,aAAL,KAAuB,IAA3B,EAAiC;AAC/BP,6BAAqB,CAAC,KAAKva,KAAN,EAAa,KAAK4Z,GAAL,CAAS9uD,IAAtB,CAArB;AACA,aAAK8vD,aAAL,GAAqB,IAArB;AACA,aAAKE,aAAL,GAAqB,IAArB;AACD;;AACD,aAAOnmD,OAAO,CAACC,OAAR,EAAP;AACD;;;WAED,0BAAiBmmD,OAAjB,EAAgC;AAC9B,UAAI,KAAKD,aAAL,KAAuB,IAA3B,EAAiC;AAC/B3sD,aAAK,CAAC,iBAAiB4sD,OAAjB,GAA2B,yBAA5B,CAAL;AACD;AACF;;;;;AAGH;;;;;;;;;;;;;;SAYgBC,cAEF;AAAA,MADZpB,GACY,uEADOqB,MAAM,EACb;AAAA,MAAZh7C,GAAY;AAEZ,SAAOi7C,YAAY,CAACtB,GAAD,EAAM,UAAN,CAAZ,CAA8BrlD,YAA9B,CAA2C;AAChD4mD,cAAU,EAAEl7C;AADoC,GAA3C,CAAP;AAGD;AAED;;;;;;;;;;;;;SAWgBm7C,wBACdzF,IACAj/C,MACAw8C,MAGM;AAAA,MAFNtxC,OAEM,uEAAF,EAAE;AAEN+zC,IAAE,GAAGjB,kBAAkB,CAACiB,EAAD,CAAvB;;AACAA,IAAE,CAACC,gBAAH,CAAoB,aAApB;;AACA,MAAID,EAAE,CAACkF,gBAAP,EAAyB;AACvB1sD,SAAK,CACH,wEADG,CAAL;AAGD;;AAED,MAAMg9C,IAAI,GAAGwK,EAAE,CAACiF,aAAhB;AACA,MAAIlB,aAAa,GAAsCtoC,SAAvD;;AACA,MAAI+5B,IAAI,CAACzlC,SAAL,CAAe5O,SAAnB,EAA8B;AAC5B,QAAI8K,OAAO,CAACy5C,aAAZ,EAA2B;AACzBltD,WAAK,CACH,oJADG,CAAL;AAGD;;AACDurD,iBAAa,GAAG,IAAI9jD,qBAAJ,CAA0BA,qBAAqB,CAACwkD,KAAhD,CAAhB;AACD,GAPD,MAOO,IAAIx4C,OAAO,CAACy5C,aAAZ,EAA2B;AAChC,QAAMxxC,KAAK,GACT,OAAOjI,OAAO,CAACy5C,aAAf,KAAiC,QAAjC,GACIz5C,OAAO,CAACy5C,aADZ,GAEIC,mBAAmB,CAAC15C,OAAO,CAACy5C,aAAT,EAAwB1F,EAAE,CAACiE,GAAH,CAAOh4C,OAAP,CAAeo4C,SAAvC,CAHzB;AAIAN,iBAAa,GAAG,IAAI9jD,qBAAJ,CAA0BiU,KAA1B,CAAhB;AACD,GAzBK;;;AA4BN4vC,kCAAgC,CAACtO,IAAD,EAAOz0C,IAAP,EAAaw8C,IAAb,EAAmBwG,aAAnB,CAAhC;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;SAqBgB6B,UAAU5F,IAAY;AACpCA,IAAE,GAAGjB,kBAAkB,CAACiB,EAAD,CAAvB;;AACAA,IAAE,CAACC,gBAAH,CAAoB,WAApB;;AACA7G,eAAa,CAAC4G,EAAE,CAAC3V,KAAJ,CAAb;AACD;AAED;;;;;;;;;;;;;SAWgBwb,SAAS7F,IAAY;AACnCA,IAAE,GAAGjB,kBAAkB,CAACiB,EAAD,CAAvB;;AACAA,IAAE,CAACC,gBAAH,CAAoB,UAApB;;AACA5G,YAAU,CAAC2G,EAAE,CAAC3V,KAAJ,CAAV;AACD;;SAkBe7yC,cACdF,QACAI,YAAoB;AAEpBouD,iBAAiB,CAACxuD,MAAD,EAASI,UAAT,CAAjBouD;AACF;ACvZA;;;;;;;;;;;;;;;;;;SA6BgBC,iBAAiBC,SAAgB;AAC/C1xD,eAAa,CAACD,aAAD,CAAb;;AACA4xD,oBAAkB,CAChB,IAAIC,SAAJ,CACE,UADF,EAEE,UAAC9E,SAAD,SAAuC;AAAA,QAAL92C,GAAK,SAAzB67C,kBAAyB;AACrC,QAAMlC,GAAG,GAAG7C,SAAS,CAACgF,WAAV,CAAsB,KAAtB,EAA6BxnD,YAA7B,EAAZ;AACA,QAAMslD,YAAY,GAAG9C,SAAS,CAACgF,WAAV,CAAsB,eAAtB,CAArB;AACA,QAAM1nD,gBAAgB,GAAG0iD,SAAS,CAACgF,WAAV,CAAsB,oBAAtB,CAAzB;AACA,WAAOpC,0BAA0B,CAC/BC,GAD+B,EAE/BC,YAF+B,EAG/BxlD,gBAH+B,EAI/B4L,GAJ+B,CAAjC;AAMD,GAZH,EAYG;AAAA;AAZH,IAcE+7C,oBAdF,CAcuB,IAdvB,CADgB,CAAlB;;AAiBAC,iBAAe,CAACnxD,IAAD,EAAOZ,OAAP,EAAgByxD,OAAhB,CAAf,CAnB+C;;AAqB/CM,iBAAe,CAACnxD,IAAD,EAAOZ,OAAP,EAAgB,SAAhB,CAAf;AACF;ACnDA;;;;;;;;;;;;;;;;;;AAiBA,IAAMgyD,gBAAgB,GAAG;AACvB,SAAO;AADgB,CAAzB;AAIA;;;;;;SAKgBC,kBAAe;AAC7B,SAAOD,gBAAP;AACD;AAED;;;;;;;;;SAOgBE,UAAU5lC,OAAa;AACrC,SAAO;AACL,WAAO;AACL,mBAAaA;AADR;AADF,GAAP;AAKF;AC3CA;;;;;;;;;;;;;;;;;AAsCA;;;;;IAGa6lC,iB;;AAEX;;AAEWC,WAFX;;AAIW7I,UAJX,EAIiC;AAAA;;AAFtB;AAEA;AACP;;;;;;WAGJ,kBAAM;AACJ,aAAO;AAAE6I,iBAAS,EAAE,KAAKA,SAAlB;AAA6B7I,gBAAQ,EAAE,KAAKA,QAAL,CAAc8I,MAAd;AAAvC,OAAP;AACD;;;;;AAGH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAqCgBC,eACd9I,KACA;AACAvE,mBACAvtC,SAA4B;;;AAE5B8xC,KAAG,GAAGgB,kBAAkB,CAAChB,GAAD,CAAxB;AAEAlK,sBAAoB,CAAC,uBAAD,EAA0BkK,GAAG,CAACtgD,KAA9B,CAApB;;AAEA,MAAIsgD,GAAG,CAACrpD,GAAJ,KAAY,SAAZ,IAAyBqpD,GAAG,CAACrpD,GAAJ,KAAY,OAAzC,EAAkD;AAChD,UACE,mCAAmCqpD,GAAG,CAACrpD,GAAvC,GAA6C,yBAD/C;AAGD;;AAED,MAAMglD,YAAY,GAAG,aAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,YAAT,MAAqB,IAArB,IAAqBr6C,aAArB,GAAqBA,EAArB,GAAyB,IAA9C;AACA,MAAM0b,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;AAEA,MAAM8rC,eAAe,GAAG,SAAlBA,eAAkB,CACtBvuD,KADsB,EAEtBouD,SAFsB,EAGtBvkC,IAHsB,EAGL;AAEjB,QAAI++B,YAAY,GAAwB,IAAxC;;AACA,QAAI5oD,KAAJ,EAAW;AACTwiB,cAAQ,CAAC7b,MAAT,CAAgB3G,KAAhB;AACD,KAFD,MAEO;AACL4oD,kBAAY,GAAG,IAAIvB,YAAJ,CACbx9B,IADa,EAEb,IAAI08B,aAAJ,CAAkBf,GAAG,CAAC1T,KAAtB,EAA6B0T,GAAG,CAACtgD,KAAjC,CAFa,EAGbwqB,cAHa,CAAf;AAKAlN,cAAQ,CAAC9b,OAAT,CAAiB,IAAIynD,iBAAJ,CAAsBC,SAAtB,EAAiCxF,YAAjC,CAAjB;AACD;AACF,GAhBD,CAf4B;;;AAkC5B,MAAM1H,SAAS,GAAGoH,OAAO,CAAC9C,GAAD,EAAM,aAAQ,CAAd,CAAzB;AAEAxE,sBAAoB,CAClBwE,GAAG,CAAC1T,KADc,EAElB0T,GAAG,CAACtgD,KAFc,EAGlB+7C,iBAHkB,EAIlBsN,eAJkB,EAKlBrN,SALkB,EAMlBC,YANkB,CAApB;AASA,SAAO3+B,QAAQ,CAACY,OAAhB;AACF;AC/IA;;;;;;;;;;;;;;;;;;AAuB8BnC,qB,CAE9B;;AACCA,oBAAoB,CAACutC,SAArB,CAAuCC,YAAvC,GAAsD,UACrDjzC,UADqD,EAErDC,UAFqD,EAErB;AAEhC,OAAK4G,WAAL,CAAiB,GAAjB,EAAsB;AAAEM,KAAC,EAAEnH;AAAL,GAAtB,EAAyCC,UAAzC;AACD,CALA,C,CAOD;;;AACCwF,oBAAoB,CAACutC,SAArB,CAAuCE,IAAvC,GAA8C,UAC7CjuD,IAD6C,EAE7CkuD,MAF6C,EAEjB;AAE5B,OAAKtsC,WAAL,CAAiB,MAAjB,EAAyB;AAAE9Q,KAAC,EAAE9Q;AAAL,GAAzB,EAAsCkuD,MAAtC;AACD,CALA,C,CAOD;;;AACkCp3C;AAElC;;;;IAGaq3C,UAAU,GAAG,SAAbA,UAAa,CAAUC,OAAV,EAA+B;AACvD,MAAMC,MAAM,GAAG7tC,oBAAoB,CAACutC,SAArB,CAA+BhmC,GAA9C;;AACAvH,sBAAoB,CAACutC,SAArB,CAA+BhmC,GAA/B,GAAqC,UACnChN,UADmC,EAEnC/a,IAFmC,EAGnCgb,UAHmC,EAInCC,IAJmC,EAI/B;AAEJ,QAAIA,IAAI,KAAKwH,SAAb,EAAwB;AACtBxH,UAAI,GAAGmzC,OAAO,EAAd;AACD;;AACDC,UAAM,CAAC9I,IAAP,CAAY,IAAZ,EAAkBxqC,UAAlB,EAA8B/a,IAA9B,EAAoCgb,UAApC,EAAgDC,IAAhD;AACD,GAVD;;AAWA,SAAO;AACLuF,wBAAoB,CAACutC,SAArB,CAA+BhmC,GAA/B,GAAqCsmC,MAArC;AACD,GAFD;AAGF;;AAEgCvmD;AAEhC;;;;;IAIakkD,eAAe,GAAG,yBAAUA,gBAAV,EAAkC;AAC/DD,4BAA0B,CAACC,gBAAD,CAA1B;AACF;ACzEA;;;;;;;AA4BAe,gBAAgB","names":["SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","domStorage_","key","value","removeItem","prefixedName_","setItem","stringify","storedVal","getItem","jsonEval","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","set","remove","get","varArgs","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","forceRefresh","Promise","resolve","reject","getToken","listener","_a","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","newHost","isCacheableHost","toURLString","repoInfoNeedsQueryParam","repoInfo","isCustomHost","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","amount","counters_","deepCopy","collections","reporters","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","statsManagerGetCollection","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","incrementCounter","base64data","base64Encode","enqueueSegment","pw","createElement","src","style","display","appendChild","bytesReceived","forceAllow_","forceDisallow_","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","open","write","alive","innerHTML","myID","myPW","newRequest_","outstandingRequests","size","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","iframe","contentWindow","contentDocument","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","m","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","String","keepaliveTimer","clearInterval","setInterval","send","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","isInMemoryStorage","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","connectionCount","onConnectionLost_","everConnected","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","token","stats","EventEmitter","allowedEvents_","eventType","listeners_","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","OnlineMonitor","isMobileCordova","online_","trigger","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","Map","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","sendRequest","requestCBHash_","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","outstandingGets_","outstandingGetCount_","index","undefined","sendGet_","promise","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","listen","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","scheduleConnect_","reconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","forceTokenRefresh_","all","interrupt","interruptReasons_","isEmpty","delta","serverTimeOffset","put","map","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","console","replace","values","queries","clientName","isReactNative","reportStats","currentlyOnline","warnings","safeGet","indexSpec","getIndex","indexPath","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","KeyIndex","assertionError","indexValue","val","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","LLRBNode","color","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","nodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","next","getNext","isDefinedOn","newIndex","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","ChildrenNode","children_","indexMap_","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Default","MaxNode","Object","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","childData","setNodeFromJSON","PathIndex","indexPath_","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","startSet_","startAfterSet_","endBeforeSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","queryParamsGetNodeFilter","queryParams","hasLimit","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","restRequest_","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsListener_","reportStats_","reportedStats","haveStatsToReport","statsToReport_","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","indexedValueChanged","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","getPredecessorChildName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","fullPath","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","childPath","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","merge","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","oldChange","changeMap","oldType","from","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","getChanges","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","filtersNodes","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","isCompleteForPath","getCompleteChild","newEventSnap","viewProcessorCacheHasChild","curViewCache","foreach","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","eventRegistrations_","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor","SyncPoint","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","views","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","entries","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncTreeApplyUserOverwrite","syncTree","newData","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","fromObject","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","syncPointTree_","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","queryToTagMap","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","foreachChild","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","tagToQueryMap","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","splitIndex","fold","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventLists_","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","persistentConnection_","connectStatus","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","eventQueue_","unlisten","repoServerTime","offsetNode","offset","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","nextWriteId_","repoGetValue","cached","repoLog","err","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","onDisconnectCancel","repoOnDisconnectSet","onDisconnectPut","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","onDisconnectMerge","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","resume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","transactionQueueTree_","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","expDataSnapshot","previousChildName","call","hasCancelCallback","userCallback","OnDisconnect","wrapCallback","QueryImpl","_orderByCalled","ReferenceImpl","getModularInstance","sameRepo","samePath","sameQueryIdentifier","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","hasAnchoredLimit","parentPath","DataSnapshot","_node","_index","childRef","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","setWithPriority","ValueEventRegistration","callbackContext","getEventType","onCancel","onValue","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","container","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","off","expCallback","QueryConstraint","QueryEndAtConstraint","_value","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","_apply","equalTo","queryImpl","queryConstraints","constraint","syncTreeSetReferenceConstructor","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","apiName","getDatabase","getApp","_getProvider","identifier","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","enableLoggingImpl","registerDatabase","variant","_registerComponent","Component","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","toJSON","runTransaction","promiseComplete","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut"],"sources":["/database/src/core/version.ts","/database/src/core/storage/DOMStorageWrapper.ts","/database/src/core/storage/MemoryStorage.ts","/database/src/core/storage/storage.ts","/database/src/core/util/util.ts","/database/src/core/AppCheckTokenProvider.ts","/database/src/core/AuthTokenProvider.ts","/database/src/realtime/Constants.ts","/database/src/core/RepoInfo.ts","/database/src/core/stats/StatsCollection.ts","/database/src/core/stats/StatsManager.ts","/database/src/realtime/polling/PacketReceiver.ts","/database/src/realtime/BrowserPollConnection.ts","/database/src/realtime/WebSocketConnection.ts","/database/src/realtime/TransportManager.ts","/database/src/realtime/Connection.ts","/database/src/core/ServerActions.ts","/database/src/core/util/EventEmitter.ts","/database/src/core/util/OnlineMonitor.ts","/database/src/core/util/Path.ts","/database/src/core/util/VisibilityMonitor.ts","/database/src/core/PersistentConnection.ts","/database/src/core/snap/Node.ts","/database/src/core/snap/indexes/Index.ts","/database/src/core/snap/indexes/KeyIndex.ts","/database/src/core/util/SortedMap.ts","/database/src/core/snap/comparators.ts","/database/src/core/snap/snap.ts","/database/src/core/snap/LeafNode.ts","/database/src/core/snap/indexes/PriorityIndex.ts","/database/src/core/snap/childSet.ts","/database/src/core/snap/IndexMap.ts","/database/src/core/snap/ChildrenNode.ts","/database/src/core/snap/nodeFromJSON.ts","/database/src/core/snap/indexes/PathIndex.ts","/database/src/core/snap/indexes/ValueIndex.ts","/database/src/core/util/NextPushId.ts","/database/src/core/view/Change.ts","/database/src/core/view/filter/IndexedFilter.ts","/database/src/core/view/filter/RangedFilter.ts","/database/src/core/view/filter/LimitedFilter.ts","/database/src/core/view/QueryParams.ts","/database/src/core/ReadonlyRestClient.ts","/database/src/core/SnapshotHolder.ts","/database/src/core/SparseSnapshotTree.ts","/database/src/core/stats/StatsListener.ts","/database/src/core/stats/StatsReporter.ts","/database/src/core/operation/Operation.ts","/database/src/core/operation/AckUserWrite.ts","/database/src/core/operation/ListenComplete.ts","/database/src/core/operation/Overwrite.ts","/database/src/core/operation/Merge.ts","/database/src/core/view/CacheNode.ts","/database/src/core/view/EventGenerator.ts","/database/src/core/view/ViewCache.ts","/database/src/core/util/ImmutableTree.ts","/database/src/core/CompoundWrite.ts","/database/src/core/WriteTree.ts","/database/src/core/view/ChildChangeAccumulator.ts","/database/src/core/view/CompleteChildSource.ts","/database/src/core/view/ViewProcessor.ts","/database/src/core/view/View.ts","/database/src/core/SyncPoint.ts","/database/src/core/SyncTree.ts","/database/src/core/util/ServerValues.ts","/database/src/core/util/Tree.ts","/database/src/core/util/validation.ts","/database/src/core/view/EventQueue.ts","/database/src/core/Repo.ts","/database/src/core/util/libs/parser.ts","/database/src/core/view/Event.ts","/database/src/core/view/EventRegistration.ts","/database/src/api/OnDisconnect.ts","/database/src/api/Reference_impl.ts","/database/src/api/Database.ts","/database/src/register.ts","/database/src/api/ServerValue.ts","/database/src/api/Transaction.ts","/database/src/api/test_access.ts","/database/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}